// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: histogram.proto

#include "histogram.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace tensorboard {
class HistogramProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HistogramProto> _instance;
} _HistogramProto_default_instance_;
}  // namespace tensorboard
static void InitDefaultsscc_info_HistogramProto_histogram_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorboard::_HistogramProto_default_instance_;
    new (ptr) ::tensorboard::HistogramProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorboard::HistogramProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HistogramProto_histogram_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HistogramProto_histogram_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_histogram_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_histogram_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_histogram_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_histogram_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorboard::HistogramProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorboard::HistogramProto, min_),
  PROTOBUF_FIELD_OFFSET(::tensorboard::HistogramProto, max_),
  PROTOBUF_FIELD_OFFSET(::tensorboard::HistogramProto, num_),
  PROTOBUF_FIELD_OFFSET(::tensorboard::HistogramProto, sum_),
  PROTOBUF_FIELD_OFFSET(::tensorboard::HistogramProto, sum_squares_),
  PROTOBUF_FIELD_OFFSET(::tensorboard::HistogramProto, bucket_limit_),
  PROTOBUF_FIELD_OFFSET(::tensorboard::HistogramProto, bucket_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::tensorboard::HistogramProto)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorboard::_HistogramProto_default_instance_),
};

const char descriptor_table_protodef_histogram_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017histogram.proto\022\013tensorboard\"\207\001\n\016Histo"
  "gramProto\022\013\n\003min\030\001 \001(\001\022\013\n\003max\030\002 \001(\001\022\013\n\003n"
  "um\030\003 \001(\001\022\013\n\003sum\030\004 \001(\001\022\023\n\013sum_squares\030\005 \001"
  "(\001\022\030\n\014bucket_limit\030\006 \003(\001B\002\020\001\022\022\n\006bucket\030\007"
  " \003(\001B\002\020\001B\\\n\030org.tensorflow.frameworkP\001Z;"
  "github.com/google/tsl/tsl/go/core/protob"
  "uf/summary_go_proto\370\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_histogram_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_histogram_2eproto_sccs[1] = {
  &scc_info_HistogramProto_histogram_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_histogram_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_histogram_2eproto = {
  false, false, descriptor_table_protodef_histogram_2eproto, "histogram.proto", 270,
  &descriptor_table_histogram_2eproto_once, descriptor_table_histogram_2eproto_sccs, descriptor_table_histogram_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_histogram_2eproto::offsets,
  file_level_metadata_histogram_2eproto, 1, file_level_enum_descriptors_histogram_2eproto, file_level_service_descriptors_histogram_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_histogram_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_histogram_2eproto)), true);
namespace tensorboard {

// ===================================================================

void HistogramProto::InitAsDefaultInstance() {
}
class HistogramProto::_Internal {
 public:
};

HistogramProto::HistogramProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  bucket_limit_(arena),
  bucket_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorboard.HistogramProto)
}
HistogramProto::HistogramProto(const HistogramProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      bucket_limit_(from.bucket_limit_),
      bucket_(from.bucket_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&min_, &from.min_,
    static_cast<size_t>(reinterpret_cast<char*>(&sum_squares_) -
    reinterpret_cast<char*>(&min_)) + sizeof(sum_squares_));
  // @@protoc_insertion_point(copy_constructor:tensorboard.HistogramProto)
}

void HistogramProto::SharedCtor() {
  ::memset(&min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sum_squares_) -
      reinterpret_cast<char*>(&min_)) + sizeof(sum_squares_));
}

HistogramProto::~HistogramProto() {
  // @@protoc_insertion_point(destructor:tensorboard.HistogramProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HistogramProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HistogramProto::ArenaDtor(void* object) {
  HistogramProto* _this = reinterpret_cast< HistogramProto* >(object);
  (void)_this;
}
void HistogramProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HistogramProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HistogramProto& HistogramProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HistogramProto_histogram_2eproto.base);
  return *internal_default_instance();
}


void HistogramProto::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorboard.HistogramProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bucket_limit_.Clear();
  bucket_.Clear();
  ::memset(&min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sum_squares_) -
      reinterpret_cast<char*>(&min_)) + sizeof(sum_squares_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HistogramProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double min = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double max = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double sum = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          sum_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double sum_squares = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          sum_squares_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated double bucket_limit = 6 [packed = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_bucket_limit(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49) {
          _internal_add_bucket_limit(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated double bucket = 7 [packed = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_bucket(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57) {
          _internal_add_bucket(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HistogramProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorboard.HistogramProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double min = 1;
  if (!(this->min() <= 0 && this->min() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_min(), target);
  }

  // double max = 2;
  if (!(this->max() <= 0 && this->max() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_max(), target);
  }

  // double num = 3;
  if (!(this->num() <= 0 && this->num() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_num(), target);
  }

  // double sum = 4;
  if (!(this->sum() <= 0 && this->sum() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_sum(), target);
  }

  // double sum_squares = 5;
  if (!(this->sum_squares() <= 0 && this->sum_squares() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_sum_squares(), target);
  }

  // repeated double bucket_limit = 6 [packed = true];
  if (this->_internal_bucket_limit_size() > 0) {
    target = stream->WriteFixedPacked(6, _internal_bucket_limit(), target);
  }

  // repeated double bucket = 7 [packed = true];
  if (this->_internal_bucket_size() > 0) {
    target = stream->WriteFixedPacked(7, _internal_bucket(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorboard.HistogramProto)
  return target;
}

size_t HistogramProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorboard.HistogramProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double bucket_limit = 6 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_bucket_limit_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _bucket_limit_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated double bucket = 7 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_bucket_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _bucket_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // double min = 1;
  if (!(this->min() <= 0 && this->min() >= 0)) {
    total_size += 1 + 8;
  }

  // double max = 2;
  if (!(this->max() <= 0 && this->max() >= 0)) {
    total_size += 1 + 8;
  }

  // double num = 3;
  if (!(this->num() <= 0 && this->num() >= 0)) {
    total_size += 1 + 8;
  }

  // double sum = 4;
  if (!(this->sum() <= 0 && this->sum() >= 0)) {
    total_size += 1 + 8;
  }

  // double sum_squares = 5;
  if (!(this->sum_squares() <= 0 && this->sum_squares() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HistogramProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorboard.HistogramProto)
  GOOGLE_DCHECK_NE(&from, this);
  const HistogramProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HistogramProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorboard.HistogramProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorboard.HistogramProto)
    MergeFrom(*source);
  }
}

void HistogramProto::MergeFrom(const HistogramProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorboard.HistogramProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bucket_limit_.MergeFrom(from.bucket_limit_);
  bucket_.MergeFrom(from.bucket_);
  if (!(from.min() <= 0 && from.min() >= 0)) {
    _internal_set_min(from._internal_min());
  }
  if (!(from.max() <= 0 && from.max() >= 0)) {
    _internal_set_max(from._internal_max());
  }
  if (!(from.num() <= 0 && from.num() >= 0)) {
    _internal_set_num(from._internal_num());
  }
  if (!(from.sum() <= 0 && from.sum() >= 0)) {
    _internal_set_sum(from._internal_sum());
  }
  if (!(from.sum_squares() <= 0 && from.sum_squares() >= 0)) {
    _internal_set_sum_squares(from._internal_sum_squares());
  }
}

void HistogramProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorboard.HistogramProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistogramProto::CopyFrom(const HistogramProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorboard.HistogramProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistogramProto::IsInitialized() const {
  return true;
}

void HistogramProto::InternalSwap(HistogramProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  bucket_limit_.InternalSwap(&other->bucket_limit_);
  bucket_.InternalSwap(&other->bucket_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HistogramProto, sum_squares_)
      + sizeof(HistogramProto::sum_squares_)
      - PROTOBUF_FIELD_OFFSET(HistogramProto, min_)>(
          reinterpret_cast<char*>(&min_),
          reinterpret_cast<char*>(&other->min_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HistogramProto::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace tensorboard
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tensorboard::HistogramProto* Arena::CreateMaybeMessage< ::tensorboard::HistogramProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorboard::HistogramProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
