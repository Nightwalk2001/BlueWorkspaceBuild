// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mindspore_anf_ir.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mindspore_5fanf_5fir_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mindspore_5fanf_5fir_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mindspore_5fanf_5fir_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mindspore_5fanf_5fir_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[17]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mindspore_5fanf_5fir_2eproto;
namespace mindspore {
namespace irpb {
class AttributeProto;
class AttributeProtoDefaultTypeInternal;
extern AttributeProtoDefaultTypeInternal _AttributeProto_default_instance_;
class GraphProto;
class GraphProtoDefaultTypeInternal;
extern GraphProtoDefaultTypeInternal _GraphProto_default_instance_;
class InputProto;
class InputProtoDefaultTypeInternal;
extern InputProtoDefaultTypeInternal _InputProto_default_instance_;
class ModelProto;
class ModelProtoDefaultTypeInternal;
extern ModelProtoDefaultTypeInternal _ModelProto_default_instance_;
class NamedValueProto;
class NamedValueProtoDefaultTypeInternal;
extern NamedValueProtoDefaultTypeInternal _NamedValueProto_default_instance_;
class NodeProto;
class NodeProtoDefaultTypeInternal;
extern NodeProtoDefaultTypeInternal _NodeProto_default_instance_;
class OperatorProto;
class OperatorProtoDefaultTypeInternal;
extern OperatorProtoDefaultTypeInternal _OperatorProto_default_instance_;
class OperatorSetProto;
class OperatorSetProtoDefaultTypeInternal;
extern OperatorSetProtoDefaultTypeInternal _OperatorSetProto_default_instance_;
class OutputProto;
class OutputProtoDefaultTypeInternal;
extern OutputProtoDefaultTypeInternal _OutputProto_default_instance_;
class ParameterProto;
class ParameterProtoDefaultTypeInternal;
extern ParameterProtoDefaultTypeInternal _ParameterProto_default_instance_;
class TensorProto;
class TensorProtoDefaultTypeInternal;
extern TensorProtoDefaultTypeInternal _TensorProto_default_instance_;
class TensorShapeProto;
class TensorShapeProtoDefaultTypeInternal;
extern TensorShapeProtoDefaultTypeInternal _TensorShapeProto_default_instance_;
class TensorShapeProto_Dimension;
class TensorShapeProto_DimensionDefaultTypeInternal;
extern TensorShapeProto_DimensionDefaultTypeInternal _TensorShapeProto_Dimension_default_instance_;
class TypeProto;
class TypeProtoDefaultTypeInternal;
extern TypeProtoDefaultTypeInternal _TypeProto_default_instance_;
class TypeProto_Sequence;
class TypeProto_SequenceDefaultTypeInternal;
extern TypeProto_SequenceDefaultTypeInternal _TypeProto_Sequence_default_instance_;
class TypeProto_Tensor;
class TypeProto_TensorDefaultTypeInternal;
extern TypeProto_TensorDefaultTypeInternal _TypeProto_Tensor_default_instance_;
class ValueProto;
class ValueProtoDefaultTypeInternal;
extern ValueProtoDefaultTypeInternal _ValueProto_default_instance_;
}  // namespace irpb
}  // namespace mindspore
PROTOBUF_NAMESPACE_OPEN
template<> ::mindspore::irpb::AttributeProto* Arena::CreateMaybeMessage<::mindspore::irpb::AttributeProto>(Arena*);
template<> ::mindspore::irpb::GraphProto* Arena::CreateMaybeMessage<::mindspore::irpb::GraphProto>(Arena*);
template<> ::mindspore::irpb::InputProto* Arena::CreateMaybeMessage<::mindspore::irpb::InputProto>(Arena*);
template<> ::mindspore::irpb::ModelProto* Arena::CreateMaybeMessage<::mindspore::irpb::ModelProto>(Arena*);
template<> ::mindspore::irpb::NamedValueProto* Arena::CreateMaybeMessage<::mindspore::irpb::NamedValueProto>(Arena*);
template<> ::mindspore::irpb::NodeProto* Arena::CreateMaybeMessage<::mindspore::irpb::NodeProto>(Arena*);
template<> ::mindspore::irpb::OperatorProto* Arena::CreateMaybeMessage<::mindspore::irpb::OperatorProto>(Arena*);
template<> ::mindspore::irpb::OperatorSetProto* Arena::CreateMaybeMessage<::mindspore::irpb::OperatorSetProto>(Arena*);
template<> ::mindspore::irpb::OutputProto* Arena::CreateMaybeMessage<::mindspore::irpb::OutputProto>(Arena*);
template<> ::mindspore::irpb::ParameterProto* Arena::CreateMaybeMessage<::mindspore::irpb::ParameterProto>(Arena*);
template<> ::mindspore::irpb::TensorProto* Arena::CreateMaybeMessage<::mindspore::irpb::TensorProto>(Arena*);
template<> ::mindspore::irpb::TensorShapeProto* Arena::CreateMaybeMessage<::mindspore::irpb::TensorShapeProto>(Arena*);
template<> ::mindspore::irpb::TensorShapeProto_Dimension* Arena::CreateMaybeMessage<::mindspore::irpb::TensorShapeProto_Dimension>(Arena*);
template<> ::mindspore::irpb::TypeProto* Arena::CreateMaybeMessage<::mindspore::irpb::TypeProto>(Arena*);
template<> ::mindspore::irpb::TypeProto_Sequence* Arena::CreateMaybeMessage<::mindspore::irpb::TypeProto_Sequence>(Arena*);
template<> ::mindspore::irpb::TypeProto_Tensor* Arena::CreateMaybeMessage<::mindspore::irpb::TypeProto_Tensor>(Arena*);
template<> ::mindspore::irpb::ValueProto* Arena::CreateMaybeMessage<::mindspore::irpb::ValueProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mindspore {
namespace irpb {

enum InputProto_EdgeType : int {
  InputProto_EdgeType_DATA_EDGE = 0,
  InputProto_EdgeType_CONTROL_EDGE = 1
};
bool InputProto_EdgeType_IsValid(int value);
constexpr InputProto_EdgeType InputProto_EdgeType_EdgeType_MIN = InputProto_EdgeType_DATA_EDGE;
constexpr InputProto_EdgeType InputProto_EdgeType_EdgeType_MAX = InputProto_EdgeType_CONTROL_EDGE;
constexpr int InputProto_EdgeType_EdgeType_ARRAYSIZE = InputProto_EdgeType_EdgeType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InputProto_EdgeType_descriptor();
template<typename T>
inline const std::string& InputProto_EdgeType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, InputProto_EdgeType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function InputProto_EdgeType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    InputProto_EdgeType_descriptor(), enum_t_value);
}
inline bool InputProto_EdgeType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, InputProto_EdgeType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<InputProto_EdgeType>(
    InputProto_EdgeType_descriptor(), name, value);
}
enum Version : int {
  UNKNOWWN_VERSION = 0,
  IR_VERSION = 1
};
bool Version_IsValid(int value);
constexpr Version Version_MIN = UNKNOWWN_VERSION;
constexpr Version Version_MAX = IR_VERSION;
constexpr int Version_ARRAYSIZE = Version_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Version_descriptor();
template<typename T>
inline const std::string& Version_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Version>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Version_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Version_descriptor(), enum_t_value);
}
inline bool Version_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Version* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Version>(
    Version_descriptor(), name, value);
}
enum DataType : int {
  DT_UNDEFINED = 0,
  DT_BOOL = 1,
  DT_INT8 = 2,
  DT_INT16 = 3,
  DT_INT32 = 4,
  DT_INT64 = 5,
  DT_UINT8 = 6,
  DT_UINT16 = 7,
  DT_UINT32 = 8,
  DT_UINT64 = 9,
  DT_FLOAT16 = 10,
  DT_FLOAT32 = 11,
  DT_FLOAT64 = 12,
  DT_STRING = 13,
  DT_TENSOR = 14,
  DT_GRAPH = 15,
  DT_BOOLS = 16,
  DT_INTS8 = 17,
  DT_INTS16 = 18,
  DT_INTS32 = 19,
  DT_INTS64 = 20,
  DT_UINTS8 = 21,
  DT_UINTS16 = 22,
  DT_UINTS32 = 23,
  DT_UINTS64 = 24,
  DT_FLOATS16 = 25,
  DT_FLOATS32 = 26,
  DT_FLOATS64 = 27,
  DT_STRINGS = 28,
  DT_TENSORS = 29,
  DT_GRAPHS = 30,
  DT_TUPLE = 31,
  DT_LIST = 32,
  DT_DICT = 33,
  DT_NONE = 34,
  DT_SYM_INST = 35,
  DT_BASE_INT = 36,
  DT_BASE_UINT = 37,
  DT_BASE_FLOAT = 38,
  DT_TYPE = 39,
  DT_ANY = 40,
  DT_REFKEY = 41,
  DT_REF = 42,
  DT_COMPLEX64 = 43,
  DT_COMPLEX128 = 44,
  DT_BASE_COMPLEX = 45,
  DT_BFLOAT16 = 46,
  DT_BFLOATS16 = 47,
  DT_INT4 = 48,
  DT_SLICE = 49
};
bool DataType_IsValid(int value);
constexpr DataType DataType_MIN = DT_UNDEFINED;
constexpr DataType DataType_MAX = DT_SLICE;
constexpr int DataType_ARRAYSIZE = DataType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataType_descriptor();
template<typename T>
inline const std::string& DataType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DataType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DataType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DataType_descriptor(), enum_t_value);
}
inline bool DataType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DataType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DataType>(
    DataType_descriptor(), name, value);
}
// ===================================================================

class ValueProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mindspore.irpb.ValueProto) */ {
 public:
  inline ValueProto() : ValueProto(nullptr) {}
  virtual ~ValueProto();

  ValueProto(const ValueProto& from);
  ValueProto(ValueProto&& from) noexcept
    : ValueProto() {
    *this = ::std::move(from);
  }

  inline ValueProto& operator=(const ValueProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValueProto& operator=(ValueProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ValueProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValueProto* internal_default_instance() {
    return reinterpret_cast<const ValueProto*>(
               &_ValueProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ValueProto& a, ValueProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ValueProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValueProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ValueProto* New() const final {
    return CreateMaybeMessage<ValueProto>(nullptr);
  }

  ValueProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ValueProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ValueProto& from);
  void MergeFrom(const ValueProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValueProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mindspore.irpb.ValueProto";
  }
  protected:
  explicit ValueProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mindspore_5fanf_5fir_2eproto);
    return ::descriptor_table_mindspore_5fanf_5fir_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBoolValsFieldNumber = 10,
    kIntValsFieldNumber = 11,
    kUintValsFieldNumber = 12,
    kFloatValsFieldNumber = 13,
    kDoubleValsFieldNumber = 14,
    kStrValsFieldNumber = 15,
    kTensorValsFieldNumber = 16,
    kGraphsFieldNumber = 17,
    kValuesFieldNumber = 18,
    kDictValFieldNumber = 19,
    kStrValFieldNumber = 7,
    kTensorValFieldNumber = 8,
    kGraphFieldNumber = 9,
    kTypeValFieldNumber = 20,
    kDtypeFieldNumber = 1,
    kBoolValFieldNumber = 2,
    kIntValFieldNumber = 3,
    kUintValFieldNumber = 4,
    kDoubleValFieldNumber = 6,
    kFloatValFieldNumber = 5,
  };
  // repeated bool bool_vals = 10;
  int bool_vals_size() const;
  private:
  int _internal_bool_vals_size() const;
  public:
  void clear_bool_vals();
  private:
  bool _internal_bool_vals(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_bool_vals() const;
  void _internal_add_bool_vals(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_bool_vals();
  public:
  bool bool_vals(int index) const;
  void set_bool_vals(int index, bool value);
  void add_bool_vals(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      bool_vals() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_bool_vals();

  // repeated int64 int_vals = 11;
  int int_vals_size() const;
  private:
  int _internal_int_vals_size() const;
  public:
  void clear_int_vals();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_int_vals(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_int_vals() const;
  void _internal_add_int_vals(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_int_vals();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 int_vals(int index) const;
  void set_int_vals(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_int_vals(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      int_vals() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_int_vals();

  // repeated uint64 uint_vals = 12;
  int uint_vals_size() const;
  private:
  int _internal_uint_vals_size() const;
  public:
  void clear_uint_vals();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_uint_vals(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_uint_vals() const;
  void _internal_add_uint_vals(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_uint_vals();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 uint_vals(int index) const;
  void set_uint_vals(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_uint_vals(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      uint_vals() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_uint_vals();

  // repeated float float_vals = 13;
  int float_vals_size() const;
  private:
  int _internal_float_vals_size() const;
  public:
  void clear_float_vals();
  private:
  float _internal_float_vals(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_float_vals() const;
  void _internal_add_float_vals(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_float_vals();
  public:
  float float_vals(int index) const;
  void set_float_vals(int index, float value);
  void add_float_vals(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      float_vals() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_float_vals();

  // repeated double double_vals = 14;
  int double_vals_size() const;
  private:
  int _internal_double_vals_size() const;
  public:
  void clear_double_vals();
  private:
  double _internal_double_vals(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_double_vals() const;
  void _internal_add_double_vals(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_double_vals();
  public:
  double double_vals(int index) const;
  void set_double_vals(int index, double value);
  void add_double_vals(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      double_vals() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_double_vals();

  // repeated string str_vals = 15;
  int str_vals_size() const;
  private:
  int _internal_str_vals_size() const;
  public:
  void clear_str_vals();
  const std::string& str_vals(int index) const;
  std::string* mutable_str_vals(int index);
  void set_str_vals(int index, const std::string& value);
  void set_str_vals(int index, std::string&& value);
  void set_str_vals(int index, const char* value);
  void set_str_vals(int index, const char* value, size_t size);
  std::string* add_str_vals();
  void add_str_vals(const std::string& value);
  void add_str_vals(std::string&& value);
  void add_str_vals(const char* value);
  void add_str_vals(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& str_vals() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_str_vals();
  private:
  const std::string& _internal_str_vals(int index) const;
  std::string* _internal_add_str_vals();
  public:

  // repeated .mindspore.irpb.TensorProto tensor_vals = 16;
  int tensor_vals_size() const;
  private:
  int _internal_tensor_vals_size() const;
  public:
  void clear_tensor_vals();
  ::mindspore::irpb::TensorProto* mutable_tensor_vals(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mindspore::irpb::TensorProto >*
      mutable_tensor_vals();
  private:
  const ::mindspore::irpb::TensorProto& _internal_tensor_vals(int index) const;
  ::mindspore::irpb::TensorProto* _internal_add_tensor_vals();
  public:
  const ::mindspore::irpb::TensorProto& tensor_vals(int index) const;
  ::mindspore::irpb::TensorProto* add_tensor_vals();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mindspore::irpb::TensorProto >&
      tensor_vals() const;

  // repeated .mindspore.irpb.GraphProto graphs = 17;
  int graphs_size() const;
  private:
  int _internal_graphs_size() const;
  public:
  void clear_graphs();
  ::mindspore::irpb::GraphProto* mutable_graphs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mindspore::irpb::GraphProto >*
      mutable_graphs();
  private:
  const ::mindspore::irpb::GraphProto& _internal_graphs(int index) const;
  ::mindspore::irpb::GraphProto* _internal_add_graphs();
  public:
  const ::mindspore::irpb::GraphProto& graphs(int index) const;
  ::mindspore::irpb::GraphProto* add_graphs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mindspore::irpb::GraphProto >&
      graphs() const;

  // repeated .mindspore.irpb.ValueProto values = 18;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  ::mindspore::irpb::ValueProto* mutable_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mindspore::irpb::ValueProto >*
      mutable_values();
  private:
  const ::mindspore::irpb::ValueProto& _internal_values(int index) const;
  ::mindspore::irpb::ValueProto* _internal_add_values();
  public:
  const ::mindspore::irpb::ValueProto& values(int index) const;
  ::mindspore::irpb::ValueProto* add_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mindspore::irpb::ValueProto >&
      values() const;

  // repeated .mindspore.irpb.NamedValueProto dict_val = 19;
  int dict_val_size() const;
  private:
  int _internal_dict_val_size() const;
  public:
  void clear_dict_val();
  ::mindspore::irpb::NamedValueProto* mutable_dict_val(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mindspore::irpb::NamedValueProto >*
      mutable_dict_val();
  private:
  const ::mindspore::irpb::NamedValueProto& _internal_dict_val(int index) const;
  ::mindspore::irpb::NamedValueProto* _internal_add_dict_val();
  public:
  const ::mindspore::irpb::NamedValueProto& dict_val(int index) const;
  ::mindspore::irpb::NamedValueProto* add_dict_val();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mindspore::irpb::NamedValueProto >&
      dict_val() const;

  // optional string str_val = 7;
  bool has_str_val() const;
  private:
  bool _internal_has_str_val() const;
  public:
  void clear_str_val();
  const std::string& str_val() const;
  void set_str_val(const std::string& value);
  void set_str_val(std::string&& value);
  void set_str_val(const char* value);
  void set_str_val(const char* value, size_t size);
  std::string* mutable_str_val();
  std::string* release_str_val();
  void set_allocated_str_val(std::string* str_val);
  private:
  const std::string& _internal_str_val() const;
  void _internal_set_str_val(const std::string& value);
  std::string* _internal_mutable_str_val();
  public:

  // optional .mindspore.irpb.TensorProto tensor_val = 8;
  bool has_tensor_val() const;
  private:
  bool _internal_has_tensor_val() const;
  public:
  void clear_tensor_val();
  const ::mindspore::irpb::TensorProto& tensor_val() const;
  ::mindspore::irpb::TensorProto* release_tensor_val();
  ::mindspore::irpb::TensorProto* mutable_tensor_val();
  void set_allocated_tensor_val(::mindspore::irpb::TensorProto* tensor_val);
  private:
  const ::mindspore::irpb::TensorProto& _internal_tensor_val() const;
  ::mindspore::irpb::TensorProto* _internal_mutable_tensor_val();
  public:
  void unsafe_arena_set_allocated_tensor_val(
      ::mindspore::irpb::TensorProto* tensor_val);
  ::mindspore::irpb::TensorProto* unsafe_arena_release_tensor_val();

  // optional .mindspore.irpb.GraphProto graph = 9;
  bool has_graph() const;
  private:
  bool _internal_has_graph() const;
  public:
  void clear_graph();
  const ::mindspore::irpb::GraphProto& graph() const;
  ::mindspore::irpb::GraphProto* release_graph();
  ::mindspore::irpb::GraphProto* mutable_graph();
  void set_allocated_graph(::mindspore::irpb::GraphProto* graph);
  private:
  const ::mindspore::irpb::GraphProto& _internal_graph() const;
  ::mindspore::irpb::GraphProto* _internal_mutable_graph();
  public:
  void unsafe_arena_set_allocated_graph(
      ::mindspore::irpb::GraphProto* graph);
  ::mindspore::irpb::GraphProto* unsafe_arena_release_graph();

  // optional .mindspore.irpb.TypeProto type_val = 20;
  bool has_type_val() const;
  private:
  bool _internal_has_type_val() const;
  public:
  void clear_type_val();
  const ::mindspore::irpb::TypeProto& type_val() const;
  ::mindspore::irpb::TypeProto* release_type_val();
  ::mindspore::irpb::TypeProto* mutable_type_val();
  void set_allocated_type_val(::mindspore::irpb::TypeProto* type_val);
  private:
  const ::mindspore::irpb::TypeProto& _internal_type_val() const;
  ::mindspore::irpb::TypeProto* _internal_mutable_type_val();
  public:
  void unsafe_arena_set_allocated_type_val(
      ::mindspore::irpb::TypeProto* type_val);
  ::mindspore::irpb::TypeProto* unsafe_arena_release_type_val();

  // optional .mindspore.irpb.DataType dtype = 1;
  bool has_dtype() const;
  private:
  bool _internal_has_dtype() const;
  public:
  void clear_dtype();
  ::mindspore::irpb::DataType dtype() const;
  void set_dtype(::mindspore::irpb::DataType value);
  private:
  ::mindspore::irpb::DataType _internal_dtype() const;
  void _internal_set_dtype(::mindspore::irpb::DataType value);
  public:

  // optional bool bool_val = 2;
  bool has_bool_val() const;
  private:
  bool _internal_has_bool_val() const;
  public:
  void clear_bool_val();
  bool bool_val() const;
  void set_bool_val(bool value);
  private:
  bool _internal_bool_val() const;
  void _internal_set_bool_val(bool value);
  public:

  // optional int64 int_val = 3;
  bool has_int_val() const;
  private:
  bool _internal_has_int_val() const;
  public:
  void clear_int_val();
  ::PROTOBUF_NAMESPACE_ID::int64 int_val() const;
  void set_int_val(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_int_val() const;
  void _internal_set_int_val(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional uint64 uint_val = 4;
  bool has_uint_val() const;
  private:
  bool _internal_has_uint_val() const;
  public:
  void clear_uint_val();
  ::PROTOBUF_NAMESPACE_ID::uint64 uint_val() const;
  void set_uint_val(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_uint_val() const;
  void _internal_set_uint_val(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional double double_val = 6;
  bool has_double_val() const;
  private:
  bool _internal_has_double_val() const;
  public:
  void clear_double_val();
  double double_val() const;
  void set_double_val(double value);
  private:
  double _internal_double_val() const;
  void _internal_set_double_val(double value);
  public:

  // optional float float_val = 5;
  bool has_float_val() const;
  private:
  bool _internal_has_float_val() const;
  public:
  void clear_float_val();
  float float_val() const;
  void set_float_val(float value);
  private:
  float _internal_float_val() const;
  void _internal_set_float_val(float value);
  public:

  // @@protoc_insertion_point(class_scope:mindspore.irpb.ValueProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > bool_vals_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > int_vals_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > uint_vals_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > float_vals_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > double_vals_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> str_vals_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mindspore::irpb::TensorProto > tensor_vals_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mindspore::irpb::GraphProto > graphs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mindspore::irpb::ValueProto > values_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mindspore::irpb::NamedValueProto > dict_val_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str_val_;
  ::mindspore::irpb::TensorProto* tensor_val_;
  ::mindspore::irpb::GraphProto* graph_;
  ::mindspore::irpb::TypeProto* type_val_;
  int dtype_;
  bool bool_val_;
  ::PROTOBUF_NAMESPACE_ID::int64 int_val_;
  ::PROTOBUF_NAMESPACE_ID::uint64 uint_val_;
  double double_val_;
  float float_val_;
  friend struct ::TableStruct_mindspore_5fanf_5fir_2eproto;
};
// -------------------------------------------------------------------

class AttributeProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mindspore.irpb.AttributeProto) */ {
 public:
  inline AttributeProto() : AttributeProto(nullptr) {}
  virtual ~AttributeProto();

  AttributeProto(const AttributeProto& from);
  AttributeProto(AttributeProto&& from) noexcept
    : AttributeProto() {
    *this = ::std::move(from);
  }

  inline AttributeProto& operator=(const AttributeProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline AttributeProto& operator=(AttributeProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AttributeProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AttributeProto* internal_default_instance() {
    return reinterpret_cast<const AttributeProto*>(
               &_AttributeProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AttributeProto& a, AttributeProto& b) {
    a.Swap(&b);
  }
  inline void Swap(AttributeProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AttributeProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AttributeProto* New() const final {
    return CreateMaybeMessage<AttributeProto>(nullptr);
  }

  AttributeProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AttributeProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AttributeProto& from);
  void MergeFrom(const AttributeProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AttributeProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mindspore.irpb.AttributeProto";
  }
  protected:
  explicit AttributeProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mindspore_5fanf_5fir_2eproto);
    return ::descriptor_table_mindspore_5fanf_5fir_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional .mindspore.irpb.ValueProto value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::mindspore::irpb::ValueProto& value() const;
  ::mindspore::irpb::ValueProto* release_value();
  ::mindspore::irpb::ValueProto* mutable_value();
  void set_allocated_value(::mindspore::irpb::ValueProto* value);
  private:
  const ::mindspore::irpb::ValueProto& _internal_value() const;
  ::mindspore::irpb::ValueProto* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::mindspore::irpb::ValueProto* value);
  ::mindspore::irpb::ValueProto* unsafe_arena_release_value();

  // @@protoc_insertion_point(class_scope:mindspore.irpb.AttributeProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::mindspore::irpb::ValueProto* value_;
  friend struct ::TableStruct_mindspore_5fanf_5fir_2eproto;
};
// -------------------------------------------------------------------

class NamedValueProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mindspore.irpb.NamedValueProto) */ {
 public:
  inline NamedValueProto() : NamedValueProto(nullptr) {}
  virtual ~NamedValueProto();

  NamedValueProto(const NamedValueProto& from);
  NamedValueProto(NamedValueProto&& from) noexcept
    : NamedValueProto() {
    *this = ::std::move(from);
  }

  inline NamedValueProto& operator=(const NamedValueProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline NamedValueProto& operator=(NamedValueProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NamedValueProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NamedValueProto* internal_default_instance() {
    return reinterpret_cast<const NamedValueProto*>(
               &_NamedValueProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(NamedValueProto& a, NamedValueProto& b) {
    a.Swap(&b);
  }
  inline void Swap(NamedValueProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NamedValueProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NamedValueProto* New() const final {
    return CreateMaybeMessage<NamedValueProto>(nullptr);
  }

  NamedValueProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NamedValueProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NamedValueProto& from);
  void MergeFrom(const NamedValueProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NamedValueProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mindspore.irpb.NamedValueProto";
  }
  protected:
  explicit NamedValueProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mindspore_5fanf_5fir_2eproto);
    return ::descriptor_table_mindspore_5fanf_5fir_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // optional string key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // optional .mindspore.irpb.ValueProto value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::mindspore::irpb::ValueProto& value() const;
  ::mindspore::irpb::ValueProto* release_value();
  ::mindspore::irpb::ValueProto* mutable_value();
  void set_allocated_value(::mindspore::irpb::ValueProto* value);
  private:
  const ::mindspore::irpb::ValueProto& _internal_value() const;
  ::mindspore::irpb::ValueProto* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::mindspore::irpb::ValueProto* value);
  ::mindspore::irpb::ValueProto* unsafe_arena_release_value();

  // @@protoc_insertion_point(class_scope:mindspore.irpb.NamedValueProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::mindspore::irpb::ValueProto* value_;
  friend struct ::TableStruct_mindspore_5fanf_5fir_2eproto;
};
// -------------------------------------------------------------------

class TensorShapeProto_Dimension PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mindspore.irpb.TensorShapeProto.Dimension) */ {
 public:
  inline TensorShapeProto_Dimension() : TensorShapeProto_Dimension(nullptr) {}
  virtual ~TensorShapeProto_Dimension();

  TensorShapeProto_Dimension(const TensorShapeProto_Dimension& from);
  TensorShapeProto_Dimension(TensorShapeProto_Dimension&& from) noexcept
    : TensorShapeProto_Dimension() {
    *this = ::std::move(from);
  }

  inline TensorShapeProto_Dimension& operator=(const TensorShapeProto_Dimension& from) {
    CopyFrom(from);
    return *this;
  }
  inline TensorShapeProto_Dimension& operator=(TensorShapeProto_Dimension&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TensorShapeProto_Dimension& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TensorShapeProto_Dimension* internal_default_instance() {
    return reinterpret_cast<const TensorShapeProto_Dimension*>(
               &_TensorShapeProto_Dimension_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TensorShapeProto_Dimension& a, TensorShapeProto_Dimension& b) {
    a.Swap(&b);
  }
  inline void Swap(TensorShapeProto_Dimension* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TensorShapeProto_Dimension* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TensorShapeProto_Dimension* New() const final {
    return CreateMaybeMessage<TensorShapeProto_Dimension>(nullptr);
  }

  TensorShapeProto_Dimension* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TensorShapeProto_Dimension>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TensorShapeProto_Dimension& from);
  void MergeFrom(const TensorShapeProto_Dimension& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TensorShapeProto_Dimension* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mindspore.irpb.TensorShapeProto.Dimension";
  }
  protected:
  explicit TensorShapeProto_Dimension(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mindspore_5fanf_5fir_2eproto);
    return ::descriptor_table_mindspore_5fanf_5fir_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kSizeFieldNumber = 1,
  };
  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional int64 size = 1;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:mindspore.irpb.TensorShapeProto.Dimension)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int64 size_;
  friend struct ::TableStruct_mindspore_5fanf_5fir_2eproto;
};
// -------------------------------------------------------------------

class TensorShapeProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mindspore.irpb.TensorShapeProto) */ {
 public:
  inline TensorShapeProto() : TensorShapeProto(nullptr) {}
  virtual ~TensorShapeProto();

  TensorShapeProto(const TensorShapeProto& from);
  TensorShapeProto(TensorShapeProto&& from) noexcept
    : TensorShapeProto() {
    *this = ::std::move(from);
  }

  inline TensorShapeProto& operator=(const TensorShapeProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline TensorShapeProto& operator=(TensorShapeProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TensorShapeProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TensorShapeProto* internal_default_instance() {
    return reinterpret_cast<const TensorShapeProto*>(
               &_TensorShapeProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TensorShapeProto& a, TensorShapeProto& b) {
    a.Swap(&b);
  }
  inline void Swap(TensorShapeProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TensorShapeProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TensorShapeProto* New() const final {
    return CreateMaybeMessage<TensorShapeProto>(nullptr);
  }

  TensorShapeProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TensorShapeProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TensorShapeProto& from);
  void MergeFrom(const TensorShapeProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TensorShapeProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mindspore.irpb.TensorShapeProto";
  }
  protected:
  explicit TensorShapeProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mindspore_5fanf_5fir_2eproto);
    return ::descriptor_table_mindspore_5fanf_5fir_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TensorShapeProto_Dimension Dimension;

  // accessors -------------------------------------------------------

  enum : int {
    kDimFieldNumber = 1,
  };
  // repeated .mindspore.irpb.TensorShapeProto.Dimension dim = 1;
  int dim_size() const;
  private:
  int _internal_dim_size() const;
  public:
  void clear_dim();
  ::mindspore::irpb::TensorShapeProto_Dimension* mutable_dim(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mindspore::irpb::TensorShapeProto_Dimension >*
      mutable_dim();
  private:
  const ::mindspore::irpb::TensorShapeProto_Dimension& _internal_dim(int index) const;
  ::mindspore::irpb::TensorShapeProto_Dimension* _internal_add_dim();
  public:
  const ::mindspore::irpb::TensorShapeProto_Dimension& dim(int index) const;
  ::mindspore::irpb::TensorShapeProto_Dimension* add_dim();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mindspore::irpb::TensorShapeProto_Dimension >&
      dim() const;

  // @@protoc_insertion_point(class_scope:mindspore.irpb.TensorShapeProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mindspore::irpb::TensorShapeProto_Dimension > dim_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mindspore_5fanf_5fir_2eproto;
};
// -------------------------------------------------------------------

class TypeProto_Tensor PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mindspore.irpb.TypeProto.Tensor) */ {
 public:
  inline TypeProto_Tensor() : TypeProto_Tensor(nullptr) {}
  virtual ~TypeProto_Tensor();

  TypeProto_Tensor(const TypeProto_Tensor& from);
  TypeProto_Tensor(TypeProto_Tensor&& from) noexcept
    : TypeProto_Tensor() {
    *this = ::std::move(from);
  }

  inline TypeProto_Tensor& operator=(const TypeProto_Tensor& from) {
    CopyFrom(from);
    return *this;
  }
  inline TypeProto_Tensor& operator=(TypeProto_Tensor&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TypeProto_Tensor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TypeProto_Tensor* internal_default_instance() {
    return reinterpret_cast<const TypeProto_Tensor*>(
               &_TypeProto_Tensor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TypeProto_Tensor& a, TypeProto_Tensor& b) {
    a.Swap(&b);
  }
  inline void Swap(TypeProto_Tensor* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TypeProto_Tensor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TypeProto_Tensor* New() const final {
    return CreateMaybeMessage<TypeProto_Tensor>(nullptr);
  }

  TypeProto_Tensor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TypeProto_Tensor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TypeProto_Tensor& from);
  void MergeFrom(const TypeProto_Tensor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TypeProto_Tensor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mindspore.irpb.TypeProto.Tensor";
  }
  protected:
  explicit TypeProto_Tensor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mindspore_5fanf_5fir_2eproto);
    return ::descriptor_table_mindspore_5fanf_5fir_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShapeFieldNumber = 2,
    kElemTypeFieldNumber = 1,
  };
  // optional .mindspore.irpb.TensorShapeProto shape = 2;
  bool has_shape() const;
  private:
  bool _internal_has_shape() const;
  public:
  void clear_shape();
  const ::mindspore::irpb::TensorShapeProto& shape() const;
  ::mindspore::irpb::TensorShapeProto* release_shape();
  ::mindspore::irpb::TensorShapeProto* mutable_shape();
  void set_allocated_shape(::mindspore::irpb::TensorShapeProto* shape);
  private:
  const ::mindspore::irpb::TensorShapeProto& _internal_shape() const;
  ::mindspore::irpb::TensorShapeProto* _internal_mutable_shape();
  public:
  void unsafe_arena_set_allocated_shape(
      ::mindspore::irpb::TensorShapeProto* shape);
  ::mindspore::irpb::TensorShapeProto* unsafe_arena_release_shape();

  // optional .mindspore.irpb.DataType elem_type = 1;
  bool has_elem_type() const;
  private:
  bool _internal_has_elem_type() const;
  public:
  void clear_elem_type();
  ::mindspore::irpb::DataType elem_type() const;
  void set_elem_type(::mindspore::irpb::DataType value);
  private:
  ::mindspore::irpb::DataType _internal_elem_type() const;
  void _internal_set_elem_type(::mindspore::irpb::DataType value);
  public:

  // @@protoc_insertion_point(class_scope:mindspore.irpb.TypeProto.Tensor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::mindspore::irpb::TensorShapeProto* shape_;
  int elem_type_;
  friend struct ::TableStruct_mindspore_5fanf_5fir_2eproto;
};
// -------------------------------------------------------------------

class TypeProto_Sequence PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mindspore.irpb.TypeProto.Sequence) */ {
 public:
  inline TypeProto_Sequence() : TypeProto_Sequence(nullptr) {}
  virtual ~TypeProto_Sequence();

  TypeProto_Sequence(const TypeProto_Sequence& from);
  TypeProto_Sequence(TypeProto_Sequence&& from) noexcept
    : TypeProto_Sequence() {
    *this = ::std::move(from);
  }

  inline TypeProto_Sequence& operator=(const TypeProto_Sequence& from) {
    CopyFrom(from);
    return *this;
  }
  inline TypeProto_Sequence& operator=(TypeProto_Sequence&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TypeProto_Sequence& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TypeProto_Sequence* internal_default_instance() {
    return reinterpret_cast<const TypeProto_Sequence*>(
               &_TypeProto_Sequence_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(TypeProto_Sequence& a, TypeProto_Sequence& b) {
    a.Swap(&b);
  }
  inline void Swap(TypeProto_Sequence* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TypeProto_Sequence* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TypeProto_Sequence* New() const final {
    return CreateMaybeMessage<TypeProto_Sequence>(nullptr);
  }

  TypeProto_Sequence* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TypeProto_Sequence>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TypeProto_Sequence& from);
  void MergeFrom(const TypeProto_Sequence& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TypeProto_Sequence* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mindspore.irpb.TypeProto.Sequence";
  }
  protected:
  explicit TypeProto_Sequence(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mindspore_5fanf_5fir_2eproto);
    return ::descriptor_table_mindspore_5fanf_5fir_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kElemTypesFieldNumber = 1,
  };
  // repeated .mindspore.irpb.TypeProto elem_types = 1;
  int elem_types_size() const;
  private:
  int _internal_elem_types_size() const;
  public:
  void clear_elem_types();
  ::mindspore::irpb::TypeProto* mutable_elem_types(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mindspore::irpb::TypeProto >*
      mutable_elem_types();
  private:
  const ::mindspore::irpb::TypeProto& _internal_elem_types(int index) const;
  ::mindspore::irpb::TypeProto* _internal_add_elem_types();
  public:
  const ::mindspore::irpb::TypeProto& elem_types(int index) const;
  ::mindspore::irpb::TypeProto* add_elem_types();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mindspore::irpb::TypeProto >&
      elem_types() const;

  // @@protoc_insertion_point(class_scope:mindspore.irpb.TypeProto.Sequence)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mindspore::irpb::TypeProto > elem_types_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mindspore_5fanf_5fir_2eproto;
};
// -------------------------------------------------------------------

class TypeProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mindspore.irpb.TypeProto) */ {
 public:
  inline TypeProto() : TypeProto(nullptr) {}
  virtual ~TypeProto();

  TypeProto(const TypeProto& from);
  TypeProto(TypeProto&& from) noexcept
    : TypeProto() {
    *this = ::std::move(from);
  }

  inline TypeProto& operator=(const TypeProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline TypeProto& operator=(TypeProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TypeProto& default_instance();

  enum ValueCase {
    kTensorType = 2,
    kSequenceType = 3,
    VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TypeProto* internal_default_instance() {
    return reinterpret_cast<const TypeProto*>(
               &_TypeProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(TypeProto& a, TypeProto& b) {
    a.Swap(&b);
  }
  inline void Swap(TypeProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TypeProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TypeProto* New() const final {
    return CreateMaybeMessage<TypeProto>(nullptr);
  }

  TypeProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TypeProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TypeProto& from);
  void MergeFrom(const TypeProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TypeProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mindspore.irpb.TypeProto";
  }
  protected:
  explicit TypeProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mindspore_5fanf_5fir_2eproto);
    return ::descriptor_table_mindspore_5fanf_5fir_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TypeProto_Tensor Tensor;
  typedef TypeProto_Sequence Sequence;

  // accessors -------------------------------------------------------

  enum : int {
    kDataTypeFieldNumber = 1,
    kTensorTypeFieldNumber = 2,
    kSequenceTypeFieldNumber = 3,
  };
  // optional .mindspore.irpb.DataType data_type = 1;
  bool has_data_type() const;
  private:
  bool _internal_has_data_type() const;
  public:
  void clear_data_type();
  ::mindspore::irpb::DataType data_type() const;
  void set_data_type(::mindspore::irpb::DataType value);
  private:
  ::mindspore::irpb::DataType _internal_data_type() const;
  void _internal_set_data_type(::mindspore::irpb::DataType value);
  public:

  // .mindspore.irpb.TypeProto.Tensor tensor_type = 2;
  bool has_tensor_type() const;
  private:
  bool _internal_has_tensor_type() const;
  public:
  void clear_tensor_type();
  const ::mindspore::irpb::TypeProto_Tensor& tensor_type() const;
  ::mindspore::irpb::TypeProto_Tensor* release_tensor_type();
  ::mindspore::irpb::TypeProto_Tensor* mutable_tensor_type();
  void set_allocated_tensor_type(::mindspore::irpb::TypeProto_Tensor* tensor_type);
  private:
  const ::mindspore::irpb::TypeProto_Tensor& _internal_tensor_type() const;
  ::mindspore::irpb::TypeProto_Tensor* _internal_mutable_tensor_type();
  public:
  void unsafe_arena_set_allocated_tensor_type(
      ::mindspore::irpb::TypeProto_Tensor* tensor_type);
  ::mindspore::irpb::TypeProto_Tensor* unsafe_arena_release_tensor_type();

  // .mindspore.irpb.TypeProto.Sequence sequence_type = 3;
  bool has_sequence_type() const;
  private:
  bool _internal_has_sequence_type() const;
  public:
  void clear_sequence_type();
  const ::mindspore::irpb::TypeProto_Sequence& sequence_type() const;
  ::mindspore::irpb::TypeProto_Sequence* release_sequence_type();
  ::mindspore::irpb::TypeProto_Sequence* mutable_sequence_type();
  void set_allocated_sequence_type(::mindspore::irpb::TypeProto_Sequence* sequence_type);
  private:
  const ::mindspore::irpb::TypeProto_Sequence& _internal_sequence_type() const;
  ::mindspore::irpb::TypeProto_Sequence* _internal_mutable_sequence_type();
  public:
  void unsafe_arena_set_allocated_sequence_type(
      ::mindspore::irpb::TypeProto_Sequence* sequence_type);
  ::mindspore::irpb::TypeProto_Sequence* unsafe_arena_release_sequence_type();

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:mindspore.irpb.TypeProto)
 private:
  class _Internal;
  void set_has_tensor_type();
  void set_has_sequence_type();

  inline bool has_value() const;
  inline void clear_has_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int data_type_;
  union ValueUnion {
    ValueUnion() {}
    ::mindspore::irpb::TypeProto_Tensor* tensor_type_;
    ::mindspore::irpb::TypeProto_Sequence* sequence_type_;
  } value_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_mindspore_5fanf_5fir_2eproto;
};
// -------------------------------------------------------------------

class ParameterProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mindspore.irpb.ParameterProto) */ {
 public:
  inline ParameterProto() : ParameterProto(nullptr) {}
  virtual ~ParameterProto();

  ParameterProto(const ParameterProto& from);
  ParameterProto(ParameterProto&& from) noexcept
    : ParameterProto() {
    *this = ::std::move(from);
  }

  inline ParameterProto& operator=(const ParameterProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ParameterProto& operator=(ParameterProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ParameterProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ParameterProto* internal_default_instance() {
    return reinterpret_cast<const ParameterProto*>(
               &_ParameterProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ParameterProto& a, ParameterProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ParameterProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ParameterProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ParameterProto* New() const final {
    return CreateMaybeMessage<ParameterProto>(nullptr);
  }

  ParameterProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ParameterProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ParameterProto& from);
  void MergeFrom(const ParameterProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParameterProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mindspore.irpb.ParameterProto";
  }
  protected:
  explicit ParameterProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mindspore_5fanf_5fir_2eproto);
    return ::descriptor_table_mindspore_5fanf_5fir_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kTypeFieldNumber = 2,
    kDefaultValFieldNumber = 3,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional .mindspore.irpb.TypeProto type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const ::mindspore::irpb::TypeProto& type() const;
  ::mindspore::irpb::TypeProto* release_type();
  ::mindspore::irpb::TypeProto* mutable_type();
  void set_allocated_type(::mindspore::irpb::TypeProto* type);
  private:
  const ::mindspore::irpb::TypeProto& _internal_type() const;
  ::mindspore::irpb::TypeProto* _internal_mutable_type();
  public:
  void unsafe_arena_set_allocated_type(
      ::mindspore::irpb::TypeProto* type);
  ::mindspore::irpb::TypeProto* unsafe_arena_release_type();

  // optional .mindspore.irpb.ValueProto default_val = 3;
  bool has_default_val() const;
  private:
  bool _internal_has_default_val() const;
  public:
  void clear_default_val();
  const ::mindspore::irpb::ValueProto& default_val() const;
  ::mindspore::irpb::ValueProto* release_default_val();
  ::mindspore::irpb::ValueProto* mutable_default_val();
  void set_allocated_default_val(::mindspore::irpb::ValueProto* default_val);
  private:
  const ::mindspore::irpb::ValueProto& _internal_default_val() const;
  ::mindspore::irpb::ValueProto* _internal_mutable_default_val();
  public:
  void unsafe_arena_set_allocated_default_val(
      ::mindspore::irpb::ValueProto* default_val);
  ::mindspore::irpb::ValueProto* unsafe_arena_release_default_val();

  // @@protoc_insertion_point(class_scope:mindspore.irpb.ParameterProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::mindspore::irpb::TypeProto* type_;
  ::mindspore::irpb::ValueProto* default_val_;
  friend struct ::TableStruct_mindspore_5fanf_5fir_2eproto;
};
// -------------------------------------------------------------------

class OutputProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mindspore.irpb.OutputProto) */ {
 public:
  inline OutputProto() : OutputProto(nullptr) {}
  virtual ~OutputProto();

  OutputProto(const OutputProto& from);
  OutputProto(OutputProto&& from) noexcept
    : OutputProto() {
    *this = ::std::move(from);
  }

  inline OutputProto& operator=(const OutputProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline OutputProto& operator=(OutputProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OutputProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OutputProto* internal_default_instance() {
    return reinterpret_cast<const OutputProto*>(
               &_OutputProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(OutputProto& a, OutputProto& b) {
    a.Swap(&b);
  }
  inline void Swap(OutputProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OutputProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OutputProto* New() const final {
    return CreateMaybeMessage<OutputProto>(nullptr);
  }

  OutputProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OutputProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OutputProto& from);
  void MergeFrom(const OutputProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OutputProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mindspore.irpb.OutputProto";
  }
  protected:
  explicit OutputProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mindspore_5fanf_5fir_2eproto);
    return ::descriptor_table_mindspore_5fanf_5fir_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional .mindspore.irpb.TypeProto type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const ::mindspore::irpb::TypeProto& type() const;
  ::mindspore::irpb::TypeProto* release_type();
  ::mindspore::irpb::TypeProto* mutable_type();
  void set_allocated_type(::mindspore::irpb::TypeProto* type);
  private:
  const ::mindspore::irpb::TypeProto& _internal_type() const;
  ::mindspore::irpb::TypeProto* _internal_mutable_type();
  public:
  void unsafe_arena_set_allocated_type(
      ::mindspore::irpb::TypeProto* type);
  ::mindspore::irpb::TypeProto* unsafe_arena_release_type();

  // @@protoc_insertion_point(class_scope:mindspore.irpb.OutputProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::mindspore::irpb::TypeProto* type_;
  friend struct ::TableStruct_mindspore_5fanf_5fir_2eproto;
};
// -------------------------------------------------------------------

class InputProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mindspore.irpb.InputProto) */ {
 public:
  inline InputProto() : InputProto(nullptr) {}
  virtual ~InputProto();

  InputProto(const InputProto& from);
  InputProto(InputProto&& from) noexcept
    : InputProto() {
    *this = ::std::move(from);
  }

  inline InputProto& operator=(const InputProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline InputProto& operator=(InputProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InputProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InputProto* internal_default_instance() {
    return reinterpret_cast<const InputProto*>(
               &_InputProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(InputProto& a, InputProto& b) {
    a.Swap(&b);
  }
  inline void Swap(InputProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InputProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InputProto* New() const final {
    return CreateMaybeMessage<InputProto>(nullptr);
  }

  InputProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InputProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InputProto& from);
  void MergeFrom(const InputProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InputProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mindspore.irpb.InputProto";
  }
  protected:
  explicit InputProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mindspore_5fanf_5fir_2eproto);
    return ::descriptor_table_mindspore_5fanf_5fir_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef InputProto_EdgeType EdgeType;
  static constexpr EdgeType DATA_EDGE =
    InputProto_EdgeType_DATA_EDGE;
  static constexpr EdgeType CONTROL_EDGE =
    InputProto_EdgeType_CONTROL_EDGE;
  static inline bool EdgeType_IsValid(int value) {
    return InputProto_EdgeType_IsValid(value);
  }
  static constexpr EdgeType EdgeType_MIN =
    InputProto_EdgeType_EdgeType_MIN;
  static constexpr EdgeType EdgeType_MAX =
    InputProto_EdgeType_EdgeType_MAX;
  static constexpr int EdgeType_ARRAYSIZE =
    InputProto_EdgeType_EdgeType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EdgeType_descriptor() {
    return InputProto_EdgeType_descriptor();
  }
  template<typename T>
  static inline const std::string& EdgeType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EdgeType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EdgeType_Name.");
    return InputProto_EdgeType_Name(enum_t_value);
  }
  static inline bool EdgeType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EdgeType* value) {
    return InputProto_EdgeType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional .mindspore.irpb.InputProto.EdgeType type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::mindspore::irpb::InputProto_EdgeType type() const;
  void set_type(::mindspore::irpb::InputProto_EdgeType value);
  private:
  ::mindspore::irpb::InputProto_EdgeType _internal_type() const;
  void _internal_set_type(::mindspore::irpb::InputProto_EdgeType value);
  public:

  // @@protoc_insertion_point(class_scope:mindspore.irpb.InputProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int type_;
  friend struct ::TableStruct_mindspore_5fanf_5fir_2eproto;
};
// -------------------------------------------------------------------

class NodeProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mindspore.irpb.NodeProto) */ {
 public:
  inline NodeProto() : NodeProto(nullptr) {}
  virtual ~NodeProto();

  NodeProto(const NodeProto& from);
  NodeProto(NodeProto&& from) noexcept
    : NodeProto() {
    *this = ::std::move(from);
  }

  inline NodeProto& operator=(const NodeProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeProto& operator=(NodeProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NodeProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeProto* internal_default_instance() {
    return reinterpret_cast<const NodeProto*>(
               &_NodeProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(NodeProto& a, NodeProto& b) {
    a.Swap(&b);
  }
  inline void Swap(NodeProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NodeProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NodeProto* New() const final {
    return CreateMaybeMessage<NodeProto>(nullptr);
  }

  NodeProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NodeProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NodeProto& from);
  void MergeFrom(const NodeProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mindspore.irpb.NodeProto";
  }
  protected:
  explicit NodeProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mindspore_5fanf_5fir_2eproto);
    return ::descriptor_table_mindspore_5fanf_5fir_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputFieldNumber = 1,
    kAttributeFieldNumber = 5,
    kNameFieldNumber = 2,
    kOpTypeFieldNumber = 3,
    kScopeFieldNumber = 4,
    kFullNameFieldNumber = 8,
    kInstanceNameFieldNumber = 10,
    kOutputTypeFieldNumber = 6,
    kOutputIFieldNumber = 7,
  };
  // repeated .mindspore.irpb.InputProto input = 1;
  int input_size() const;
  private:
  int _internal_input_size() const;
  public:
  void clear_input();
  ::mindspore::irpb::InputProto* mutable_input(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mindspore::irpb::InputProto >*
      mutable_input();
  private:
  const ::mindspore::irpb::InputProto& _internal_input(int index) const;
  ::mindspore::irpb::InputProto* _internal_add_input();
  public:
  const ::mindspore::irpb::InputProto& input(int index) const;
  ::mindspore::irpb::InputProto* add_input();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mindspore::irpb::InputProto >&
      input() const;

  // repeated .mindspore.irpb.AttributeProto attribute = 5;
  int attribute_size() const;
  private:
  int _internal_attribute_size() const;
  public:
  void clear_attribute();
  ::mindspore::irpb::AttributeProto* mutable_attribute(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mindspore::irpb::AttributeProto >*
      mutable_attribute();
  private:
  const ::mindspore::irpb::AttributeProto& _internal_attribute(int index) const;
  ::mindspore::irpb::AttributeProto* _internal_add_attribute();
  public:
  const ::mindspore::irpb::AttributeProto& attribute(int index) const;
  ::mindspore::irpb::AttributeProto* add_attribute();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mindspore::irpb::AttributeProto >&
      attribute() const;

  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string op_type = 3;
  bool has_op_type() const;
  private:
  bool _internal_has_op_type() const;
  public:
  void clear_op_type();
  const std::string& op_type() const;
  void set_op_type(const std::string& value);
  void set_op_type(std::string&& value);
  void set_op_type(const char* value);
  void set_op_type(const char* value, size_t size);
  std::string* mutable_op_type();
  std::string* release_op_type();
  void set_allocated_op_type(std::string* op_type);
  private:
  const std::string& _internal_op_type() const;
  void _internal_set_op_type(const std::string& value);
  std::string* _internal_mutable_op_type();
  public:

  // optional string scope = 4;
  bool has_scope() const;
  private:
  bool _internal_has_scope() const;
  public:
  void clear_scope();
  const std::string& scope() const;
  void set_scope(const std::string& value);
  void set_scope(std::string&& value);
  void set_scope(const char* value);
  void set_scope(const char* value, size_t size);
  std::string* mutable_scope();
  std::string* release_scope();
  void set_allocated_scope(std::string* scope);
  private:
  const std::string& _internal_scope() const;
  void _internal_set_scope(const std::string& value);
  std::string* _internal_mutable_scope();
  public:

  // optional string full_name = 8;
  bool has_full_name() const;
  private:
  bool _internal_has_full_name() const;
  public:
  void clear_full_name();
  const std::string& full_name() const;
  void set_full_name(const std::string& value);
  void set_full_name(std::string&& value);
  void set_full_name(const char* value);
  void set_full_name(const char* value, size_t size);
  std::string* mutable_full_name();
  std::string* release_full_name();
  void set_allocated_full_name(std::string* full_name);
  private:
  const std::string& _internal_full_name() const;
  void _internal_set_full_name(const std::string& value);
  std::string* _internal_mutable_full_name();
  public:

  // optional string instance_name = 10;
  bool has_instance_name() const;
  private:
  bool _internal_has_instance_name() const;
  public:
  void clear_instance_name();
  const std::string& instance_name() const;
  void set_instance_name(const std::string& value);
  void set_instance_name(std::string&& value);
  void set_instance_name(const char* value);
  void set_instance_name(const char* value, size_t size);
  std::string* mutable_instance_name();
  std::string* release_instance_name();
  void set_allocated_instance_name(std::string* instance_name);
  private:
  const std::string& _internal_instance_name() const;
  void _internal_set_instance_name(const std::string& value);
  std::string* _internal_mutable_instance_name();
  public:

  // optional .mindspore.irpb.TypeProto output_type = 6;
  bool has_output_type() const;
  private:
  bool _internal_has_output_type() const;
  public:
  void clear_output_type();
  const ::mindspore::irpb::TypeProto& output_type() const;
  ::mindspore::irpb::TypeProto* release_output_type();
  ::mindspore::irpb::TypeProto* mutable_output_type();
  void set_allocated_output_type(::mindspore::irpb::TypeProto* output_type);
  private:
  const ::mindspore::irpb::TypeProto& _internal_output_type() const;
  ::mindspore::irpb::TypeProto* _internal_mutable_output_type();
  public:
  void unsafe_arena_set_allocated_output_type(
      ::mindspore::irpb::TypeProto* output_type);
  ::mindspore::irpb::TypeProto* unsafe_arena_release_output_type();

  // optional uint64 output_i = 7;
  bool has_output_i() const;
  private:
  bool _internal_has_output_i() const;
  public:
  void clear_output_i();
  ::PROTOBUF_NAMESPACE_ID::uint64 output_i() const;
  void set_output_i(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_output_i() const;
  void _internal_set_output_i(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:mindspore.irpb.NodeProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mindspore::irpb::InputProto > input_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mindspore::irpb::AttributeProto > attribute_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr op_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scope_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr full_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instance_name_;
  ::mindspore::irpb::TypeProto* output_type_;
  ::PROTOBUF_NAMESPACE_ID::uint64 output_i_;
  friend struct ::TableStruct_mindspore_5fanf_5fir_2eproto;
};
// -------------------------------------------------------------------

class ModelProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mindspore.irpb.ModelProto) */ {
 public:
  inline ModelProto() : ModelProto(nullptr) {}
  virtual ~ModelProto();

  ModelProto(const ModelProto& from);
  ModelProto(ModelProto&& from) noexcept
    : ModelProto() {
    *this = ::std::move(from);
  }

  inline ModelProto& operator=(const ModelProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelProto& operator=(ModelProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ModelProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModelProto* internal_default_instance() {
    return reinterpret_cast<const ModelProto*>(
               &_ModelProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ModelProto& a, ModelProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ModelProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModelProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ModelProto* New() const final {
    return CreateMaybeMessage<ModelProto>(nullptr);
  }

  ModelProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ModelProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ModelProto& from);
  void MergeFrom(const ModelProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModelProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mindspore.irpb.ModelProto";
  }
  protected:
  explicit ModelProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mindspore_5fanf_5fir_2eproto);
    return ::descriptor_table_mindspore_5fanf_5fir_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDomainFieldNumber = 2,
    kGraphFieldNumber = 4,
    kMetadataOperatorsFieldNumber = 5,
    kIrVersionFieldNumber = 1,
    kModelVersionFieldNumber = 3,
  };
  // optional string domain = 2;
  bool has_domain() const;
  private:
  bool _internal_has_domain() const;
  public:
  void clear_domain();
  const std::string& domain() const;
  void set_domain(const std::string& value);
  void set_domain(std::string&& value);
  void set_domain(const char* value);
  void set_domain(const char* value, size_t size);
  std::string* mutable_domain();
  std::string* release_domain();
  void set_allocated_domain(std::string* domain);
  private:
  const std::string& _internal_domain() const;
  void _internal_set_domain(const std::string& value);
  std::string* _internal_mutable_domain();
  public:

  // optional .mindspore.irpb.GraphProto graph = 4;
  bool has_graph() const;
  private:
  bool _internal_has_graph() const;
  public:
  void clear_graph();
  const ::mindspore::irpb::GraphProto& graph() const;
  ::mindspore::irpb::GraphProto* release_graph();
  ::mindspore::irpb::GraphProto* mutable_graph();
  void set_allocated_graph(::mindspore::irpb::GraphProto* graph);
  private:
  const ::mindspore::irpb::GraphProto& _internal_graph() const;
  ::mindspore::irpb::GraphProto* _internal_mutable_graph();
  public:
  void unsafe_arena_set_allocated_graph(
      ::mindspore::irpb::GraphProto* graph);
  ::mindspore::irpb::GraphProto* unsafe_arena_release_graph();

  // optional .mindspore.irpb.OperatorSetProto metadata_operators = 5;
  bool has_metadata_operators() const;
  private:
  bool _internal_has_metadata_operators() const;
  public:
  void clear_metadata_operators();
  const ::mindspore::irpb::OperatorSetProto& metadata_operators() const;
  ::mindspore::irpb::OperatorSetProto* release_metadata_operators();
  ::mindspore::irpb::OperatorSetProto* mutable_metadata_operators();
  void set_allocated_metadata_operators(::mindspore::irpb::OperatorSetProto* metadata_operators);
  private:
  const ::mindspore::irpb::OperatorSetProto& _internal_metadata_operators() const;
  ::mindspore::irpb::OperatorSetProto* _internal_mutable_metadata_operators();
  public:
  void unsafe_arena_set_allocated_metadata_operators(
      ::mindspore::irpb::OperatorSetProto* metadata_operators);
  ::mindspore::irpb::OperatorSetProto* unsafe_arena_release_metadata_operators();

  // optional int64 ir_version = 1;
  bool has_ir_version() const;
  private:
  bool _internal_has_ir_version() const;
  public:
  void clear_ir_version();
  ::PROTOBUF_NAMESPACE_ID::int64 ir_version() const;
  void set_ir_version(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_ir_version() const;
  void _internal_set_ir_version(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 model_version = 3;
  bool has_model_version() const;
  private:
  bool _internal_has_model_version() const;
  public:
  void clear_model_version();
  ::PROTOBUF_NAMESPACE_ID::int64 model_version() const;
  void set_model_version(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_model_version() const;
  void _internal_set_model_version(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:mindspore.irpb.ModelProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr domain_;
  ::mindspore::irpb::GraphProto* graph_;
  ::mindspore::irpb::OperatorSetProto* metadata_operators_;
  ::PROTOBUF_NAMESPACE_ID::int64 ir_version_;
  ::PROTOBUF_NAMESPACE_ID::int64 model_version_;
  friend struct ::TableStruct_mindspore_5fanf_5fir_2eproto;
};
// -------------------------------------------------------------------

class OperatorProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mindspore.irpb.OperatorProto) */ {
 public:
  inline OperatorProto() : OperatorProto(nullptr) {}
  virtual ~OperatorProto();

  OperatorProto(const OperatorProto& from);
  OperatorProto(OperatorProto&& from) noexcept
    : OperatorProto() {
    *this = ::std::move(from);
  }

  inline OperatorProto& operator=(const OperatorProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline OperatorProto& operator=(OperatorProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OperatorProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OperatorProto* internal_default_instance() {
    return reinterpret_cast<const OperatorProto*>(
               &_OperatorProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(OperatorProto& a, OperatorProto& b) {
    a.Swap(&b);
  }
  inline void Swap(OperatorProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OperatorProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OperatorProto* New() const final {
    return CreateMaybeMessage<OperatorProto>(nullptr);
  }

  OperatorProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OperatorProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OperatorProto& from);
  void MergeFrom(const OperatorProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OperatorProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mindspore.irpb.OperatorProto";
  }
  protected:
  explicit OperatorProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mindspore_5fanf_5fir_2eproto);
    return ::descriptor_table_mindspore_5fanf_5fir_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kConfigFieldNumber = 2,
    kObjInfoFieldNumber = 3,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional bytes config = 2;
  bool has_config() const;
  private:
  bool _internal_has_config() const;
  public:
  void clear_config();
  const std::string& config() const;
  void set_config(const std::string& value);
  void set_config(std::string&& value);
  void set_config(const char* value);
  void set_config(const void* value, size_t size);
  std::string* mutable_config();
  std::string* release_config();
  void set_allocated_config(std::string* config);
  private:
  const std::string& _internal_config() const;
  void _internal_set_config(const std::string& value);
  std::string* _internal_mutable_config();
  public:

  // optional bytes obj_info = 3;
  bool has_obj_info() const;
  private:
  bool _internal_has_obj_info() const;
  public:
  void clear_obj_info();
  const std::string& obj_info() const;
  void set_obj_info(const std::string& value);
  void set_obj_info(std::string&& value);
  void set_obj_info(const char* value);
  void set_obj_info(const void* value, size_t size);
  std::string* mutable_obj_info();
  std::string* release_obj_info();
  void set_allocated_obj_info(std::string* obj_info);
  private:
  const std::string& _internal_obj_info() const;
  void _internal_set_obj_info(const std::string& value);
  std::string* _internal_mutable_obj_info();
  public:

  // @@protoc_insertion_point(class_scope:mindspore.irpb.OperatorProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr config_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr obj_info_;
  friend struct ::TableStruct_mindspore_5fanf_5fir_2eproto;
};
// -------------------------------------------------------------------

class OperatorSetProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mindspore.irpb.OperatorSetProto) */ {
 public:
  inline OperatorSetProto() : OperatorSetProto(nullptr) {}
  virtual ~OperatorSetProto();

  OperatorSetProto(const OperatorSetProto& from);
  OperatorSetProto(OperatorSetProto&& from) noexcept
    : OperatorSetProto() {
    *this = ::std::move(from);
  }

  inline OperatorSetProto& operator=(const OperatorSetProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline OperatorSetProto& operator=(OperatorSetProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OperatorSetProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OperatorSetProto* internal_default_instance() {
    return reinterpret_cast<const OperatorSetProto*>(
               &_OperatorSetProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(OperatorSetProto& a, OperatorSetProto& b) {
    a.Swap(&b);
  }
  inline void Swap(OperatorSetProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OperatorSetProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OperatorSetProto* New() const final {
    return CreateMaybeMessage<OperatorSetProto>(nullptr);
  }

  OperatorSetProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OperatorSetProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OperatorSetProto& from);
  void MergeFrom(const OperatorSetProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OperatorSetProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mindspore.irpb.OperatorSetProto";
  }
  protected:
  explicit OperatorSetProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mindspore_5fanf_5fir_2eproto);
    return ::descriptor_table_mindspore_5fanf_5fir_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOperatorsFieldNumber = 1,
    kSummaryFieldNumber = 2,
  };
  // repeated .mindspore.irpb.OperatorProto operators = 1;
  int operators_size() const;
  private:
  int _internal_operators_size() const;
  public:
  void clear_operators();
  ::mindspore::irpb::OperatorProto* mutable_operators(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mindspore::irpb::OperatorProto >*
      mutable_operators();
  private:
  const ::mindspore::irpb::OperatorProto& _internal_operators(int index) const;
  ::mindspore::irpb::OperatorProto* _internal_add_operators();
  public:
  const ::mindspore::irpb::OperatorProto& operators(int index) const;
  ::mindspore::irpb::OperatorProto* add_operators();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mindspore::irpb::OperatorProto >&
      operators() const;

  // optional string summary = 2;
  bool has_summary() const;
  private:
  bool _internal_has_summary() const;
  public:
  void clear_summary();
  const std::string& summary() const;
  void set_summary(const std::string& value);
  void set_summary(std::string&& value);
  void set_summary(const char* value);
  void set_summary(const char* value, size_t size);
  std::string* mutable_summary();
  std::string* release_summary();
  void set_allocated_summary(std::string* summary);
  private:
  const std::string& _internal_summary() const;
  void _internal_set_summary(const std::string& value);
  std::string* _internal_mutable_summary();
  public:

  // @@protoc_insertion_point(class_scope:mindspore.irpb.OperatorSetProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mindspore::irpb::OperatorProto > operators_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr summary_;
  friend struct ::TableStruct_mindspore_5fanf_5fir_2eproto;
};
// -------------------------------------------------------------------

class GraphProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mindspore.irpb.GraphProto) */ {
 public:
  inline GraphProto() : GraphProto(nullptr) {}
  virtual ~GraphProto();

  GraphProto(const GraphProto& from);
  GraphProto(GraphProto&& from) noexcept
    : GraphProto() {
    *this = ::std::move(from);
  }

  inline GraphProto& operator=(const GraphProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline GraphProto& operator=(GraphProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GraphProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GraphProto* internal_default_instance() {
    return reinterpret_cast<const GraphProto*>(
               &_GraphProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(GraphProto& a, GraphProto& b) {
    a.Swap(&b);
  }
  inline void Swap(GraphProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GraphProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GraphProto* New() const final {
    return CreateMaybeMessage<GraphProto>(nullptr);
  }

  GraphProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GraphProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GraphProto& from);
  void MergeFrom(const GraphProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GraphProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mindspore.irpb.GraphProto";
  }
  protected:
  explicit GraphProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mindspore_5fanf_5fir_2eproto);
    return ::descriptor_table_mindspore_5fanf_5fir_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeFieldNumber = 1,
    kParametersFieldNumber = 3,
    kOutputsFieldNumber = 4,
    kConstValsFieldNumber = 5,
    kNameFieldNumber = 2,
  };
  // repeated .mindspore.irpb.NodeProto node = 1;
  int node_size() const;
  private:
  int _internal_node_size() const;
  public:
  void clear_node();
  ::mindspore::irpb::NodeProto* mutable_node(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mindspore::irpb::NodeProto >*
      mutable_node();
  private:
  const ::mindspore::irpb::NodeProto& _internal_node(int index) const;
  ::mindspore::irpb::NodeProto* _internal_add_node();
  public:
  const ::mindspore::irpb::NodeProto& node(int index) const;
  ::mindspore::irpb::NodeProto* add_node();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mindspore::irpb::NodeProto >&
      node() const;

  // repeated .mindspore.irpb.ParameterProto parameters = 3;
  int parameters_size() const;
  private:
  int _internal_parameters_size() const;
  public:
  void clear_parameters();
  ::mindspore::irpb::ParameterProto* mutable_parameters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mindspore::irpb::ParameterProto >*
      mutable_parameters();
  private:
  const ::mindspore::irpb::ParameterProto& _internal_parameters(int index) const;
  ::mindspore::irpb::ParameterProto* _internal_add_parameters();
  public:
  const ::mindspore::irpb::ParameterProto& parameters(int index) const;
  ::mindspore::irpb::ParameterProto* add_parameters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mindspore::irpb::ParameterProto >&
      parameters() const;

  // repeated .mindspore.irpb.OutputProto outputs = 4;
  int outputs_size() const;
  private:
  int _internal_outputs_size() const;
  public:
  void clear_outputs();
  ::mindspore::irpb::OutputProto* mutable_outputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mindspore::irpb::OutputProto >*
      mutable_outputs();
  private:
  const ::mindspore::irpb::OutputProto& _internal_outputs(int index) const;
  ::mindspore::irpb::OutputProto* _internal_add_outputs();
  public:
  const ::mindspore::irpb::OutputProto& outputs(int index) const;
  ::mindspore::irpb::OutputProto* add_outputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mindspore::irpb::OutputProto >&
      outputs() const;

  // repeated .mindspore.irpb.NamedValueProto const_vals = 5;
  int const_vals_size() const;
  private:
  int _internal_const_vals_size() const;
  public:
  void clear_const_vals();
  ::mindspore::irpb::NamedValueProto* mutable_const_vals(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mindspore::irpb::NamedValueProto >*
      mutable_const_vals();
  private:
  const ::mindspore::irpb::NamedValueProto& _internal_const_vals(int index) const;
  ::mindspore::irpb::NamedValueProto* _internal_add_const_vals();
  public:
  const ::mindspore::irpb::NamedValueProto& const_vals(int index) const;
  ::mindspore::irpb::NamedValueProto* add_const_vals();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mindspore::irpb::NamedValueProto >&
      const_vals() const;

  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:mindspore.irpb.GraphProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mindspore::irpb::NodeProto > node_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mindspore::irpb::ParameterProto > parameters_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mindspore::irpb::OutputProto > outputs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mindspore::irpb::NamedValueProto > const_vals_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  friend struct ::TableStruct_mindspore_5fanf_5fir_2eproto;
};
// -------------------------------------------------------------------

class TensorProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mindspore.irpb.TensorProto) */ {
 public:
  inline TensorProto() : TensorProto(nullptr) {}
  virtual ~TensorProto();

  TensorProto(const TensorProto& from);
  TensorProto(TensorProto&& from) noexcept
    : TensorProto() {
    *this = ::std::move(from);
  }

  inline TensorProto& operator=(const TensorProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline TensorProto& operator=(TensorProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TensorProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TensorProto* internal_default_instance() {
    return reinterpret_cast<const TensorProto*>(
               &_TensorProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(TensorProto& a, TensorProto& b) {
    a.Swap(&b);
  }
  inline void Swap(TensorProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TensorProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TensorProto* New() const final {
    return CreateMaybeMessage<TensorProto>(nullptr);
  }

  TensorProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TensorProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TensorProto& from);
  void MergeFrom(const TensorProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TensorProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mindspore.irpb.TensorProto";
  }
  protected:
  explicit TensorProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mindspore_5fanf_5fir_2eproto);
    return ::descriptor_table_mindspore_5fanf_5fir_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDimsFieldNumber = 1,
    kFloatDataFieldNumber = 3,
    kInt32DataFieldNumber = 4,
    kInt64DataFieldNumber = 5,
    kDoubleDataFieldNumber = 6,
    kUint64DataFieldNumber = 7,
    kRawDataFieldNumber = 8,
    kDataTypeFieldNumber = 2,
  };
  // repeated int64 dims = 1;
  int dims_size() const;
  private:
  int _internal_dims_size() const;
  public:
  void clear_dims();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_dims(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_dims() const;
  void _internal_add_dims(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_dims();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 dims(int index) const;
  void set_dims(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_dims(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      dims() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_dims();

  // repeated float float_data = 3 [packed = true];
  int float_data_size() const;
  private:
  int _internal_float_data_size() const;
  public:
  void clear_float_data();
  private:
  float _internal_float_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_float_data() const;
  void _internal_add_float_data(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_float_data();
  public:
  float float_data(int index) const;
  void set_float_data(int index, float value);
  void add_float_data(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      float_data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_float_data();

  // repeated int32 int32_data = 4 [packed = true];
  int int32_data_size() const;
  private:
  int _internal_int32_data_size() const;
  public:
  void clear_int32_data();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_int32_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_int32_data() const;
  void _internal_add_int32_data(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_int32_data();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 int32_data(int index) const;
  void set_int32_data(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_int32_data(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      int32_data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_int32_data();

  // repeated int64 int64_data = 5 [packed = true];
  int int64_data_size() const;
  private:
  int _internal_int64_data_size() const;
  public:
  void clear_int64_data();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_int64_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_int64_data() const;
  void _internal_add_int64_data(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_int64_data();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 int64_data(int index) const;
  void set_int64_data(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_int64_data(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      int64_data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_int64_data();

  // repeated double double_data = 6 [packed = true];
  int double_data_size() const;
  private:
  int _internal_double_data_size() const;
  public:
  void clear_double_data();
  private:
  double _internal_double_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_double_data() const;
  void _internal_add_double_data(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_double_data();
  public:
  double double_data(int index) const;
  void set_double_data(int index, double value);
  void add_double_data(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      double_data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_double_data();

  // repeated uint64 uint64_data = 7 [packed = true];
  int uint64_data_size() const;
  private:
  int _internal_uint64_data_size() const;
  public:
  void clear_uint64_data();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_uint64_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_uint64_data() const;
  void _internal_add_uint64_data(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_uint64_data();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 uint64_data(int index) const;
  void set_uint64_data(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_uint64_data(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      uint64_data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_uint64_data();

  // optional bytes raw_data = 8;
  bool has_raw_data() const;
  private:
  bool _internal_has_raw_data() const;
  public:
  void clear_raw_data();
  const std::string& raw_data() const;
  void set_raw_data(const std::string& value);
  void set_raw_data(std::string&& value);
  void set_raw_data(const char* value);
  void set_raw_data(const void* value, size_t size);
  std::string* mutable_raw_data();
  std::string* release_raw_data();
  void set_allocated_raw_data(std::string* raw_data);
  private:
  const std::string& _internal_raw_data() const;
  void _internal_set_raw_data(const std::string& value);
  std::string* _internal_mutable_raw_data();
  public:

  // optional .mindspore.irpb.DataType data_type = 2;
  bool has_data_type() const;
  private:
  bool _internal_has_data_type() const;
  public:
  void clear_data_type();
  ::mindspore::irpb::DataType data_type() const;
  void set_data_type(::mindspore::irpb::DataType value);
  private:
  ::mindspore::irpb::DataType _internal_data_type() const;
  void _internal_set_data_type(::mindspore::irpb::DataType value);
  public:

  // @@protoc_insertion_point(class_scope:mindspore.irpb.TensorProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > dims_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > float_data_;
  mutable std::atomic<int> _float_data_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > int32_data_;
  mutable std::atomic<int> _int32_data_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > int64_data_;
  mutable std::atomic<int> _int64_data_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > double_data_;
  mutable std::atomic<int> _double_data_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > uint64_data_;
  mutable std::atomic<int> _uint64_data_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr raw_data_;
  int data_type_;
  friend struct ::TableStruct_mindspore_5fanf_5fir_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ValueProto

// optional .mindspore.irpb.DataType dtype = 1;
inline bool ValueProto::_internal_has_dtype() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ValueProto::has_dtype() const {
  return _internal_has_dtype();
}
inline void ValueProto::clear_dtype() {
  dtype_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::mindspore::irpb::DataType ValueProto::_internal_dtype() const {
  return static_cast< ::mindspore::irpb::DataType >(dtype_);
}
inline ::mindspore::irpb::DataType ValueProto::dtype() const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.ValueProto.dtype)
  return _internal_dtype();
}
inline void ValueProto::_internal_set_dtype(::mindspore::irpb::DataType value) {
  assert(::mindspore::irpb::DataType_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  dtype_ = value;
}
inline void ValueProto::set_dtype(::mindspore::irpb::DataType value) {
  _internal_set_dtype(value);
  // @@protoc_insertion_point(field_set:mindspore.irpb.ValueProto.dtype)
}

// optional bool bool_val = 2;
inline bool ValueProto::_internal_has_bool_val() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ValueProto::has_bool_val() const {
  return _internal_has_bool_val();
}
inline void ValueProto::clear_bool_val() {
  bool_val_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool ValueProto::_internal_bool_val() const {
  return bool_val_;
}
inline bool ValueProto::bool_val() const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.ValueProto.bool_val)
  return _internal_bool_val();
}
inline void ValueProto::_internal_set_bool_val(bool value) {
  _has_bits_[0] |= 0x00000020u;
  bool_val_ = value;
}
inline void ValueProto::set_bool_val(bool value) {
  _internal_set_bool_val(value);
  // @@protoc_insertion_point(field_set:mindspore.irpb.ValueProto.bool_val)
}

// optional int64 int_val = 3;
inline bool ValueProto::_internal_has_int_val() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ValueProto::has_int_val() const {
  return _internal_has_int_val();
}
inline void ValueProto::clear_int_val() {
  int_val_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ValueProto::_internal_int_val() const {
  return int_val_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ValueProto::int_val() const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.ValueProto.int_val)
  return _internal_int_val();
}
inline void ValueProto::_internal_set_int_val(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000040u;
  int_val_ = value;
}
inline void ValueProto::set_int_val(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_int_val(value);
  // @@protoc_insertion_point(field_set:mindspore.irpb.ValueProto.int_val)
}

// optional uint64 uint_val = 4;
inline bool ValueProto::_internal_has_uint_val() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ValueProto::has_uint_val() const {
  return _internal_has_uint_val();
}
inline void ValueProto::clear_uint_val() {
  uint_val_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ValueProto::_internal_uint_val() const {
  return uint_val_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ValueProto::uint_val() const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.ValueProto.uint_val)
  return _internal_uint_val();
}
inline void ValueProto::_internal_set_uint_val(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000080u;
  uint_val_ = value;
}
inline void ValueProto::set_uint_val(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_uint_val(value);
  // @@protoc_insertion_point(field_set:mindspore.irpb.ValueProto.uint_val)
}

// optional float float_val = 5;
inline bool ValueProto::_internal_has_float_val() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ValueProto::has_float_val() const {
  return _internal_has_float_val();
}
inline void ValueProto::clear_float_val() {
  float_val_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline float ValueProto::_internal_float_val() const {
  return float_val_;
}
inline float ValueProto::float_val() const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.ValueProto.float_val)
  return _internal_float_val();
}
inline void ValueProto::_internal_set_float_val(float value) {
  _has_bits_[0] |= 0x00000200u;
  float_val_ = value;
}
inline void ValueProto::set_float_val(float value) {
  _internal_set_float_val(value);
  // @@protoc_insertion_point(field_set:mindspore.irpb.ValueProto.float_val)
}

// optional double double_val = 6;
inline bool ValueProto::_internal_has_double_val() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ValueProto::has_double_val() const {
  return _internal_has_double_val();
}
inline void ValueProto::clear_double_val() {
  double_val_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline double ValueProto::_internal_double_val() const {
  return double_val_;
}
inline double ValueProto::double_val() const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.ValueProto.double_val)
  return _internal_double_val();
}
inline void ValueProto::_internal_set_double_val(double value) {
  _has_bits_[0] |= 0x00000100u;
  double_val_ = value;
}
inline void ValueProto::set_double_val(double value) {
  _internal_set_double_val(value);
  // @@protoc_insertion_point(field_set:mindspore.irpb.ValueProto.double_val)
}

// optional string str_val = 7;
inline bool ValueProto::_internal_has_str_val() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ValueProto::has_str_val() const {
  return _internal_has_str_val();
}
inline void ValueProto::clear_str_val() {
  str_val_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ValueProto::str_val() const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.ValueProto.str_val)
  return _internal_str_val();
}
inline void ValueProto::set_str_val(const std::string& value) {
  _internal_set_str_val(value);
  // @@protoc_insertion_point(field_set:mindspore.irpb.ValueProto.str_val)
}
inline std::string* ValueProto::mutable_str_val() {
  // @@protoc_insertion_point(field_mutable:mindspore.irpb.ValueProto.str_val)
  return _internal_mutable_str_val();
}
inline const std::string& ValueProto::_internal_str_val() const {
  return str_val_.Get();
}
inline void ValueProto::_internal_set_str_val(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  str_val_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ValueProto::set_str_val(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  str_val_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mindspore.irpb.ValueProto.str_val)
}
inline void ValueProto::set_str_val(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  str_val_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mindspore.irpb.ValueProto.str_val)
}
inline void ValueProto::set_str_val(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  str_val_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mindspore.irpb.ValueProto.str_val)
}
inline std::string* ValueProto::_internal_mutable_str_val() {
  _has_bits_[0] |= 0x00000001u;
  return str_val_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ValueProto::release_str_val() {
  // @@protoc_insertion_point(field_release:mindspore.irpb.ValueProto.str_val)
  if (!_internal_has_str_val()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return str_val_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ValueProto::set_allocated_str_val(std::string* str_val) {
  if (str_val != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  str_val_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), str_val,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mindspore.irpb.ValueProto.str_val)
}

// optional .mindspore.irpb.TensorProto tensor_val = 8;
inline bool ValueProto::_internal_has_tensor_val() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || tensor_val_ != nullptr);
  return value;
}
inline bool ValueProto::has_tensor_val() const {
  return _internal_has_tensor_val();
}
inline void ValueProto::clear_tensor_val() {
  if (tensor_val_ != nullptr) tensor_val_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::mindspore::irpb::TensorProto& ValueProto::_internal_tensor_val() const {
  const ::mindspore::irpb::TensorProto* p = tensor_val_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mindspore::irpb::TensorProto*>(
      &::mindspore::irpb::_TensorProto_default_instance_);
}
inline const ::mindspore::irpb::TensorProto& ValueProto::tensor_val() const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.ValueProto.tensor_val)
  return _internal_tensor_val();
}
inline void ValueProto::unsafe_arena_set_allocated_tensor_val(
    ::mindspore::irpb::TensorProto* tensor_val) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tensor_val_);
  }
  tensor_val_ = tensor_val;
  if (tensor_val) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mindspore.irpb.ValueProto.tensor_val)
}
inline ::mindspore::irpb::TensorProto* ValueProto::release_tensor_val() {
  _has_bits_[0] &= ~0x00000002u;
  ::mindspore::irpb::TensorProto* temp = tensor_val_;
  tensor_val_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mindspore::irpb::TensorProto* ValueProto::unsafe_arena_release_tensor_val() {
  // @@protoc_insertion_point(field_release:mindspore.irpb.ValueProto.tensor_val)
  _has_bits_[0] &= ~0x00000002u;
  ::mindspore::irpb::TensorProto* temp = tensor_val_;
  tensor_val_ = nullptr;
  return temp;
}
inline ::mindspore::irpb::TensorProto* ValueProto::_internal_mutable_tensor_val() {
  _has_bits_[0] |= 0x00000002u;
  if (tensor_val_ == nullptr) {
    auto* p = CreateMaybeMessage<::mindspore::irpb::TensorProto>(GetArena());
    tensor_val_ = p;
  }
  return tensor_val_;
}
inline ::mindspore::irpb::TensorProto* ValueProto::mutable_tensor_val() {
  // @@protoc_insertion_point(field_mutable:mindspore.irpb.ValueProto.tensor_val)
  return _internal_mutable_tensor_val();
}
inline void ValueProto::set_allocated_tensor_val(::mindspore::irpb::TensorProto* tensor_val) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete tensor_val_;
  }
  if (tensor_val) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tensor_val);
    if (message_arena != submessage_arena) {
      tensor_val = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tensor_val, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  tensor_val_ = tensor_val;
  // @@protoc_insertion_point(field_set_allocated:mindspore.irpb.ValueProto.tensor_val)
}

// optional .mindspore.irpb.GraphProto graph = 9;
inline bool ValueProto::_internal_has_graph() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || graph_ != nullptr);
  return value;
}
inline bool ValueProto::has_graph() const {
  return _internal_has_graph();
}
inline void ValueProto::clear_graph() {
  if (graph_ != nullptr) graph_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::mindspore::irpb::GraphProto& ValueProto::_internal_graph() const {
  const ::mindspore::irpb::GraphProto* p = graph_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mindspore::irpb::GraphProto*>(
      &::mindspore::irpb::_GraphProto_default_instance_);
}
inline const ::mindspore::irpb::GraphProto& ValueProto::graph() const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.ValueProto.graph)
  return _internal_graph();
}
inline void ValueProto::unsafe_arena_set_allocated_graph(
    ::mindspore::irpb::GraphProto* graph) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(graph_);
  }
  graph_ = graph;
  if (graph) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mindspore.irpb.ValueProto.graph)
}
inline ::mindspore::irpb::GraphProto* ValueProto::release_graph() {
  _has_bits_[0] &= ~0x00000004u;
  ::mindspore::irpb::GraphProto* temp = graph_;
  graph_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mindspore::irpb::GraphProto* ValueProto::unsafe_arena_release_graph() {
  // @@protoc_insertion_point(field_release:mindspore.irpb.ValueProto.graph)
  _has_bits_[0] &= ~0x00000004u;
  ::mindspore::irpb::GraphProto* temp = graph_;
  graph_ = nullptr;
  return temp;
}
inline ::mindspore::irpb::GraphProto* ValueProto::_internal_mutable_graph() {
  _has_bits_[0] |= 0x00000004u;
  if (graph_ == nullptr) {
    auto* p = CreateMaybeMessage<::mindspore::irpb::GraphProto>(GetArena());
    graph_ = p;
  }
  return graph_;
}
inline ::mindspore::irpb::GraphProto* ValueProto::mutable_graph() {
  // @@protoc_insertion_point(field_mutable:mindspore.irpb.ValueProto.graph)
  return _internal_mutable_graph();
}
inline void ValueProto::set_allocated_graph(::mindspore::irpb::GraphProto* graph) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete graph_;
  }
  if (graph) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(graph);
    if (message_arena != submessage_arena) {
      graph = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, graph, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  graph_ = graph;
  // @@protoc_insertion_point(field_set_allocated:mindspore.irpb.ValueProto.graph)
}

// repeated bool bool_vals = 10;
inline int ValueProto::_internal_bool_vals_size() const {
  return bool_vals_.size();
}
inline int ValueProto::bool_vals_size() const {
  return _internal_bool_vals_size();
}
inline void ValueProto::clear_bool_vals() {
  bool_vals_.Clear();
}
inline bool ValueProto::_internal_bool_vals(int index) const {
  return bool_vals_.Get(index);
}
inline bool ValueProto::bool_vals(int index) const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.ValueProto.bool_vals)
  return _internal_bool_vals(index);
}
inline void ValueProto::set_bool_vals(int index, bool value) {
  bool_vals_.Set(index, value);
  // @@protoc_insertion_point(field_set:mindspore.irpb.ValueProto.bool_vals)
}
inline void ValueProto::_internal_add_bool_vals(bool value) {
  bool_vals_.Add(value);
}
inline void ValueProto::add_bool_vals(bool value) {
  _internal_add_bool_vals(value);
  // @@protoc_insertion_point(field_add:mindspore.irpb.ValueProto.bool_vals)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
ValueProto::_internal_bool_vals() const {
  return bool_vals_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
ValueProto::bool_vals() const {
  // @@protoc_insertion_point(field_list:mindspore.irpb.ValueProto.bool_vals)
  return _internal_bool_vals();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
ValueProto::_internal_mutable_bool_vals() {
  return &bool_vals_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
ValueProto::mutable_bool_vals() {
  // @@protoc_insertion_point(field_mutable_list:mindspore.irpb.ValueProto.bool_vals)
  return _internal_mutable_bool_vals();
}

// repeated int64 int_vals = 11;
inline int ValueProto::_internal_int_vals_size() const {
  return int_vals_.size();
}
inline int ValueProto::int_vals_size() const {
  return _internal_int_vals_size();
}
inline void ValueProto::clear_int_vals() {
  int_vals_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ValueProto::_internal_int_vals(int index) const {
  return int_vals_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ValueProto::int_vals(int index) const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.ValueProto.int_vals)
  return _internal_int_vals(index);
}
inline void ValueProto::set_int_vals(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  int_vals_.Set(index, value);
  // @@protoc_insertion_point(field_set:mindspore.irpb.ValueProto.int_vals)
}
inline void ValueProto::_internal_add_int_vals(::PROTOBUF_NAMESPACE_ID::int64 value) {
  int_vals_.Add(value);
}
inline void ValueProto::add_int_vals(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_int_vals(value);
  // @@protoc_insertion_point(field_add:mindspore.irpb.ValueProto.int_vals)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
ValueProto::_internal_int_vals() const {
  return int_vals_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
ValueProto::int_vals() const {
  // @@protoc_insertion_point(field_list:mindspore.irpb.ValueProto.int_vals)
  return _internal_int_vals();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
ValueProto::_internal_mutable_int_vals() {
  return &int_vals_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
ValueProto::mutable_int_vals() {
  // @@protoc_insertion_point(field_mutable_list:mindspore.irpb.ValueProto.int_vals)
  return _internal_mutable_int_vals();
}

// repeated uint64 uint_vals = 12;
inline int ValueProto::_internal_uint_vals_size() const {
  return uint_vals_.size();
}
inline int ValueProto::uint_vals_size() const {
  return _internal_uint_vals_size();
}
inline void ValueProto::clear_uint_vals() {
  uint_vals_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ValueProto::_internal_uint_vals(int index) const {
  return uint_vals_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ValueProto::uint_vals(int index) const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.ValueProto.uint_vals)
  return _internal_uint_vals(index);
}
inline void ValueProto::set_uint_vals(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  uint_vals_.Set(index, value);
  // @@protoc_insertion_point(field_set:mindspore.irpb.ValueProto.uint_vals)
}
inline void ValueProto::_internal_add_uint_vals(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  uint_vals_.Add(value);
}
inline void ValueProto::add_uint_vals(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_uint_vals(value);
  // @@protoc_insertion_point(field_add:mindspore.irpb.ValueProto.uint_vals)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
ValueProto::_internal_uint_vals() const {
  return uint_vals_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
ValueProto::uint_vals() const {
  // @@protoc_insertion_point(field_list:mindspore.irpb.ValueProto.uint_vals)
  return _internal_uint_vals();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
ValueProto::_internal_mutable_uint_vals() {
  return &uint_vals_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
ValueProto::mutable_uint_vals() {
  // @@protoc_insertion_point(field_mutable_list:mindspore.irpb.ValueProto.uint_vals)
  return _internal_mutable_uint_vals();
}

// repeated float float_vals = 13;
inline int ValueProto::_internal_float_vals_size() const {
  return float_vals_.size();
}
inline int ValueProto::float_vals_size() const {
  return _internal_float_vals_size();
}
inline void ValueProto::clear_float_vals() {
  float_vals_.Clear();
}
inline float ValueProto::_internal_float_vals(int index) const {
  return float_vals_.Get(index);
}
inline float ValueProto::float_vals(int index) const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.ValueProto.float_vals)
  return _internal_float_vals(index);
}
inline void ValueProto::set_float_vals(int index, float value) {
  float_vals_.Set(index, value);
  // @@protoc_insertion_point(field_set:mindspore.irpb.ValueProto.float_vals)
}
inline void ValueProto::_internal_add_float_vals(float value) {
  float_vals_.Add(value);
}
inline void ValueProto::add_float_vals(float value) {
  _internal_add_float_vals(value);
  // @@protoc_insertion_point(field_add:mindspore.irpb.ValueProto.float_vals)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ValueProto::_internal_float_vals() const {
  return float_vals_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ValueProto::float_vals() const {
  // @@protoc_insertion_point(field_list:mindspore.irpb.ValueProto.float_vals)
  return _internal_float_vals();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ValueProto::_internal_mutable_float_vals() {
  return &float_vals_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ValueProto::mutable_float_vals() {
  // @@protoc_insertion_point(field_mutable_list:mindspore.irpb.ValueProto.float_vals)
  return _internal_mutable_float_vals();
}

// repeated double double_vals = 14;
inline int ValueProto::_internal_double_vals_size() const {
  return double_vals_.size();
}
inline int ValueProto::double_vals_size() const {
  return _internal_double_vals_size();
}
inline void ValueProto::clear_double_vals() {
  double_vals_.Clear();
}
inline double ValueProto::_internal_double_vals(int index) const {
  return double_vals_.Get(index);
}
inline double ValueProto::double_vals(int index) const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.ValueProto.double_vals)
  return _internal_double_vals(index);
}
inline void ValueProto::set_double_vals(int index, double value) {
  double_vals_.Set(index, value);
  // @@protoc_insertion_point(field_set:mindspore.irpb.ValueProto.double_vals)
}
inline void ValueProto::_internal_add_double_vals(double value) {
  double_vals_.Add(value);
}
inline void ValueProto::add_double_vals(double value) {
  _internal_add_double_vals(value);
  // @@protoc_insertion_point(field_add:mindspore.irpb.ValueProto.double_vals)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
ValueProto::_internal_double_vals() const {
  return double_vals_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
ValueProto::double_vals() const {
  // @@protoc_insertion_point(field_list:mindspore.irpb.ValueProto.double_vals)
  return _internal_double_vals();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
ValueProto::_internal_mutable_double_vals() {
  return &double_vals_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
ValueProto::mutable_double_vals() {
  // @@protoc_insertion_point(field_mutable_list:mindspore.irpb.ValueProto.double_vals)
  return _internal_mutable_double_vals();
}

// repeated string str_vals = 15;
inline int ValueProto::_internal_str_vals_size() const {
  return str_vals_.size();
}
inline int ValueProto::str_vals_size() const {
  return _internal_str_vals_size();
}
inline void ValueProto::clear_str_vals() {
  str_vals_.Clear();
}
inline std::string* ValueProto::add_str_vals() {
  // @@protoc_insertion_point(field_add_mutable:mindspore.irpb.ValueProto.str_vals)
  return _internal_add_str_vals();
}
inline const std::string& ValueProto::_internal_str_vals(int index) const {
  return str_vals_.Get(index);
}
inline const std::string& ValueProto::str_vals(int index) const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.ValueProto.str_vals)
  return _internal_str_vals(index);
}
inline std::string* ValueProto::mutable_str_vals(int index) {
  // @@protoc_insertion_point(field_mutable:mindspore.irpb.ValueProto.str_vals)
  return str_vals_.Mutable(index);
}
inline void ValueProto::set_str_vals(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:mindspore.irpb.ValueProto.str_vals)
  str_vals_.Mutable(index)->assign(value);
}
inline void ValueProto::set_str_vals(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:mindspore.irpb.ValueProto.str_vals)
  str_vals_.Mutable(index)->assign(std::move(value));
}
inline void ValueProto::set_str_vals(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  str_vals_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mindspore.irpb.ValueProto.str_vals)
}
inline void ValueProto::set_str_vals(int index, const char* value, size_t size) {
  str_vals_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mindspore.irpb.ValueProto.str_vals)
}
inline std::string* ValueProto::_internal_add_str_vals() {
  return str_vals_.Add();
}
inline void ValueProto::add_str_vals(const std::string& value) {
  str_vals_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mindspore.irpb.ValueProto.str_vals)
}
inline void ValueProto::add_str_vals(std::string&& value) {
  str_vals_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mindspore.irpb.ValueProto.str_vals)
}
inline void ValueProto::add_str_vals(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  str_vals_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mindspore.irpb.ValueProto.str_vals)
}
inline void ValueProto::add_str_vals(const char* value, size_t size) {
  str_vals_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mindspore.irpb.ValueProto.str_vals)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ValueProto::str_vals() const {
  // @@protoc_insertion_point(field_list:mindspore.irpb.ValueProto.str_vals)
  return str_vals_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ValueProto::mutable_str_vals() {
  // @@protoc_insertion_point(field_mutable_list:mindspore.irpb.ValueProto.str_vals)
  return &str_vals_;
}

// repeated .mindspore.irpb.TensorProto tensor_vals = 16;
inline int ValueProto::_internal_tensor_vals_size() const {
  return tensor_vals_.size();
}
inline int ValueProto::tensor_vals_size() const {
  return _internal_tensor_vals_size();
}
inline void ValueProto::clear_tensor_vals() {
  tensor_vals_.Clear();
}
inline ::mindspore::irpb::TensorProto* ValueProto::mutable_tensor_vals(int index) {
  // @@protoc_insertion_point(field_mutable:mindspore.irpb.ValueProto.tensor_vals)
  return tensor_vals_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mindspore::irpb::TensorProto >*
ValueProto::mutable_tensor_vals() {
  // @@protoc_insertion_point(field_mutable_list:mindspore.irpb.ValueProto.tensor_vals)
  return &tensor_vals_;
}
inline const ::mindspore::irpb::TensorProto& ValueProto::_internal_tensor_vals(int index) const {
  return tensor_vals_.Get(index);
}
inline const ::mindspore::irpb::TensorProto& ValueProto::tensor_vals(int index) const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.ValueProto.tensor_vals)
  return _internal_tensor_vals(index);
}
inline ::mindspore::irpb::TensorProto* ValueProto::_internal_add_tensor_vals() {
  return tensor_vals_.Add();
}
inline ::mindspore::irpb::TensorProto* ValueProto::add_tensor_vals() {
  // @@protoc_insertion_point(field_add:mindspore.irpb.ValueProto.tensor_vals)
  return _internal_add_tensor_vals();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mindspore::irpb::TensorProto >&
ValueProto::tensor_vals() const {
  // @@protoc_insertion_point(field_list:mindspore.irpb.ValueProto.tensor_vals)
  return tensor_vals_;
}

// repeated .mindspore.irpb.GraphProto graphs = 17;
inline int ValueProto::_internal_graphs_size() const {
  return graphs_.size();
}
inline int ValueProto::graphs_size() const {
  return _internal_graphs_size();
}
inline void ValueProto::clear_graphs() {
  graphs_.Clear();
}
inline ::mindspore::irpb::GraphProto* ValueProto::mutable_graphs(int index) {
  // @@protoc_insertion_point(field_mutable:mindspore.irpb.ValueProto.graphs)
  return graphs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mindspore::irpb::GraphProto >*
ValueProto::mutable_graphs() {
  // @@protoc_insertion_point(field_mutable_list:mindspore.irpb.ValueProto.graphs)
  return &graphs_;
}
inline const ::mindspore::irpb::GraphProto& ValueProto::_internal_graphs(int index) const {
  return graphs_.Get(index);
}
inline const ::mindspore::irpb::GraphProto& ValueProto::graphs(int index) const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.ValueProto.graphs)
  return _internal_graphs(index);
}
inline ::mindspore::irpb::GraphProto* ValueProto::_internal_add_graphs() {
  return graphs_.Add();
}
inline ::mindspore::irpb::GraphProto* ValueProto::add_graphs() {
  // @@protoc_insertion_point(field_add:mindspore.irpb.ValueProto.graphs)
  return _internal_add_graphs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mindspore::irpb::GraphProto >&
ValueProto::graphs() const {
  // @@protoc_insertion_point(field_list:mindspore.irpb.ValueProto.graphs)
  return graphs_;
}

// repeated .mindspore.irpb.ValueProto values = 18;
inline int ValueProto::_internal_values_size() const {
  return values_.size();
}
inline int ValueProto::values_size() const {
  return _internal_values_size();
}
inline void ValueProto::clear_values() {
  values_.Clear();
}
inline ::mindspore::irpb::ValueProto* ValueProto::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:mindspore.irpb.ValueProto.values)
  return values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mindspore::irpb::ValueProto >*
ValueProto::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:mindspore.irpb.ValueProto.values)
  return &values_;
}
inline const ::mindspore::irpb::ValueProto& ValueProto::_internal_values(int index) const {
  return values_.Get(index);
}
inline const ::mindspore::irpb::ValueProto& ValueProto::values(int index) const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.ValueProto.values)
  return _internal_values(index);
}
inline ::mindspore::irpb::ValueProto* ValueProto::_internal_add_values() {
  return values_.Add();
}
inline ::mindspore::irpb::ValueProto* ValueProto::add_values() {
  // @@protoc_insertion_point(field_add:mindspore.irpb.ValueProto.values)
  return _internal_add_values();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mindspore::irpb::ValueProto >&
ValueProto::values() const {
  // @@protoc_insertion_point(field_list:mindspore.irpb.ValueProto.values)
  return values_;
}

// repeated .mindspore.irpb.NamedValueProto dict_val = 19;
inline int ValueProto::_internal_dict_val_size() const {
  return dict_val_.size();
}
inline int ValueProto::dict_val_size() const {
  return _internal_dict_val_size();
}
inline void ValueProto::clear_dict_val() {
  dict_val_.Clear();
}
inline ::mindspore::irpb::NamedValueProto* ValueProto::mutable_dict_val(int index) {
  // @@protoc_insertion_point(field_mutable:mindspore.irpb.ValueProto.dict_val)
  return dict_val_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mindspore::irpb::NamedValueProto >*
ValueProto::mutable_dict_val() {
  // @@protoc_insertion_point(field_mutable_list:mindspore.irpb.ValueProto.dict_val)
  return &dict_val_;
}
inline const ::mindspore::irpb::NamedValueProto& ValueProto::_internal_dict_val(int index) const {
  return dict_val_.Get(index);
}
inline const ::mindspore::irpb::NamedValueProto& ValueProto::dict_val(int index) const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.ValueProto.dict_val)
  return _internal_dict_val(index);
}
inline ::mindspore::irpb::NamedValueProto* ValueProto::_internal_add_dict_val() {
  return dict_val_.Add();
}
inline ::mindspore::irpb::NamedValueProto* ValueProto::add_dict_val() {
  // @@protoc_insertion_point(field_add:mindspore.irpb.ValueProto.dict_val)
  return _internal_add_dict_val();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mindspore::irpb::NamedValueProto >&
ValueProto::dict_val() const {
  // @@protoc_insertion_point(field_list:mindspore.irpb.ValueProto.dict_val)
  return dict_val_;
}

// optional .mindspore.irpb.TypeProto type_val = 20;
inline bool ValueProto::_internal_has_type_val() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || type_val_ != nullptr);
  return value;
}
inline bool ValueProto::has_type_val() const {
  return _internal_has_type_val();
}
inline void ValueProto::clear_type_val() {
  if (type_val_ != nullptr) type_val_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::mindspore::irpb::TypeProto& ValueProto::_internal_type_val() const {
  const ::mindspore::irpb::TypeProto* p = type_val_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mindspore::irpb::TypeProto*>(
      &::mindspore::irpb::_TypeProto_default_instance_);
}
inline const ::mindspore::irpb::TypeProto& ValueProto::type_val() const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.ValueProto.type_val)
  return _internal_type_val();
}
inline void ValueProto::unsafe_arena_set_allocated_type_val(
    ::mindspore::irpb::TypeProto* type_val) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(type_val_);
  }
  type_val_ = type_val;
  if (type_val) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mindspore.irpb.ValueProto.type_val)
}
inline ::mindspore::irpb::TypeProto* ValueProto::release_type_val() {
  _has_bits_[0] &= ~0x00000008u;
  ::mindspore::irpb::TypeProto* temp = type_val_;
  type_val_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mindspore::irpb::TypeProto* ValueProto::unsafe_arena_release_type_val() {
  // @@protoc_insertion_point(field_release:mindspore.irpb.ValueProto.type_val)
  _has_bits_[0] &= ~0x00000008u;
  ::mindspore::irpb::TypeProto* temp = type_val_;
  type_val_ = nullptr;
  return temp;
}
inline ::mindspore::irpb::TypeProto* ValueProto::_internal_mutable_type_val() {
  _has_bits_[0] |= 0x00000008u;
  if (type_val_ == nullptr) {
    auto* p = CreateMaybeMessage<::mindspore::irpb::TypeProto>(GetArena());
    type_val_ = p;
  }
  return type_val_;
}
inline ::mindspore::irpb::TypeProto* ValueProto::mutable_type_val() {
  // @@protoc_insertion_point(field_mutable:mindspore.irpb.ValueProto.type_val)
  return _internal_mutable_type_val();
}
inline void ValueProto::set_allocated_type_val(::mindspore::irpb::TypeProto* type_val) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete type_val_;
  }
  if (type_val) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(type_val);
    if (message_arena != submessage_arena) {
      type_val = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, type_val, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  type_val_ = type_val;
  // @@protoc_insertion_point(field_set_allocated:mindspore.irpb.ValueProto.type_val)
}

// -------------------------------------------------------------------

// AttributeProto

// optional string name = 1;
inline bool AttributeProto::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AttributeProto::has_name() const {
  return _internal_has_name();
}
inline void AttributeProto::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AttributeProto::name() const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.AttributeProto.name)
  return _internal_name();
}
inline void AttributeProto::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:mindspore.irpb.AttributeProto.name)
}
inline std::string* AttributeProto::mutable_name() {
  // @@protoc_insertion_point(field_mutable:mindspore.irpb.AttributeProto.name)
  return _internal_mutable_name();
}
inline const std::string& AttributeProto::_internal_name() const {
  return name_.Get();
}
inline void AttributeProto::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AttributeProto::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mindspore.irpb.AttributeProto.name)
}
inline void AttributeProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mindspore.irpb.AttributeProto.name)
}
inline void AttributeProto::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mindspore.irpb.AttributeProto.name)
}
inline std::string* AttributeProto::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AttributeProto::release_name() {
  // @@protoc_insertion_point(field_release:mindspore.irpb.AttributeProto.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AttributeProto::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mindspore.irpb.AttributeProto.name)
}

// optional .mindspore.irpb.ValueProto value = 2;
inline bool AttributeProto::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || value_ != nullptr);
  return value;
}
inline bool AttributeProto::has_value() const {
  return _internal_has_value();
}
inline void AttributeProto::clear_value() {
  if (value_ != nullptr) value_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::mindspore::irpb::ValueProto& AttributeProto::_internal_value() const {
  const ::mindspore::irpb::ValueProto* p = value_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mindspore::irpb::ValueProto*>(
      &::mindspore::irpb::_ValueProto_default_instance_);
}
inline const ::mindspore::irpb::ValueProto& AttributeProto::value() const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.AttributeProto.value)
  return _internal_value();
}
inline void AttributeProto::unsafe_arena_set_allocated_value(
    ::mindspore::irpb::ValueProto* value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value_);
  }
  value_ = value;
  if (value) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mindspore.irpb.AttributeProto.value)
}
inline ::mindspore::irpb::ValueProto* AttributeProto::release_value() {
  _has_bits_[0] &= ~0x00000002u;
  ::mindspore::irpb::ValueProto* temp = value_;
  value_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mindspore::irpb::ValueProto* AttributeProto::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:mindspore.irpb.AttributeProto.value)
  _has_bits_[0] &= ~0x00000002u;
  ::mindspore::irpb::ValueProto* temp = value_;
  value_ = nullptr;
  return temp;
}
inline ::mindspore::irpb::ValueProto* AttributeProto::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  if (value_ == nullptr) {
    auto* p = CreateMaybeMessage<::mindspore::irpb::ValueProto>(GetArena());
    value_ = p;
  }
  return value_;
}
inline ::mindspore::irpb::ValueProto* AttributeProto::mutable_value() {
  // @@protoc_insertion_point(field_mutable:mindspore.irpb.AttributeProto.value)
  return _internal_mutable_value();
}
inline void AttributeProto::set_allocated_value(::mindspore::irpb::ValueProto* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete value_;
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(value);
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:mindspore.irpb.AttributeProto.value)
}

// -------------------------------------------------------------------

// NamedValueProto

// optional string key = 1;
inline bool NamedValueProto::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NamedValueProto::has_key() const {
  return _internal_has_key();
}
inline void NamedValueProto::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NamedValueProto::key() const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.NamedValueProto.key)
  return _internal_key();
}
inline void NamedValueProto::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:mindspore.irpb.NamedValueProto.key)
}
inline std::string* NamedValueProto::mutable_key() {
  // @@protoc_insertion_point(field_mutable:mindspore.irpb.NamedValueProto.key)
  return _internal_mutable_key();
}
inline const std::string& NamedValueProto::_internal_key() const {
  return key_.Get();
}
inline void NamedValueProto::_internal_set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NamedValueProto::set_key(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mindspore.irpb.NamedValueProto.key)
}
inline void NamedValueProto::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mindspore.irpb.NamedValueProto.key)
}
inline void NamedValueProto::set_key(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mindspore.irpb.NamedValueProto.key)
}
inline std::string* NamedValueProto::_internal_mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NamedValueProto::release_key() {
  // @@protoc_insertion_point(field_release:mindspore.irpb.NamedValueProto.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NamedValueProto::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mindspore.irpb.NamedValueProto.key)
}

// optional .mindspore.irpb.ValueProto value = 2;
inline bool NamedValueProto::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || value_ != nullptr);
  return value;
}
inline bool NamedValueProto::has_value() const {
  return _internal_has_value();
}
inline void NamedValueProto::clear_value() {
  if (value_ != nullptr) value_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::mindspore::irpb::ValueProto& NamedValueProto::_internal_value() const {
  const ::mindspore::irpb::ValueProto* p = value_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mindspore::irpb::ValueProto*>(
      &::mindspore::irpb::_ValueProto_default_instance_);
}
inline const ::mindspore::irpb::ValueProto& NamedValueProto::value() const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.NamedValueProto.value)
  return _internal_value();
}
inline void NamedValueProto::unsafe_arena_set_allocated_value(
    ::mindspore::irpb::ValueProto* value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value_);
  }
  value_ = value;
  if (value) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mindspore.irpb.NamedValueProto.value)
}
inline ::mindspore::irpb::ValueProto* NamedValueProto::release_value() {
  _has_bits_[0] &= ~0x00000002u;
  ::mindspore::irpb::ValueProto* temp = value_;
  value_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mindspore::irpb::ValueProto* NamedValueProto::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:mindspore.irpb.NamedValueProto.value)
  _has_bits_[0] &= ~0x00000002u;
  ::mindspore::irpb::ValueProto* temp = value_;
  value_ = nullptr;
  return temp;
}
inline ::mindspore::irpb::ValueProto* NamedValueProto::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  if (value_ == nullptr) {
    auto* p = CreateMaybeMessage<::mindspore::irpb::ValueProto>(GetArena());
    value_ = p;
  }
  return value_;
}
inline ::mindspore::irpb::ValueProto* NamedValueProto::mutable_value() {
  // @@protoc_insertion_point(field_mutable:mindspore.irpb.NamedValueProto.value)
  return _internal_mutable_value();
}
inline void NamedValueProto::set_allocated_value(::mindspore::irpb::ValueProto* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete value_;
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(value);
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:mindspore.irpb.NamedValueProto.value)
}

// -------------------------------------------------------------------

// TensorShapeProto_Dimension

// optional int64 size = 1;
inline bool TensorShapeProto_Dimension::_internal_has_size() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TensorShapeProto_Dimension::has_size() const {
  return _internal_has_size();
}
inline void TensorShapeProto_Dimension::clear_size() {
  size_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TensorShapeProto_Dimension::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TensorShapeProto_Dimension::size() const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.TensorShapeProto.Dimension.size)
  return _internal_size();
}
inline void TensorShapeProto_Dimension::_internal_set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  size_ = value;
}
inline void TensorShapeProto_Dimension::set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:mindspore.irpb.TensorShapeProto.Dimension.size)
}

// optional string name = 2;
inline bool TensorShapeProto_Dimension::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TensorShapeProto_Dimension::has_name() const {
  return _internal_has_name();
}
inline void TensorShapeProto_Dimension::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TensorShapeProto_Dimension::name() const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.TensorShapeProto.Dimension.name)
  return _internal_name();
}
inline void TensorShapeProto_Dimension::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:mindspore.irpb.TensorShapeProto.Dimension.name)
}
inline std::string* TensorShapeProto_Dimension::mutable_name() {
  // @@protoc_insertion_point(field_mutable:mindspore.irpb.TensorShapeProto.Dimension.name)
  return _internal_mutable_name();
}
inline const std::string& TensorShapeProto_Dimension::_internal_name() const {
  return name_.Get();
}
inline void TensorShapeProto_Dimension::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TensorShapeProto_Dimension::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mindspore.irpb.TensorShapeProto.Dimension.name)
}
inline void TensorShapeProto_Dimension::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mindspore.irpb.TensorShapeProto.Dimension.name)
}
inline void TensorShapeProto_Dimension::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mindspore.irpb.TensorShapeProto.Dimension.name)
}
inline std::string* TensorShapeProto_Dimension::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TensorShapeProto_Dimension::release_name() {
  // @@protoc_insertion_point(field_release:mindspore.irpb.TensorShapeProto.Dimension.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TensorShapeProto_Dimension::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mindspore.irpb.TensorShapeProto.Dimension.name)
}

// -------------------------------------------------------------------

// TensorShapeProto

// repeated .mindspore.irpb.TensorShapeProto.Dimension dim = 1;
inline int TensorShapeProto::_internal_dim_size() const {
  return dim_.size();
}
inline int TensorShapeProto::dim_size() const {
  return _internal_dim_size();
}
inline void TensorShapeProto::clear_dim() {
  dim_.Clear();
}
inline ::mindspore::irpb::TensorShapeProto_Dimension* TensorShapeProto::mutable_dim(int index) {
  // @@protoc_insertion_point(field_mutable:mindspore.irpb.TensorShapeProto.dim)
  return dim_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mindspore::irpb::TensorShapeProto_Dimension >*
TensorShapeProto::mutable_dim() {
  // @@protoc_insertion_point(field_mutable_list:mindspore.irpb.TensorShapeProto.dim)
  return &dim_;
}
inline const ::mindspore::irpb::TensorShapeProto_Dimension& TensorShapeProto::_internal_dim(int index) const {
  return dim_.Get(index);
}
inline const ::mindspore::irpb::TensorShapeProto_Dimension& TensorShapeProto::dim(int index) const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.TensorShapeProto.dim)
  return _internal_dim(index);
}
inline ::mindspore::irpb::TensorShapeProto_Dimension* TensorShapeProto::_internal_add_dim() {
  return dim_.Add();
}
inline ::mindspore::irpb::TensorShapeProto_Dimension* TensorShapeProto::add_dim() {
  // @@protoc_insertion_point(field_add:mindspore.irpb.TensorShapeProto.dim)
  return _internal_add_dim();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mindspore::irpb::TensorShapeProto_Dimension >&
TensorShapeProto::dim() const {
  // @@protoc_insertion_point(field_list:mindspore.irpb.TensorShapeProto.dim)
  return dim_;
}

// -------------------------------------------------------------------

// TypeProto_Tensor

// optional .mindspore.irpb.DataType elem_type = 1;
inline bool TypeProto_Tensor::_internal_has_elem_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TypeProto_Tensor::has_elem_type() const {
  return _internal_has_elem_type();
}
inline void TypeProto_Tensor::clear_elem_type() {
  elem_type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::mindspore::irpb::DataType TypeProto_Tensor::_internal_elem_type() const {
  return static_cast< ::mindspore::irpb::DataType >(elem_type_);
}
inline ::mindspore::irpb::DataType TypeProto_Tensor::elem_type() const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.TypeProto.Tensor.elem_type)
  return _internal_elem_type();
}
inline void TypeProto_Tensor::_internal_set_elem_type(::mindspore::irpb::DataType value) {
  assert(::mindspore::irpb::DataType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  elem_type_ = value;
}
inline void TypeProto_Tensor::set_elem_type(::mindspore::irpb::DataType value) {
  _internal_set_elem_type(value);
  // @@protoc_insertion_point(field_set:mindspore.irpb.TypeProto.Tensor.elem_type)
}

// optional .mindspore.irpb.TensorShapeProto shape = 2;
inline bool TypeProto_Tensor::_internal_has_shape() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || shape_ != nullptr);
  return value;
}
inline bool TypeProto_Tensor::has_shape() const {
  return _internal_has_shape();
}
inline void TypeProto_Tensor::clear_shape() {
  if (shape_ != nullptr) shape_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mindspore::irpb::TensorShapeProto& TypeProto_Tensor::_internal_shape() const {
  const ::mindspore::irpb::TensorShapeProto* p = shape_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mindspore::irpb::TensorShapeProto*>(
      &::mindspore::irpb::_TensorShapeProto_default_instance_);
}
inline const ::mindspore::irpb::TensorShapeProto& TypeProto_Tensor::shape() const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.TypeProto.Tensor.shape)
  return _internal_shape();
}
inline void TypeProto_Tensor::unsafe_arena_set_allocated_shape(
    ::mindspore::irpb::TensorShapeProto* shape) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shape_);
  }
  shape_ = shape;
  if (shape) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mindspore.irpb.TypeProto.Tensor.shape)
}
inline ::mindspore::irpb::TensorShapeProto* TypeProto_Tensor::release_shape() {
  _has_bits_[0] &= ~0x00000001u;
  ::mindspore::irpb::TensorShapeProto* temp = shape_;
  shape_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mindspore::irpb::TensorShapeProto* TypeProto_Tensor::unsafe_arena_release_shape() {
  // @@protoc_insertion_point(field_release:mindspore.irpb.TypeProto.Tensor.shape)
  _has_bits_[0] &= ~0x00000001u;
  ::mindspore::irpb::TensorShapeProto* temp = shape_;
  shape_ = nullptr;
  return temp;
}
inline ::mindspore::irpb::TensorShapeProto* TypeProto_Tensor::_internal_mutable_shape() {
  _has_bits_[0] |= 0x00000001u;
  if (shape_ == nullptr) {
    auto* p = CreateMaybeMessage<::mindspore::irpb::TensorShapeProto>(GetArena());
    shape_ = p;
  }
  return shape_;
}
inline ::mindspore::irpb::TensorShapeProto* TypeProto_Tensor::mutable_shape() {
  // @@protoc_insertion_point(field_mutable:mindspore.irpb.TypeProto.Tensor.shape)
  return _internal_mutable_shape();
}
inline void TypeProto_Tensor::set_allocated_shape(::mindspore::irpb::TensorShapeProto* shape) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete shape_;
  }
  if (shape) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(shape);
    if (message_arena != submessage_arena) {
      shape = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shape, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  shape_ = shape;
  // @@protoc_insertion_point(field_set_allocated:mindspore.irpb.TypeProto.Tensor.shape)
}

// -------------------------------------------------------------------

// TypeProto_Sequence

// repeated .mindspore.irpb.TypeProto elem_types = 1;
inline int TypeProto_Sequence::_internal_elem_types_size() const {
  return elem_types_.size();
}
inline int TypeProto_Sequence::elem_types_size() const {
  return _internal_elem_types_size();
}
inline void TypeProto_Sequence::clear_elem_types() {
  elem_types_.Clear();
}
inline ::mindspore::irpb::TypeProto* TypeProto_Sequence::mutable_elem_types(int index) {
  // @@protoc_insertion_point(field_mutable:mindspore.irpb.TypeProto.Sequence.elem_types)
  return elem_types_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mindspore::irpb::TypeProto >*
TypeProto_Sequence::mutable_elem_types() {
  // @@protoc_insertion_point(field_mutable_list:mindspore.irpb.TypeProto.Sequence.elem_types)
  return &elem_types_;
}
inline const ::mindspore::irpb::TypeProto& TypeProto_Sequence::_internal_elem_types(int index) const {
  return elem_types_.Get(index);
}
inline const ::mindspore::irpb::TypeProto& TypeProto_Sequence::elem_types(int index) const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.TypeProto.Sequence.elem_types)
  return _internal_elem_types(index);
}
inline ::mindspore::irpb::TypeProto* TypeProto_Sequence::_internal_add_elem_types() {
  return elem_types_.Add();
}
inline ::mindspore::irpb::TypeProto* TypeProto_Sequence::add_elem_types() {
  // @@protoc_insertion_point(field_add:mindspore.irpb.TypeProto.Sequence.elem_types)
  return _internal_add_elem_types();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mindspore::irpb::TypeProto >&
TypeProto_Sequence::elem_types() const {
  // @@protoc_insertion_point(field_list:mindspore.irpb.TypeProto.Sequence.elem_types)
  return elem_types_;
}

// -------------------------------------------------------------------

// TypeProto

// optional .mindspore.irpb.DataType data_type = 1;
inline bool TypeProto::_internal_has_data_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TypeProto::has_data_type() const {
  return _internal_has_data_type();
}
inline void TypeProto::clear_data_type() {
  data_type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::mindspore::irpb::DataType TypeProto::_internal_data_type() const {
  return static_cast< ::mindspore::irpb::DataType >(data_type_);
}
inline ::mindspore::irpb::DataType TypeProto::data_type() const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.TypeProto.data_type)
  return _internal_data_type();
}
inline void TypeProto::_internal_set_data_type(::mindspore::irpb::DataType value) {
  assert(::mindspore::irpb::DataType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  data_type_ = value;
}
inline void TypeProto::set_data_type(::mindspore::irpb::DataType value) {
  _internal_set_data_type(value);
  // @@protoc_insertion_point(field_set:mindspore.irpb.TypeProto.data_type)
}

// .mindspore.irpb.TypeProto.Tensor tensor_type = 2;
inline bool TypeProto::_internal_has_tensor_type() const {
  return value_case() == kTensorType;
}
inline bool TypeProto::has_tensor_type() const {
  return _internal_has_tensor_type();
}
inline void TypeProto::set_has_tensor_type() {
  _oneof_case_[0] = kTensorType;
}
inline void TypeProto::clear_tensor_type() {
  if (_internal_has_tensor_type()) {
    if (GetArena() == nullptr) {
      delete value_.tensor_type_;
    }
    clear_has_value();
  }
}
inline ::mindspore::irpb::TypeProto_Tensor* TypeProto::release_tensor_type() {
  // @@protoc_insertion_point(field_release:mindspore.irpb.TypeProto.tensor_type)
  if (_internal_has_tensor_type()) {
    clear_has_value();
      ::mindspore::irpb::TypeProto_Tensor* temp = value_.tensor_type_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.tensor_type_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::mindspore::irpb::TypeProto_Tensor& TypeProto::_internal_tensor_type() const {
  return _internal_has_tensor_type()
      ? *value_.tensor_type_
      : *reinterpret_cast< ::mindspore::irpb::TypeProto_Tensor*>(&::mindspore::irpb::_TypeProto_Tensor_default_instance_);
}
inline const ::mindspore::irpb::TypeProto_Tensor& TypeProto::tensor_type() const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.TypeProto.tensor_type)
  return _internal_tensor_type();
}
inline ::mindspore::irpb::TypeProto_Tensor* TypeProto::unsafe_arena_release_tensor_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mindspore.irpb.TypeProto.tensor_type)
  if (_internal_has_tensor_type()) {
    clear_has_value();
    ::mindspore::irpb::TypeProto_Tensor* temp = value_.tensor_type_;
    value_.tensor_type_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TypeProto::unsafe_arena_set_allocated_tensor_type(::mindspore::irpb::TypeProto_Tensor* tensor_type) {
  clear_value();
  if (tensor_type) {
    set_has_tensor_type();
    value_.tensor_type_ = tensor_type;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mindspore.irpb.TypeProto.tensor_type)
}
inline ::mindspore::irpb::TypeProto_Tensor* TypeProto::_internal_mutable_tensor_type() {
  if (!_internal_has_tensor_type()) {
    clear_value();
    set_has_tensor_type();
    value_.tensor_type_ = CreateMaybeMessage< ::mindspore::irpb::TypeProto_Tensor >(GetArena());
  }
  return value_.tensor_type_;
}
inline ::mindspore::irpb::TypeProto_Tensor* TypeProto::mutable_tensor_type() {
  // @@protoc_insertion_point(field_mutable:mindspore.irpb.TypeProto.tensor_type)
  return _internal_mutable_tensor_type();
}

// .mindspore.irpb.TypeProto.Sequence sequence_type = 3;
inline bool TypeProto::_internal_has_sequence_type() const {
  return value_case() == kSequenceType;
}
inline bool TypeProto::has_sequence_type() const {
  return _internal_has_sequence_type();
}
inline void TypeProto::set_has_sequence_type() {
  _oneof_case_[0] = kSequenceType;
}
inline void TypeProto::clear_sequence_type() {
  if (_internal_has_sequence_type()) {
    if (GetArena() == nullptr) {
      delete value_.sequence_type_;
    }
    clear_has_value();
  }
}
inline ::mindspore::irpb::TypeProto_Sequence* TypeProto::release_sequence_type() {
  // @@protoc_insertion_point(field_release:mindspore.irpb.TypeProto.sequence_type)
  if (_internal_has_sequence_type()) {
    clear_has_value();
      ::mindspore::irpb::TypeProto_Sequence* temp = value_.sequence_type_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.sequence_type_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::mindspore::irpb::TypeProto_Sequence& TypeProto::_internal_sequence_type() const {
  return _internal_has_sequence_type()
      ? *value_.sequence_type_
      : *reinterpret_cast< ::mindspore::irpb::TypeProto_Sequence*>(&::mindspore::irpb::_TypeProto_Sequence_default_instance_);
}
inline const ::mindspore::irpb::TypeProto_Sequence& TypeProto::sequence_type() const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.TypeProto.sequence_type)
  return _internal_sequence_type();
}
inline ::mindspore::irpb::TypeProto_Sequence* TypeProto::unsafe_arena_release_sequence_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mindspore.irpb.TypeProto.sequence_type)
  if (_internal_has_sequence_type()) {
    clear_has_value();
    ::mindspore::irpb::TypeProto_Sequence* temp = value_.sequence_type_;
    value_.sequence_type_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TypeProto::unsafe_arena_set_allocated_sequence_type(::mindspore::irpb::TypeProto_Sequence* sequence_type) {
  clear_value();
  if (sequence_type) {
    set_has_sequence_type();
    value_.sequence_type_ = sequence_type;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mindspore.irpb.TypeProto.sequence_type)
}
inline ::mindspore::irpb::TypeProto_Sequence* TypeProto::_internal_mutable_sequence_type() {
  if (!_internal_has_sequence_type()) {
    clear_value();
    set_has_sequence_type();
    value_.sequence_type_ = CreateMaybeMessage< ::mindspore::irpb::TypeProto_Sequence >(GetArena());
  }
  return value_.sequence_type_;
}
inline ::mindspore::irpb::TypeProto_Sequence* TypeProto::mutable_sequence_type() {
  // @@protoc_insertion_point(field_mutable:mindspore.irpb.TypeProto.sequence_type)
  return _internal_mutable_sequence_type();
}

inline bool TypeProto::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void TypeProto::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline TypeProto::ValueCase TypeProto::value_case() const {
  return TypeProto::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ParameterProto

// optional string name = 1;
inline bool ParameterProto::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ParameterProto::has_name() const {
  return _internal_has_name();
}
inline void ParameterProto::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ParameterProto::name() const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.ParameterProto.name)
  return _internal_name();
}
inline void ParameterProto::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:mindspore.irpb.ParameterProto.name)
}
inline std::string* ParameterProto::mutable_name() {
  // @@protoc_insertion_point(field_mutable:mindspore.irpb.ParameterProto.name)
  return _internal_mutable_name();
}
inline const std::string& ParameterProto::_internal_name() const {
  return name_.Get();
}
inline void ParameterProto::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ParameterProto::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mindspore.irpb.ParameterProto.name)
}
inline void ParameterProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mindspore.irpb.ParameterProto.name)
}
inline void ParameterProto::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mindspore.irpb.ParameterProto.name)
}
inline std::string* ParameterProto::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ParameterProto::release_name() {
  // @@protoc_insertion_point(field_release:mindspore.irpb.ParameterProto.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ParameterProto::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mindspore.irpb.ParameterProto.name)
}

// optional .mindspore.irpb.TypeProto type = 2;
inline bool ParameterProto::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || type_ != nullptr);
  return value;
}
inline bool ParameterProto::has_type() const {
  return _internal_has_type();
}
inline void ParameterProto::clear_type() {
  if (type_ != nullptr) type_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::mindspore::irpb::TypeProto& ParameterProto::_internal_type() const {
  const ::mindspore::irpb::TypeProto* p = type_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mindspore::irpb::TypeProto*>(
      &::mindspore::irpb::_TypeProto_default_instance_);
}
inline const ::mindspore::irpb::TypeProto& ParameterProto::type() const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.ParameterProto.type)
  return _internal_type();
}
inline void ParameterProto::unsafe_arena_set_allocated_type(
    ::mindspore::irpb::TypeProto* type) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(type_);
  }
  type_ = type;
  if (type) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mindspore.irpb.ParameterProto.type)
}
inline ::mindspore::irpb::TypeProto* ParameterProto::release_type() {
  _has_bits_[0] &= ~0x00000002u;
  ::mindspore::irpb::TypeProto* temp = type_;
  type_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mindspore::irpb::TypeProto* ParameterProto::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_release:mindspore.irpb.ParameterProto.type)
  _has_bits_[0] &= ~0x00000002u;
  ::mindspore::irpb::TypeProto* temp = type_;
  type_ = nullptr;
  return temp;
}
inline ::mindspore::irpb::TypeProto* ParameterProto::_internal_mutable_type() {
  _has_bits_[0] |= 0x00000002u;
  if (type_ == nullptr) {
    auto* p = CreateMaybeMessage<::mindspore::irpb::TypeProto>(GetArena());
    type_ = p;
  }
  return type_;
}
inline ::mindspore::irpb::TypeProto* ParameterProto::mutable_type() {
  // @@protoc_insertion_point(field_mutable:mindspore.irpb.ParameterProto.type)
  return _internal_mutable_type();
}
inline void ParameterProto::set_allocated_type(::mindspore::irpb::TypeProto* type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete type_;
  }
  if (type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(type);
    if (message_arena != submessage_arena) {
      type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, type, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  type_ = type;
  // @@protoc_insertion_point(field_set_allocated:mindspore.irpb.ParameterProto.type)
}

// optional .mindspore.irpb.ValueProto default_val = 3;
inline bool ParameterProto::_internal_has_default_val() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || default_val_ != nullptr);
  return value;
}
inline bool ParameterProto::has_default_val() const {
  return _internal_has_default_val();
}
inline void ParameterProto::clear_default_val() {
  if (default_val_ != nullptr) default_val_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::mindspore::irpb::ValueProto& ParameterProto::_internal_default_val() const {
  const ::mindspore::irpb::ValueProto* p = default_val_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mindspore::irpb::ValueProto*>(
      &::mindspore::irpb::_ValueProto_default_instance_);
}
inline const ::mindspore::irpb::ValueProto& ParameterProto::default_val() const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.ParameterProto.default_val)
  return _internal_default_val();
}
inline void ParameterProto::unsafe_arena_set_allocated_default_val(
    ::mindspore::irpb::ValueProto* default_val) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(default_val_);
  }
  default_val_ = default_val;
  if (default_val) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mindspore.irpb.ParameterProto.default_val)
}
inline ::mindspore::irpb::ValueProto* ParameterProto::release_default_val() {
  _has_bits_[0] &= ~0x00000004u;
  ::mindspore::irpb::ValueProto* temp = default_val_;
  default_val_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mindspore::irpb::ValueProto* ParameterProto::unsafe_arena_release_default_val() {
  // @@protoc_insertion_point(field_release:mindspore.irpb.ParameterProto.default_val)
  _has_bits_[0] &= ~0x00000004u;
  ::mindspore::irpb::ValueProto* temp = default_val_;
  default_val_ = nullptr;
  return temp;
}
inline ::mindspore::irpb::ValueProto* ParameterProto::_internal_mutable_default_val() {
  _has_bits_[0] |= 0x00000004u;
  if (default_val_ == nullptr) {
    auto* p = CreateMaybeMessage<::mindspore::irpb::ValueProto>(GetArena());
    default_val_ = p;
  }
  return default_val_;
}
inline ::mindspore::irpb::ValueProto* ParameterProto::mutable_default_val() {
  // @@protoc_insertion_point(field_mutable:mindspore.irpb.ParameterProto.default_val)
  return _internal_mutable_default_val();
}
inline void ParameterProto::set_allocated_default_val(::mindspore::irpb::ValueProto* default_val) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete default_val_;
  }
  if (default_val) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(default_val);
    if (message_arena != submessage_arena) {
      default_val = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, default_val, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  default_val_ = default_val;
  // @@protoc_insertion_point(field_set_allocated:mindspore.irpb.ParameterProto.default_val)
}

// -------------------------------------------------------------------

// OutputProto

// optional string name = 1;
inline bool OutputProto::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool OutputProto::has_name() const {
  return _internal_has_name();
}
inline void OutputProto::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& OutputProto::name() const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.OutputProto.name)
  return _internal_name();
}
inline void OutputProto::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:mindspore.irpb.OutputProto.name)
}
inline std::string* OutputProto::mutable_name() {
  // @@protoc_insertion_point(field_mutable:mindspore.irpb.OutputProto.name)
  return _internal_mutable_name();
}
inline const std::string& OutputProto::_internal_name() const {
  return name_.Get();
}
inline void OutputProto::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OutputProto::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mindspore.irpb.OutputProto.name)
}
inline void OutputProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mindspore.irpb.OutputProto.name)
}
inline void OutputProto::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mindspore.irpb.OutputProto.name)
}
inline std::string* OutputProto::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OutputProto::release_name() {
  // @@protoc_insertion_point(field_release:mindspore.irpb.OutputProto.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OutputProto::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mindspore.irpb.OutputProto.name)
}

// optional .mindspore.irpb.TypeProto type = 2;
inline bool OutputProto::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || type_ != nullptr);
  return value;
}
inline bool OutputProto::has_type() const {
  return _internal_has_type();
}
inline void OutputProto::clear_type() {
  if (type_ != nullptr) type_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::mindspore::irpb::TypeProto& OutputProto::_internal_type() const {
  const ::mindspore::irpb::TypeProto* p = type_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mindspore::irpb::TypeProto*>(
      &::mindspore::irpb::_TypeProto_default_instance_);
}
inline const ::mindspore::irpb::TypeProto& OutputProto::type() const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.OutputProto.type)
  return _internal_type();
}
inline void OutputProto::unsafe_arena_set_allocated_type(
    ::mindspore::irpb::TypeProto* type) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(type_);
  }
  type_ = type;
  if (type) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mindspore.irpb.OutputProto.type)
}
inline ::mindspore::irpb::TypeProto* OutputProto::release_type() {
  _has_bits_[0] &= ~0x00000002u;
  ::mindspore::irpb::TypeProto* temp = type_;
  type_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mindspore::irpb::TypeProto* OutputProto::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_release:mindspore.irpb.OutputProto.type)
  _has_bits_[0] &= ~0x00000002u;
  ::mindspore::irpb::TypeProto* temp = type_;
  type_ = nullptr;
  return temp;
}
inline ::mindspore::irpb::TypeProto* OutputProto::_internal_mutable_type() {
  _has_bits_[0] |= 0x00000002u;
  if (type_ == nullptr) {
    auto* p = CreateMaybeMessage<::mindspore::irpb::TypeProto>(GetArena());
    type_ = p;
  }
  return type_;
}
inline ::mindspore::irpb::TypeProto* OutputProto::mutable_type() {
  // @@protoc_insertion_point(field_mutable:mindspore.irpb.OutputProto.type)
  return _internal_mutable_type();
}
inline void OutputProto::set_allocated_type(::mindspore::irpb::TypeProto* type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete type_;
  }
  if (type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(type);
    if (message_arena != submessage_arena) {
      type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, type, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  type_ = type;
  // @@protoc_insertion_point(field_set_allocated:mindspore.irpb.OutputProto.type)
}

// -------------------------------------------------------------------

// InputProto

// optional string name = 1;
inline bool InputProto::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool InputProto::has_name() const {
  return _internal_has_name();
}
inline void InputProto::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& InputProto::name() const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.InputProto.name)
  return _internal_name();
}
inline void InputProto::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:mindspore.irpb.InputProto.name)
}
inline std::string* InputProto::mutable_name() {
  // @@protoc_insertion_point(field_mutable:mindspore.irpb.InputProto.name)
  return _internal_mutable_name();
}
inline const std::string& InputProto::_internal_name() const {
  return name_.Get();
}
inline void InputProto::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InputProto::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mindspore.irpb.InputProto.name)
}
inline void InputProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mindspore.irpb.InputProto.name)
}
inline void InputProto::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mindspore.irpb.InputProto.name)
}
inline std::string* InputProto::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InputProto::release_name() {
  // @@protoc_insertion_point(field_release:mindspore.irpb.InputProto.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InputProto::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mindspore.irpb.InputProto.name)
}

// optional .mindspore.irpb.InputProto.EdgeType type = 2;
inline bool InputProto::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool InputProto::has_type() const {
  return _internal_has_type();
}
inline void InputProto::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::mindspore::irpb::InputProto_EdgeType InputProto::_internal_type() const {
  return static_cast< ::mindspore::irpb::InputProto_EdgeType >(type_);
}
inline ::mindspore::irpb::InputProto_EdgeType InputProto::type() const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.InputProto.type)
  return _internal_type();
}
inline void InputProto::_internal_set_type(::mindspore::irpb::InputProto_EdgeType value) {
  assert(::mindspore::irpb::InputProto_EdgeType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  type_ = value;
}
inline void InputProto::set_type(::mindspore::irpb::InputProto_EdgeType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:mindspore.irpb.InputProto.type)
}

// -------------------------------------------------------------------

// NodeProto

// repeated .mindspore.irpb.InputProto input = 1;
inline int NodeProto::_internal_input_size() const {
  return input_.size();
}
inline int NodeProto::input_size() const {
  return _internal_input_size();
}
inline void NodeProto::clear_input() {
  input_.Clear();
}
inline ::mindspore::irpb::InputProto* NodeProto::mutable_input(int index) {
  // @@protoc_insertion_point(field_mutable:mindspore.irpb.NodeProto.input)
  return input_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mindspore::irpb::InputProto >*
NodeProto::mutable_input() {
  // @@protoc_insertion_point(field_mutable_list:mindspore.irpb.NodeProto.input)
  return &input_;
}
inline const ::mindspore::irpb::InputProto& NodeProto::_internal_input(int index) const {
  return input_.Get(index);
}
inline const ::mindspore::irpb::InputProto& NodeProto::input(int index) const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.NodeProto.input)
  return _internal_input(index);
}
inline ::mindspore::irpb::InputProto* NodeProto::_internal_add_input() {
  return input_.Add();
}
inline ::mindspore::irpb::InputProto* NodeProto::add_input() {
  // @@protoc_insertion_point(field_add:mindspore.irpb.NodeProto.input)
  return _internal_add_input();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mindspore::irpb::InputProto >&
NodeProto::input() const {
  // @@protoc_insertion_point(field_list:mindspore.irpb.NodeProto.input)
  return input_;
}

// optional string name = 2;
inline bool NodeProto::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NodeProto::has_name() const {
  return _internal_has_name();
}
inline void NodeProto::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NodeProto::name() const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.NodeProto.name)
  return _internal_name();
}
inline void NodeProto::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:mindspore.irpb.NodeProto.name)
}
inline std::string* NodeProto::mutable_name() {
  // @@protoc_insertion_point(field_mutable:mindspore.irpb.NodeProto.name)
  return _internal_mutable_name();
}
inline const std::string& NodeProto::_internal_name() const {
  return name_.Get();
}
inline void NodeProto::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NodeProto::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mindspore.irpb.NodeProto.name)
}
inline void NodeProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mindspore.irpb.NodeProto.name)
}
inline void NodeProto::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mindspore.irpb.NodeProto.name)
}
inline std::string* NodeProto::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NodeProto::release_name() {
  // @@protoc_insertion_point(field_release:mindspore.irpb.NodeProto.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NodeProto::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mindspore.irpb.NodeProto.name)
}

// optional string op_type = 3;
inline bool NodeProto::_internal_has_op_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NodeProto::has_op_type() const {
  return _internal_has_op_type();
}
inline void NodeProto::clear_op_type() {
  op_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& NodeProto::op_type() const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.NodeProto.op_type)
  return _internal_op_type();
}
inline void NodeProto::set_op_type(const std::string& value) {
  _internal_set_op_type(value);
  // @@protoc_insertion_point(field_set:mindspore.irpb.NodeProto.op_type)
}
inline std::string* NodeProto::mutable_op_type() {
  // @@protoc_insertion_point(field_mutable:mindspore.irpb.NodeProto.op_type)
  return _internal_mutable_op_type();
}
inline const std::string& NodeProto::_internal_op_type() const {
  return op_type_.Get();
}
inline void NodeProto::_internal_set_op_type(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  op_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NodeProto::set_op_type(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  op_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mindspore.irpb.NodeProto.op_type)
}
inline void NodeProto::set_op_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  op_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mindspore.irpb.NodeProto.op_type)
}
inline void NodeProto::set_op_type(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  op_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mindspore.irpb.NodeProto.op_type)
}
inline std::string* NodeProto::_internal_mutable_op_type() {
  _has_bits_[0] |= 0x00000002u;
  return op_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NodeProto::release_op_type() {
  // @@protoc_insertion_point(field_release:mindspore.irpb.NodeProto.op_type)
  if (!_internal_has_op_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return op_type_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NodeProto::set_allocated_op_type(std::string* op_type) {
  if (op_type != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  op_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), op_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mindspore.irpb.NodeProto.op_type)
}

// optional string scope = 4;
inline bool NodeProto::_internal_has_scope() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool NodeProto::has_scope() const {
  return _internal_has_scope();
}
inline void NodeProto::clear_scope() {
  scope_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& NodeProto::scope() const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.NodeProto.scope)
  return _internal_scope();
}
inline void NodeProto::set_scope(const std::string& value) {
  _internal_set_scope(value);
  // @@protoc_insertion_point(field_set:mindspore.irpb.NodeProto.scope)
}
inline std::string* NodeProto::mutable_scope() {
  // @@protoc_insertion_point(field_mutable:mindspore.irpb.NodeProto.scope)
  return _internal_mutable_scope();
}
inline const std::string& NodeProto::_internal_scope() const {
  return scope_.Get();
}
inline void NodeProto::_internal_set_scope(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  scope_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NodeProto::set_scope(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  scope_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mindspore.irpb.NodeProto.scope)
}
inline void NodeProto::set_scope(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  scope_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mindspore.irpb.NodeProto.scope)
}
inline void NodeProto::set_scope(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  scope_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mindspore.irpb.NodeProto.scope)
}
inline std::string* NodeProto::_internal_mutable_scope() {
  _has_bits_[0] |= 0x00000004u;
  return scope_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NodeProto::release_scope() {
  // @@protoc_insertion_point(field_release:mindspore.irpb.NodeProto.scope)
  if (!_internal_has_scope()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return scope_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NodeProto::set_allocated_scope(std::string* scope) {
  if (scope != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  scope_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scope,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mindspore.irpb.NodeProto.scope)
}

// repeated .mindspore.irpb.AttributeProto attribute = 5;
inline int NodeProto::_internal_attribute_size() const {
  return attribute_.size();
}
inline int NodeProto::attribute_size() const {
  return _internal_attribute_size();
}
inline void NodeProto::clear_attribute() {
  attribute_.Clear();
}
inline ::mindspore::irpb::AttributeProto* NodeProto::mutable_attribute(int index) {
  // @@protoc_insertion_point(field_mutable:mindspore.irpb.NodeProto.attribute)
  return attribute_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mindspore::irpb::AttributeProto >*
NodeProto::mutable_attribute() {
  // @@protoc_insertion_point(field_mutable_list:mindspore.irpb.NodeProto.attribute)
  return &attribute_;
}
inline const ::mindspore::irpb::AttributeProto& NodeProto::_internal_attribute(int index) const {
  return attribute_.Get(index);
}
inline const ::mindspore::irpb::AttributeProto& NodeProto::attribute(int index) const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.NodeProto.attribute)
  return _internal_attribute(index);
}
inline ::mindspore::irpb::AttributeProto* NodeProto::_internal_add_attribute() {
  return attribute_.Add();
}
inline ::mindspore::irpb::AttributeProto* NodeProto::add_attribute() {
  // @@protoc_insertion_point(field_add:mindspore.irpb.NodeProto.attribute)
  return _internal_add_attribute();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mindspore::irpb::AttributeProto >&
NodeProto::attribute() const {
  // @@protoc_insertion_point(field_list:mindspore.irpb.NodeProto.attribute)
  return attribute_;
}

// optional .mindspore.irpb.TypeProto output_type = 6;
inline bool NodeProto::_internal_has_output_type() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || output_type_ != nullptr);
  return value;
}
inline bool NodeProto::has_output_type() const {
  return _internal_has_output_type();
}
inline void NodeProto::clear_output_type() {
  if (output_type_ != nullptr) output_type_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::mindspore::irpb::TypeProto& NodeProto::_internal_output_type() const {
  const ::mindspore::irpb::TypeProto* p = output_type_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mindspore::irpb::TypeProto*>(
      &::mindspore::irpb::_TypeProto_default_instance_);
}
inline const ::mindspore::irpb::TypeProto& NodeProto::output_type() const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.NodeProto.output_type)
  return _internal_output_type();
}
inline void NodeProto::unsafe_arena_set_allocated_output_type(
    ::mindspore::irpb::TypeProto* output_type) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_type_);
  }
  output_type_ = output_type;
  if (output_type) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mindspore.irpb.NodeProto.output_type)
}
inline ::mindspore::irpb::TypeProto* NodeProto::release_output_type() {
  _has_bits_[0] &= ~0x00000020u;
  ::mindspore::irpb::TypeProto* temp = output_type_;
  output_type_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mindspore::irpb::TypeProto* NodeProto::unsafe_arena_release_output_type() {
  // @@protoc_insertion_point(field_release:mindspore.irpb.NodeProto.output_type)
  _has_bits_[0] &= ~0x00000020u;
  ::mindspore::irpb::TypeProto* temp = output_type_;
  output_type_ = nullptr;
  return temp;
}
inline ::mindspore::irpb::TypeProto* NodeProto::_internal_mutable_output_type() {
  _has_bits_[0] |= 0x00000020u;
  if (output_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::mindspore::irpb::TypeProto>(GetArena());
    output_type_ = p;
  }
  return output_type_;
}
inline ::mindspore::irpb::TypeProto* NodeProto::mutable_output_type() {
  // @@protoc_insertion_point(field_mutable:mindspore.irpb.NodeProto.output_type)
  return _internal_mutable_output_type();
}
inline void NodeProto::set_allocated_output_type(::mindspore::irpb::TypeProto* output_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete output_type_;
  }
  if (output_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(output_type);
    if (message_arena != submessage_arena) {
      output_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, output_type, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  output_type_ = output_type;
  // @@protoc_insertion_point(field_set_allocated:mindspore.irpb.NodeProto.output_type)
}

// optional uint64 output_i = 7;
inline bool NodeProto::_internal_has_output_i() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool NodeProto::has_output_i() const {
  return _internal_has_output_i();
}
inline void NodeProto::clear_output_i() {
  output_i_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NodeProto::_internal_output_i() const {
  return output_i_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NodeProto::output_i() const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.NodeProto.output_i)
  return _internal_output_i();
}
inline void NodeProto::_internal_set_output_i(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  output_i_ = value;
}
inline void NodeProto::set_output_i(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_output_i(value);
  // @@protoc_insertion_point(field_set:mindspore.irpb.NodeProto.output_i)
}

// optional string full_name = 8;
inline bool NodeProto::_internal_has_full_name() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool NodeProto::has_full_name() const {
  return _internal_has_full_name();
}
inline void NodeProto::clear_full_name() {
  full_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& NodeProto::full_name() const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.NodeProto.full_name)
  return _internal_full_name();
}
inline void NodeProto::set_full_name(const std::string& value) {
  _internal_set_full_name(value);
  // @@protoc_insertion_point(field_set:mindspore.irpb.NodeProto.full_name)
}
inline std::string* NodeProto::mutable_full_name() {
  // @@protoc_insertion_point(field_mutable:mindspore.irpb.NodeProto.full_name)
  return _internal_mutable_full_name();
}
inline const std::string& NodeProto::_internal_full_name() const {
  return full_name_.Get();
}
inline void NodeProto::_internal_set_full_name(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  full_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NodeProto::set_full_name(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  full_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mindspore.irpb.NodeProto.full_name)
}
inline void NodeProto::set_full_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  full_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mindspore.irpb.NodeProto.full_name)
}
inline void NodeProto::set_full_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  full_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mindspore.irpb.NodeProto.full_name)
}
inline std::string* NodeProto::_internal_mutable_full_name() {
  _has_bits_[0] |= 0x00000008u;
  return full_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NodeProto::release_full_name() {
  // @@protoc_insertion_point(field_release:mindspore.irpb.NodeProto.full_name)
  if (!_internal_has_full_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return full_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NodeProto::set_allocated_full_name(std::string* full_name) {
  if (full_name != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  full_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), full_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mindspore.irpb.NodeProto.full_name)
}

// optional string instance_name = 10;
inline bool NodeProto::_internal_has_instance_name() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool NodeProto::has_instance_name() const {
  return _internal_has_instance_name();
}
inline void NodeProto::clear_instance_name() {
  instance_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& NodeProto::instance_name() const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.NodeProto.instance_name)
  return _internal_instance_name();
}
inline void NodeProto::set_instance_name(const std::string& value) {
  _internal_set_instance_name(value);
  // @@protoc_insertion_point(field_set:mindspore.irpb.NodeProto.instance_name)
}
inline std::string* NodeProto::mutable_instance_name() {
  // @@protoc_insertion_point(field_mutable:mindspore.irpb.NodeProto.instance_name)
  return _internal_mutable_instance_name();
}
inline const std::string& NodeProto::_internal_instance_name() const {
  return instance_name_.Get();
}
inline void NodeProto::_internal_set_instance_name(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  instance_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NodeProto::set_instance_name(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  instance_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mindspore.irpb.NodeProto.instance_name)
}
inline void NodeProto::set_instance_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  instance_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mindspore.irpb.NodeProto.instance_name)
}
inline void NodeProto::set_instance_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  instance_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mindspore.irpb.NodeProto.instance_name)
}
inline std::string* NodeProto::_internal_mutable_instance_name() {
  _has_bits_[0] |= 0x00000010u;
  return instance_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NodeProto::release_instance_name() {
  // @@protoc_insertion_point(field_release:mindspore.irpb.NodeProto.instance_name)
  if (!_internal_has_instance_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return instance_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NodeProto::set_allocated_instance_name(std::string* instance_name) {
  if (instance_name != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  instance_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), instance_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mindspore.irpb.NodeProto.instance_name)
}

// -------------------------------------------------------------------

// ModelProto

// optional int64 ir_version = 1;
inline bool ModelProto::_internal_has_ir_version() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ModelProto::has_ir_version() const {
  return _internal_has_ir_version();
}
inline void ModelProto::clear_ir_version() {
  ir_version_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ModelProto::_internal_ir_version() const {
  return ir_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ModelProto::ir_version() const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.ModelProto.ir_version)
  return _internal_ir_version();
}
inline void ModelProto::_internal_set_ir_version(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  ir_version_ = value;
}
inline void ModelProto::set_ir_version(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_ir_version(value);
  // @@protoc_insertion_point(field_set:mindspore.irpb.ModelProto.ir_version)
}

// optional string domain = 2;
inline bool ModelProto::_internal_has_domain() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ModelProto::has_domain() const {
  return _internal_has_domain();
}
inline void ModelProto::clear_domain() {
  domain_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ModelProto::domain() const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.ModelProto.domain)
  return _internal_domain();
}
inline void ModelProto::set_domain(const std::string& value) {
  _internal_set_domain(value);
  // @@protoc_insertion_point(field_set:mindspore.irpb.ModelProto.domain)
}
inline std::string* ModelProto::mutable_domain() {
  // @@protoc_insertion_point(field_mutable:mindspore.irpb.ModelProto.domain)
  return _internal_mutable_domain();
}
inline const std::string& ModelProto::_internal_domain() const {
  return domain_.Get();
}
inline void ModelProto::_internal_set_domain(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  domain_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ModelProto::set_domain(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  domain_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mindspore.irpb.ModelProto.domain)
}
inline void ModelProto::set_domain(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  domain_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mindspore.irpb.ModelProto.domain)
}
inline void ModelProto::set_domain(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  domain_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mindspore.irpb.ModelProto.domain)
}
inline std::string* ModelProto::_internal_mutable_domain() {
  _has_bits_[0] |= 0x00000001u;
  return domain_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ModelProto::release_domain() {
  // @@protoc_insertion_point(field_release:mindspore.irpb.ModelProto.domain)
  if (!_internal_has_domain()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return domain_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ModelProto::set_allocated_domain(std::string* domain) {
  if (domain != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  domain_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), domain,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mindspore.irpb.ModelProto.domain)
}

// optional int64 model_version = 3;
inline bool ModelProto::_internal_has_model_version() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ModelProto::has_model_version() const {
  return _internal_has_model_version();
}
inline void ModelProto::clear_model_version() {
  model_version_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ModelProto::_internal_model_version() const {
  return model_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ModelProto::model_version() const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.ModelProto.model_version)
  return _internal_model_version();
}
inline void ModelProto::_internal_set_model_version(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  model_version_ = value;
}
inline void ModelProto::set_model_version(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_model_version(value);
  // @@protoc_insertion_point(field_set:mindspore.irpb.ModelProto.model_version)
}

// optional .mindspore.irpb.GraphProto graph = 4;
inline bool ModelProto::_internal_has_graph() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || graph_ != nullptr);
  return value;
}
inline bool ModelProto::has_graph() const {
  return _internal_has_graph();
}
inline void ModelProto::clear_graph() {
  if (graph_ != nullptr) graph_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::mindspore::irpb::GraphProto& ModelProto::_internal_graph() const {
  const ::mindspore::irpb::GraphProto* p = graph_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mindspore::irpb::GraphProto*>(
      &::mindspore::irpb::_GraphProto_default_instance_);
}
inline const ::mindspore::irpb::GraphProto& ModelProto::graph() const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.ModelProto.graph)
  return _internal_graph();
}
inline void ModelProto::unsafe_arena_set_allocated_graph(
    ::mindspore::irpb::GraphProto* graph) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(graph_);
  }
  graph_ = graph;
  if (graph) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mindspore.irpb.ModelProto.graph)
}
inline ::mindspore::irpb::GraphProto* ModelProto::release_graph() {
  _has_bits_[0] &= ~0x00000002u;
  ::mindspore::irpb::GraphProto* temp = graph_;
  graph_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mindspore::irpb::GraphProto* ModelProto::unsafe_arena_release_graph() {
  // @@protoc_insertion_point(field_release:mindspore.irpb.ModelProto.graph)
  _has_bits_[0] &= ~0x00000002u;
  ::mindspore::irpb::GraphProto* temp = graph_;
  graph_ = nullptr;
  return temp;
}
inline ::mindspore::irpb::GraphProto* ModelProto::_internal_mutable_graph() {
  _has_bits_[0] |= 0x00000002u;
  if (graph_ == nullptr) {
    auto* p = CreateMaybeMessage<::mindspore::irpb::GraphProto>(GetArena());
    graph_ = p;
  }
  return graph_;
}
inline ::mindspore::irpb::GraphProto* ModelProto::mutable_graph() {
  // @@protoc_insertion_point(field_mutable:mindspore.irpb.ModelProto.graph)
  return _internal_mutable_graph();
}
inline void ModelProto::set_allocated_graph(::mindspore::irpb::GraphProto* graph) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete graph_;
  }
  if (graph) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(graph);
    if (message_arena != submessage_arena) {
      graph = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, graph, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  graph_ = graph;
  // @@protoc_insertion_point(field_set_allocated:mindspore.irpb.ModelProto.graph)
}

// optional .mindspore.irpb.OperatorSetProto metadata_operators = 5;
inline bool ModelProto::_internal_has_metadata_operators() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || metadata_operators_ != nullptr);
  return value;
}
inline bool ModelProto::has_metadata_operators() const {
  return _internal_has_metadata_operators();
}
inline void ModelProto::clear_metadata_operators() {
  if (metadata_operators_ != nullptr) metadata_operators_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::mindspore::irpb::OperatorSetProto& ModelProto::_internal_metadata_operators() const {
  const ::mindspore::irpb::OperatorSetProto* p = metadata_operators_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mindspore::irpb::OperatorSetProto*>(
      &::mindspore::irpb::_OperatorSetProto_default_instance_);
}
inline const ::mindspore::irpb::OperatorSetProto& ModelProto::metadata_operators() const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.ModelProto.metadata_operators)
  return _internal_metadata_operators();
}
inline void ModelProto::unsafe_arena_set_allocated_metadata_operators(
    ::mindspore::irpb::OperatorSetProto* metadata_operators) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_operators_);
  }
  metadata_operators_ = metadata_operators;
  if (metadata_operators) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mindspore.irpb.ModelProto.metadata_operators)
}
inline ::mindspore::irpb::OperatorSetProto* ModelProto::release_metadata_operators() {
  _has_bits_[0] &= ~0x00000004u;
  ::mindspore::irpb::OperatorSetProto* temp = metadata_operators_;
  metadata_operators_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mindspore::irpb::OperatorSetProto* ModelProto::unsafe_arena_release_metadata_operators() {
  // @@protoc_insertion_point(field_release:mindspore.irpb.ModelProto.metadata_operators)
  _has_bits_[0] &= ~0x00000004u;
  ::mindspore::irpb::OperatorSetProto* temp = metadata_operators_;
  metadata_operators_ = nullptr;
  return temp;
}
inline ::mindspore::irpb::OperatorSetProto* ModelProto::_internal_mutable_metadata_operators() {
  _has_bits_[0] |= 0x00000004u;
  if (metadata_operators_ == nullptr) {
    auto* p = CreateMaybeMessage<::mindspore::irpb::OperatorSetProto>(GetArena());
    metadata_operators_ = p;
  }
  return metadata_operators_;
}
inline ::mindspore::irpb::OperatorSetProto* ModelProto::mutable_metadata_operators() {
  // @@protoc_insertion_point(field_mutable:mindspore.irpb.ModelProto.metadata_operators)
  return _internal_mutable_metadata_operators();
}
inline void ModelProto::set_allocated_metadata_operators(::mindspore::irpb::OperatorSetProto* metadata_operators) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete metadata_operators_;
  }
  if (metadata_operators) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(metadata_operators);
    if (message_arena != submessage_arena) {
      metadata_operators = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata_operators, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  metadata_operators_ = metadata_operators;
  // @@protoc_insertion_point(field_set_allocated:mindspore.irpb.ModelProto.metadata_operators)
}

// -------------------------------------------------------------------

// OperatorProto

// optional string name = 1;
inline bool OperatorProto::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool OperatorProto::has_name() const {
  return _internal_has_name();
}
inline void OperatorProto::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& OperatorProto::name() const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.OperatorProto.name)
  return _internal_name();
}
inline void OperatorProto::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:mindspore.irpb.OperatorProto.name)
}
inline std::string* OperatorProto::mutable_name() {
  // @@protoc_insertion_point(field_mutable:mindspore.irpb.OperatorProto.name)
  return _internal_mutable_name();
}
inline const std::string& OperatorProto::_internal_name() const {
  return name_.Get();
}
inline void OperatorProto::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OperatorProto::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mindspore.irpb.OperatorProto.name)
}
inline void OperatorProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mindspore.irpb.OperatorProto.name)
}
inline void OperatorProto::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mindspore.irpb.OperatorProto.name)
}
inline std::string* OperatorProto::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OperatorProto::release_name() {
  // @@protoc_insertion_point(field_release:mindspore.irpb.OperatorProto.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OperatorProto::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mindspore.irpb.OperatorProto.name)
}

// optional bytes config = 2;
inline bool OperatorProto::_internal_has_config() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool OperatorProto::has_config() const {
  return _internal_has_config();
}
inline void OperatorProto::clear_config() {
  config_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& OperatorProto::config() const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.OperatorProto.config)
  return _internal_config();
}
inline void OperatorProto::set_config(const std::string& value) {
  _internal_set_config(value);
  // @@protoc_insertion_point(field_set:mindspore.irpb.OperatorProto.config)
}
inline std::string* OperatorProto::mutable_config() {
  // @@protoc_insertion_point(field_mutable:mindspore.irpb.OperatorProto.config)
  return _internal_mutable_config();
}
inline const std::string& OperatorProto::_internal_config() const {
  return config_.Get();
}
inline void OperatorProto::_internal_set_config(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  config_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OperatorProto::set_config(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  config_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mindspore.irpb.OperatorProto.config)
}
inline void OperatorProto::set_config(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  config_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mindspore.irpb.OperatorProto.config)
}
inline void OperatorProto::set_config(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  config_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mindspore.irpb.OperatorProto.config)
}
inline std::string* OperatorProto::_internal_mutable_config() {
  _has_bits_[0] |= 0x00000002u;
  return config_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OperatorProto::release_config() {
  // @@protoc_insertion_point(field_release:mindspore.irpb.OperatorProto.config)
  if (!_internal_has_config()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return config_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OperatorProto::set_allocated_config(std::string* config) {
  if (config != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  config_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), config,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mindspore.irpb.OperatorProto.config)
}

// optional bytes obj_info = 3;
inline bool OperatorProto::_internal_has_obj_info() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool OperatorProto::has_obj_info() const {
  return _internal_has_obj_info();
}
inline void OperatorProto::clear_obj_info() {
  obj_info_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& OperatorProto::obj_info() const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.OperatorProto.obj_info)
  return _internal_obj_info();
}
inline void OperatorProto::set_obj_info(const std::string& value) {
  _internal_set_obj_info(value);
  // @@protoc_insertion_point(field_set:mindspore.irpb.OperatorProto.obj_info)
}
inline std::string* OperatorProto::mutable_obj_info() {
  // @@protoc_insertion_point(field_mutable:mindspore.irpb.OperatorProto.obj_info)
  return _internal_mutable_obj_info();
}
inline const std::string& OperatorProto::_internal_obj_info() const {
  return obj_info_.Get();
}
inline void OperatorProto::_internal_set_obj_info(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  obj_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OperatorProto::set_obj_info(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  obj_info_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mindspore.irpb.OperatorProto.obj_info)
}
inline void OperatorProto::set_obj_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  obj_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mindspore.irpb.OperatorProto.obj_info)
}
inline void OperatorProto::set_obj_info(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  obj_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mindspore.irpb.OperatorProto.obj_info)
}
inline std::string* OperatorProto::_internal_mutable_obj_info() {
  _has_bits_[0] |= 0x00000004u;
  return obj_info_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OperatorProto::release_obj_info() {
  // @@protoc_insertion_point(field_release:mindspore.irpb.OperatorProto.obj_info)
  if (!_internal_has_obj_info()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return obj_info_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OperatorProto::set_allocated_obj_info(std::string* obj_info) {
  if (obj_info != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  obj_info_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), obj_info,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mindspore.irpb.OperatorProto.obj_info)
}

// -------------------------------------------------------------------

// OperatorSetProto

// repeated .mindspore.irpb.OperatorProto operators = 1;
inline int OperatorSetProto::_internal_operators_size() const {
  return operators_.size();
}
inline int OperatorSetProto::operators_size() const {
  return _internal_operators_size();
}
inline void OperatorSetProto::clear_operators() {
  operators_.Clear();
}
inline ::mindspore::irpb::OperatorProto* OperatorSetProto::mutable_operators(int index) {
  // @@protoc_insertion_point(field_mutable:mindspore.irpb.OperatorSetProto.operators)
  return operators_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mindspore::irpb::OperatorProto >*
OperatorSetProto::mutable_operators() {
  // @@protoc_insertion_point(field_mutable_list:mindspore.irpb.OperatorSetProto.operators)
  return &operators_;
}
inline const ::mindspore::irpb::OperatorProto& OperatorSetProto::_internal_operators(int index) const {
  return operators_.Get(index);
}
inline const ::mindspore::irpb::OperatorProto& OperatorSetProto::operators(int index) const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.OperatorSetProto.operators)
  return _internal_operators(index);
}
inline ::mindspore::irpb::OperatorProto* OperatorSetProto::_internal_add_operators() {
  return operators_.Add();
}
inline ::mindspore::irpb::OperatorProto* OperatorSetProto::add_operators() {
  // @@protoc_insertion_point(field_add:mindspore.irpb.OperatorSetProto.operators)
  return _internal_add_operators();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mindspore::irpb::OperatorProto >&
OperatorSetProto::operators() const {
  // @@protoc_insertion_point(field_list:mindspore.irpb.OperatorSetProto.operators)
  return operators_;
}

// optional string summary = 2;
inline bool OperatorSetProto::_internal_has_summary() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool OperatorSetProto::has_summary() const {
  return _internal_has_summary();
}
inline void OperatorSetProto::clear_summary() {
  summary_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& OperatorSetProto::summary() const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.OperatorSetProto.summary)
  return _internal_summary();
}
inline void OperatorSetProto::set_summary(const std::string& value) {
  _internal_set_summary(value);
  // @@protoc_insertion_point(field_set:mindspore.irpb.OperatorSetProto.summary)
}
inline std::string* OperatorSetProto::mutable_summary() {
  // @@protoc_insertion_point(field_mutable:mindspore.irpb.OperatorSetProto.summary)
  return _internal_mutable_summary();
}
inline const std::string& OperatorSetProto::_internal_summary() const {
  return summary_.Get();
}
inline void OperatorSetProto::_internal_set_summary(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  summary_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OperatorSetProto::set_summary(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  summary_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mindspore.irpb.OperatorSetProto.summary)
}
inline void OperatorSetProto::set_summary(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  summary_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mindspore.irpb.OperatorSetProto.summary)
}
inline void OperatorSetProto::set_summary(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  summary_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mindspore.irpb.OperatorSetProto.summary)
}
inline std::string* OperatorSetProto::_internal_mutable_summary() {
  _has_bits_[0] |= 0x00000001u;
  return summary_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OperatorSetProto::release_summary() {
  // @@protoc_insertion_point(field_release:mindspore.irpb.OperatorSetProto.summary)
  if (!_internal_has_summary()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return summary_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OperatorSetProto::set_allocated_summary(std::string* summary) {
  if (summary != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  summary_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), summary,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mindspore.irpb.OperatorSetProto.summary)
}

// -------------------------------------------------------------------

// GraphProto

// repeated .mindspore.irpb.NodeProto node = 1;
inline int GraphProto::_internal_node_size() const {
  return node_.size();
}
inline int GraphProto::node_size() const {
  return _internal_node_size();
}
inline void GraphProto::clear_node() {
  node_.Clear();
}
inline ::mindspore::irpb::NodeProto* GraphProto::mutable_node(int index) {
  // @@protoc_insertion_point(field_mutable:mindspore.irpb.GraphProto.node)
  return node_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mindspore::irpb::NodeProto >*
GraphProto::mutable_node() {
  // @@protoc_insertion_point(field_mutable_list:mindspore.irpb.GraphProto.node)
  return &node_;
}
inline const ::mindspore::irpb::NodeProto& GraphProto::_internal_node(int index) const {
  return node_.Get(index);
}
inline const ::mindspore::irpb::NodeProto& GraphProto::node(int index) const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.GraphProto.node)
  return _internal_node(index);
}
inline ::mindspore::irpb::NodeProto* GraphProto::_internal_add_node() {
  return node_.Add();
}
inline ::mindspore::irpb::NodeProto* GraphProto::add_node() {
  // @@protoc_insertion_point(field_add:mindspore.irpb.GraphProto.node)
  return _internal_add_node();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mindspore::irpb::NodeProto >&
GraphProto::node() const {
  // @@protoc_insertion_point(field_list:mindspore.irpb.GraphProto.node)
  return node_;
}

// optional string name = 2;
inline bool GraphProto::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GraphProto::has_name() const {
  return _internal_has_name();
}
inline void GraphProto::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GraphProto::name() const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.GraphProto.name)
  return _internal_name();
}
inline void GraphProto::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:mindspore.irpb.GraphProto.name)
}
inline std::string* GraphProto::mutable_name() {
  // @@protoc_insertion_point(field_mutable:mindspore.irpb.GraphProto.name)
  return _internal_mutable_name();
}
inline const std::string& GraphProto::_internal_name() const {
  return name_.Get();
}
inline void GraphProto::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GraphProto::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mindspore.irpb.GraphProto.name)
}
inline void GraphProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mindspore.irpb.GraphProto.name)
}
inline void GraphProto::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mindspore.irpb.GraphProto.name)
}
inline std::string* GraphProto::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GraphProto::release_name() {
  // @@protoc_insertion_point(field_release:mindspore.irpb.GraphProto.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GraphProto::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mindspore.irpb.GraphProto.name)
}

// repeated .mindspore.irpb.ParameterProto parameters = 3;
inline int GraphProto::_internal_parameters_size() const {
  return parameters_.size();
}
inline int GraphProto::parameters_size() const {
  return _internal_parameters_size();
}
inline void GraphProto::clear_parameters() {
  parameters_.Clear();
}
inline ::mindspore::irpb::ParameterProto* GraphProto::mutable_parameters(int index) {
  // @@protoc_insertion_point(field_mutable:mindspore.irpb.GraphProto.parameters)
  return parameters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mindspore::irpb::ParameterProto >*
GraphProto::mutable_parameters() {
  // @@protoc_insertion_point(field_mutable_list:mindspore.irpb.GraphProto.parameters)
  return &parameters_;
}
inline const ::mindspore::irpb::ParameterProto& GraphProto::_internal_parameters(int index) const {
  return parameters_.Get(index);
}
inline const ::mindspore::irpb::ParameterProto& GraphProto::parameters(int index) const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.GraphProto.parameters)
  return _internal_parameters(index);
}
inline ::mindspore::irpb::ParameterProto* GraphProto::_internal_add_parameters() {
  return parameters_.Add();
}
inline ::mindspore::irpb::ParameterProto* GraphProto::add_parameters() {
  // @@protoc_insertion_point(field_add:mindspore.irpb.GraphProto.parameters)
  return _internal_add_parameters();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mindspore::irpb::ParameterProto >&
GraphProto::parameters() const {
  // @@protoc_insertion_point(field_list:mindspore.irpb.GraphProto.parameters)
  return parameters_;
}

// repeated .mindspore.irpb.OutputProto outputs = 4;
inline int GraphProto::_internal_outputs_size() const {
  return outputs_.size();
}
inline int GraphProto::outputs_size() const {
  return _internal_outputs_size();
}
inline void GraphProto::clear_outputs() {
  outputs_.Clear();
}
inline ::mindspore::irpb::OutputProto* GraphProto::mutable_outputs(int index) {
  // @@protoc_insertion_point(field_mutable:mindspore.irpb.GraphProto.outputs)
  return outputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mindspore::irpb::OutputProto >*
GraphProto::mutable_outputs() {
  // @@protoc_insertion_point(field_mutable_list:mindspore.irpb.GraphProto.outputs)
  return &outputs_;
}
inline const ::mindspore::irpb::OutputProto& GraphProto::_internal_outputs(int index) const {
  return outputs_.Get(index);
}
inline const ::mindspore::irpb::OutputProto& GraphProto::outputs(int index) const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.GraphProto.outputs)
  return _internal_outputs(index);
}
inline ::mindspore::irpb::OutputProto* GraphProto::_internal_add_outputs() {
  return outputs_.Add();
}
inline ::mindspore::irpb::OutputProto* GraphProto::add_outputs() {
  // @@protoc_insertion_point(field_add:mindspore.irpb.GraphProto.outputs)
  return _internal_add_outputs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mindspore::irpb::OutputProto >&
GraphProto::outputs() const {
  // @@protoc_insertion_point(field_list:mindspore.irpb.GraphProto.outputs)
  return outputs_;
}

// repeated .mindspore.irpb.NamedValueProto const_vals = 5;
inline int GraphProto::_internal_const_vals_size() const {
  return const_vals_.size();
}
inline int GraphProto::const_vals_size() const {
  return _internal_const_vals_size();
}
inline void GraphProto::clear_const_vals() {
  const_vals_.Clear();
}
inline ::mindspore::irpb::NamedValueProto* GraphProto::mutable_const_vals(int index) {
  // @@protoc_insertion_point(field_mutable:mindspore.irpb.GraphProto.const_vals)
  return const_vals_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mindspore::irpb::NamedValueProto >*
GraphProto::mutable_const_vals() {
  // @@protoc_insertion_point(field_mutable_list:mindspore.irpb.GraphProto.const_vals)
  return &const_vals_;
}
inline const ::mindspore::irpb::NamedValueProto& GraphProto::_internal_const_vals(int index) const {
  return const_vals_.Get(index);
}
inline const ::mindspore::irpb::NamedValueProto& GraphProto::const_vals(int index) const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.GraphProto.const_vals)
  return _internal_const_vals(index);
}
inline ::mindspore::irpb::NamedValueProto* GraphProto::_internal_add_const_vals() {
  return const_vals_.Add();
}
inline ::mindspore::irpb::NamedValueProto* GraphProto::add_const_vals() {
  // @@protoc_insertion_point(field_add:mindspore.irpb.GraphProto.const_vals)
  return _internal_add_const_vals();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mindspore::irpb::NamedValueProto >&
GraphProto::const_vals() const {
  // @@protoc_insertion_point(field_list:mindspore.irpb.GraphProto.const_vals)
  return const_vals_;
}

// -------------------------------------------------------------------

// TensorProto

// repeated int64 dims = 1;
inline int TensorProto::_internal_dims_size() const {
  return dims_.size();
}
inline int TensorProto::dims_size() const {
  return _internal_dims_size();
}
inline void TensorProto::clear_dims() {
  dims_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TensorProto::_internal_dims(int index) const {
  return dims_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TensorProto::dims(int index) const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.TensorProto.dims)
  return _internal_dims(index);
}
inline void TensorProto::set_dims(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  dims_.Set(index, value);
  // @@protoc_insertion_point(field_set:mindspore.irpb.TensorProto.dims)
}
inline void TensorProto::_internal_add_dims(::PROTOBUF_NAMESPACE_ID::int64 value) {
  dims_.Add(value);
}
inline void TensorProto::add_dims(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_dims(value);
  // @@protoc_insertion_point(field_add:mindspore.irpb.TensorProto.dims)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
TensorProto::_internal_dims() const {
  return dims_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
TensorProto::dims() const {
  // @@protoc_insertion_point(field_list:mindspore.irpb.TensorProto.dims)
  return _internal_dims();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
TensorProto::_internal_mutable_dims() {
  return &dims_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
TensorProto::mutable_dims() {
  // @@protoc_insertion_point(field_mutable_list:mindspore.irpb.TensorProto.dims)
  return _internal_mutable_dims();
}

// optional .mindspore.irpb.DataType data_type = 2;
inline bool TensorProto::_internal_has_data_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TensorProto::has_data_type() const {
  return _internal_has_data_type();
}
inline void TensorProto::clear_data_type() {
  data_type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::mindspore::irpb::DataType TensorProto::_internal_data_type() const {
  return static_cast< ::mindspore::irpb::DataType >(data_type_);
}
inline ::mindspore::irpb::DataType TensorProto::data_type() const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.TensorProto.data_type)
  return _internal_data_type();
}
inline void TensorProto::_internal_set_data_type(::mindspore::irpb::DataType value) {
  assert(::mindspore::irpb::DataType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  data_type_ = value;
}
inline void TensorProto::set_data_type(::mindspore::irpb::DataType value) {
  _internal_set_data_type(value);
  // @@protoc_insertion_point(field_set:mindspore.irpb.TensorProto.data_type)
}

// repeated float float_data = 3 [packed = true];
inline int TensorProto::_internal_float_data_size() const {
  return float_data_.size();
}
inline int TensorProto::float_data_size() const {
  return _internal_float_data_size();
}
inline void TensorProto::clear_float_data() {
  float_data_.Clear();
}
inline float TensorProto::_internal_float_data(int index) const {
  return float_data_.Get(index);
}
inline float TensorProto::float_data(int index) const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.TensorProto.float_data)
  return _internal_float_data(index);
}
inline void TensorProto::set_float_data(int index, float value) {
  float_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:mindspore.irpb.TensorProto.float_data)
}
inline void TensorProto::_internal_add_float_data(float value) {
  float_data_.Add(value);
}
inline void TensorProto::add_float_data(float value) {
  _internal_add_float_data(value);
  // @@protoc_insertion_point(field_add:mindspore.irpb.TensorProto.float_data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TensorProto::_internal_float_data() const {
  return float_data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TensorProto::float_data() const {
  // @@protoc_insertion_point(field_list:mindspore.irpb.TensorProto.float_data)
  return _internal_float_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TensorProto::_internal_mutable_float_data() {
  return &float_data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TensorProto::mutable_float_data() {
  // @@protoc_insertion_point(field_mutable_list:mindspore.irpb.TensorProto.float_data)
  return _internal_mutable_float_data();
}

// repeated int32 int32_data = 4 [packed = true];
inline int TensorProto::_internal_int32_data_size() const {
  return int32_data_.size();
}
inline int TensorProto::int32_data_size() const {
  return _internal_int32_data_size();
}
inline void TensorProto::clear_int32_data() {
  int32_data_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TensorProto::_internal_int32_data(int index) const {
  return int32_data_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TensorProto::int32_data(int index) const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.TensorProto.int32_data)
  return _internal_int32_data(index);
}
inline void TensorProto::set_int32_data(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  int32_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:mindspore.irpb.TensorProto.int32_data)
}
inline void TensorProto::_internal_add_int32_data(::PROTOBUF_NAMESPACE_ID::int32 value) {
  int32_data_.Add(value);
}
inline void TensorProto::add_int32_data(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_int32_data(value);
  // @@protoc_insertion_point(field_add:mindspore.irpb.TensorProto.int32_data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TensorProto::_internal_int32_data() const {
  return int32_data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TensorProto::int32_data() const {
  // @@protoc_insertion_point(field_list:mindspore.irpb.TensorProto.int32_data)
  return _internal_int32_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TensorProto::_internal_mutable_int32_data() {
  return &int32_data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TensorProto::mutable_int32_data() {
  // @@protoc_insertion_point(field_mutable_list:mindspore.irpb.TensorProto.int32_data)
  return _internal_mutable_int32_data();
}

// repeated int64 int64_data = 5 [packed = true];
inline int TensorProto::_internal_int64_data_size() const {
  return int64_data_.size();
}
inline int TensorProto::int64_data_size() const {
  return _internal_int64_data_size();
}
inline void TensorProto::clear_int64_data() {
  int64_data_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TensorProto::_internal_int64_data(int index) const {
  return int64_data_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TensorProto::int64_data(int index) const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.TensorProto.int64_data)
  return _internal_int64_data(index);
}
inline void TensorProto::set_int64_data(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  int64_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:mindspore.irpb.TensorProto.int64_data)
}
inline void TensorProto::_internal_add_int64_data(::PROTOBUF_NAMESPACE_ID::int64 value) {
  int64_data_.Add(value);
}
inline void TensorProto::add_int64_data(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_int64_data(value);
  // @@protoc_insertion_point(field_add:mindspore.irpb.TensorProto.int64_data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
TensorProto::_internal_int64_data() const {
  return int64_data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
TensorProto::int64_data() const {
  // @@protoc_insertion_point(field_list:mindspore.irpb.TensorProto.int64_data)
  return _internal_int64_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
TensorProto::_internal_mutable_int64_data() {
  return &int64_data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
TensorProto::mutable_int64_data() {
  // @@protoc_insertion_point(field_mutable_list:mindspore.irpb.TensorProto.int64_data)
  return _internal_mutable_int64_data();
}

// repeated double double_data = 6 [packed = true];
inline int TensorProto::_internal_double_data_size() const {
  return double_data_.size();
}
inline int TensorProto::double_data_size() const {
  return _internal_double_data_size();
}
inline void TensorProto::clear_double_data() {
  double_data_.Clear();
}
inline double TensorProto::_internal_double_data(int index) const {
  return double_data_.Get(index);
}
inline double TensorProto::double_data(int index) const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.TensorProto.double_data)
  return _internal_double_data(index);
}
inline void TensorProto::set_double_data(int index, double value) {
  double_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:mindspore.irpb.TensorProto.double_data)
}
inline void TensorProto::_internal_add_double_data(double value) {
  double_data_.Add(value);
}
inline void TensorProto::add_double_data(double value) {
  _internal_add_double_data(value);
  // @@protoc_insertion_point(field_add:mindspore.irpb.TensorProto.double_data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
TensorProto::_internal_double_data() const {
  return double_data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
TensorProto::double_data() const {
  // @@protoc_insertion_point(field_list:mindspore.irpb.TensorProto.double_data)
  return _internal_double_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
TensorProto::_internal_mutable_double_data() {
  return &double_data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
TensorProto::mutable_double_data() {
  // @@protoc_insertion_point(field_mutable_list:mindspore.irpb.TensorProto.double_data)
  return _internal_mutable_double_data();
}

// repeated uint64 uint64_data = 7 [packed = true];
inline int TensorProto::_internal_uint64_data_size() const {
  return uint64_data_.size();
}
inline int TensorProto::uint64_data_size() const {
  return _internal_uint64_data_size();
}
inline void TensorProto::clear_uint64_data() {
  uint64_data_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TensorProto::_internal_uint64_data(int index) const {
  return uint64_data_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TensorProto::uint64_data(int index) const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.TensorProto.uint64_data)
  return _internal_uint64_data(index);
}
inline void TensorProto::set_uint64_data(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  uint64_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:mindspore.irpb.TensorProto.uint64_data)
}
inline void TensorProto::_internal_add_uint64_data(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  uint64_data_.Add(value);
}
inline void TensorProto::add_uint64_data(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_uint64_data(value);
  // @@protoc_insertion_point(field_add:mindspore.irpb.TensorProto.uint64_data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
TensorProto::_internal_uint64_data() const {
  return uint64_data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
TensorProto::uint64_data() const {
  // @@protoc_insertion_point(field_list:mindspore.irpb.TensorProto.uint64_data)
  return _internal_uint64_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
TensorProto::_internal_mutable_uint64_data() {
  return &uint64_data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
TensorProto::mutable_uint64_data() {
  // @@protoc_insertion_point(field_mutable_list:mindspore.irpb.TensorProto.uint64_data)
  return _internal_mutable_uint64_data();
}

// optional bytes raw_data = 8;
inline bool TensorProto::_internal_has_raw_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TensorProto::has_raw_data() const {
  return _internal_has_raw_data();
}
inline void TensorProto::clear_raw_data() {
  raw_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TensorProto::raw_data() const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.TensorProto.raw_data)
  return _internal_raw_data();
}
inline void TensorProto::set_raw_data(const std::string& value) {
  _internal_set_raw_data(value);
  // @@protoc_insertion_point(field_set:mindspore.irpb.TensorProto.raw_data)
}
inline std::string* TensorProto::mutable_raw_data() {
  // @@protoc_insertion_point(field_mutable:mindspore.irpb.TensorProto.raw_data)
  return _internal_mutable_raw_data();
}
inline const std::string& TensorProto::_internal_raw_data() const {
  return raw_data_.Get();
}
inline void TensorProto::_internal_set_raw_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  raw_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TensorProto::set_raw_data(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  raw_data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mindspore.irpb.TensorProto.raw_data)
}
inline void TensorProto::set_raw_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  raw_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mindspore.irpb.TensorProto.raw_data)
}
inline void TensorProto::set_raw_data(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  raw_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mindspore.irpb.TensorProto.raw_data)
}
inline std::string* TensorProto::_internal_mutable_raw_data() {
  _has_bits_[0] |= 0x00000001u;
  return raw_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TensorProto::release_raw_data() {
  // @@protoc_insertion_point(field_release:mindspore.irpb.TensorProto.raw_data)
  if (!_internal_has_raw_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return raw_data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TensorProto::set_allocated_raw_data(std::string* raw_data) {
  if (raw_data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  raw_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), raw_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mindspore.irpb.TensorProto.raw_data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace irpb
}  // namespace mindspore

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mindspore::irpb::InputProto_EdgeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mindspore::irpb::InputProto_EdgeType>() {
  return ::mindspore::irpb::InputProto_EdgeType_descriptor();
}
template <> struct is_proto_enum< ::mindspore::irpb::Version> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mindspore::irpb::Version>() {
  return ::mindspore::irpb::Version_descriptor();
}
template <> struct is_proto_enum< ::mindspore::irpb::DataType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mindspore::irpb::DataType>() {
  return ::mindspore::irpb::DataType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mindspore_5fanf_5fir_2eproto
