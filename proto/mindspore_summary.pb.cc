// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mindspore_summary.proto

#include "mindspore_summary.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_mindspore_5fanf_5fir_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_AttributeProto_mindspore_5fanf_5fir_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mindspore_5fsummary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_Explain_mindspore_5fsummary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mindspore_5fsummary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Explain_Benchmark_mindspore_5fsummary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mindspore_5fsummary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Explain_Explanation_mindspore_5fsummary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mindspore_5fsummary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Explain_Hoc_mindspore_5fsummary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mindspore_5fsummary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Explain_HocLayer_mindspore_5fsummary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mindspore_5fsummary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Explain_Inference_mindspore_5fsummary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mindspore_5fsummary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Explain_Metadata_mindspore_5fsummary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mindspore_5fsummary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_LossLandscape_mindspore_5fsummary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mindspore_5fsummary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LossLandscape_LossPath_mindspore_5fsummary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mindspore_5fsummary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LossLandscape_Metadata_mindspore_5fsummary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mindspore_5fsummary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LossLandscape_Point_mindspore_5fsummary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mindspore_5fsummary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Summary_mindspore_5fsummary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mindspore_5fsummary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Summary_Histogram_mindspore_5fsummary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mindspore_5fsummary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Summary_Histogram_bucket_mindspore_5fsummary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mindspore_5fsummary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Summary_Image_mindspore_5fsummary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mindspore_5fsummary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Summary_Value_mindspore_5fsummary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mindspore_5fanf_5fir_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TensorProto_mindspore_5fanf_5fir_2eproto;
namespace mindspore {
namespace irpb {
class EventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Event> _instance;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  const ::mindspore::irpb::GraphProto* graph_def_;
  const ::mindspore::irpb::Summary* summary_;
  const ::mindspore::irpb::Explain* explain_;
} _Event_default_instance_;
class LossLandscape_PointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LossLandscape_Point> _instance;
} _LossLandscape_Point_default_instance_;
class LossLandscape_LossPathDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LossLandscape_LossPath> _instance;
} _LossLandscape_LossPath_default_instance_;
class LossLandscape_MetadataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LossLandscape_Metadata> _instance;
} _LossLandscape_Metadata_default_instance_;
class LossLandscapeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LossLandscape> _instance;
} _LossLandscape_default_instance_;
class Summary_ImageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Summary_Image> _instance;
} _Summary_Image_default_instance_;
class Summary_Histogram_bucketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Summary_Histogram_bucket> _instance;
} _Summary_Histogram_bucket_default_instance_;
class Summary_HistogramDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Summary_Histogram> _instance;
} _Summary_Histogram_default_instance_;
class Summary_ValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Summary_Value> _instance;
  float scalar_value_;
  const ::mindspore::irpb::Summary_Image* image_;
  const ::mindspore::irpb::TensorProto* tensor_;
  const ::mindspore::irpb::Summary_Histogram* histogram_;
  const ::mindspore::irpb::LossLandscape* loss_landscape_;
} _Summary_Value_default_instance_;
class SummaryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Summary> _instance;
} _Summary_default_instance_;
class Explain_InferenceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Explain_Inference> _instance;
} _Explain_Inference_default_instance_;
class Explain_ExplanationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Explain_Explanation> _instance;
} _Explain_Explanation_default_instance_;
class Explain_BenchmarkDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Explain_Benchmark> _instance;
} _Explain_Benchmark_default_instance_;
class Explain_MetadataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Explain_Metadata> _instance;
} _Explain_Metadata_default_instance_;
class Explain_HocLayerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Explain_HocLayer> _instance;
} _Explain_HocLayer_default_instance_;
class Explain_HocDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Explain_Hoc> _instance;
} _Explain_Hoc_default_instance_;
class ExplainDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Explain> _instance;
} _Explain_default_instance_;
}  // namespace irpb
}  // namespace mindspore
static void InitDefaultsscc_info_Event_mindspore_5fsummary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mindspore::irpb::_Event_default_instance_;
    new (ptr) ::mindspore::irpb::Event();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mindspore::irpb::Event::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Event_mindspore_5fsummary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Event_mindspore_5fsummary_2eproto}, {
      &scc_info_AttributeProto_mindspore_5fanf_5fir_2eproto.base,
      &scc_info_Summary_mindspore_5fsummary_2eproto.base,
      &scc_info_Explain_mindspore_5fsummary_2eproto.base,}};

static void InitDefaultsscc_info_Explain_mindspore_5fsummary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mindspore::irpb::_Explain_default_instance_;
    new (ptr) ::mindspore::irpb::Explain();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mindspore::irpb::Explain::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_Explain_mindspore_5fsummary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_Explain_mindspore_5fsummary_2eproto}, {
      &scc_info_Explain_Inference_mindspore_5fsummary_2eproto.base,
      &scc_info_Explain_Explanation_mindspore_5fsummary_2eproto.base,
      &scc_info_Explain_Benchmark_mindspore_5fsummary_2eproto.base,
      &scc_info_Explain_Metadata_mindspore_5fsummary_2eproto.base,
      &scc_info_Explain_Hoc_mindspore_5fsummary_2eproto.base,}};

static void InitDefaultsscc_info_Explain_Benchmark_mindspore_5fsummary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mindspore::irpb::_Explain_Benchmark_default_instance_;
    new (ptr) ::mindspore::irpb::Explain_Benchmark();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mindspore::irpb::Explain_Benchmark::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Explain_Benchmark_mindspore_5fsummary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Explain_Benchmark_mindspore_5fsummary_2eproto}, {}};

static void InitDefaultsscc_info_Explain_Explanation_mindspore_5fsummary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mindspore::irpb::_Explain_Explanation_default_instance_;
    new (ptr) ::mindspore::irpb::Explain_Explanation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mindspore::irpb::Explain_Explanation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Explain_Explanation_mindspore_5fsummary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Explain_Explanation_mindspore_5fsummary_2eproto}, {}};

static void InitDefaultsscc_info_Explain_Hoc_mindspore_5fsummary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mindspore::irpb::_Explain_Hoc_default_instance_;
    new (ptr) ::mindspore::irpb::Explain_Hoc();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mindspore::irpb::Explain_Hoc::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Explain_Hoc_mindspore_5fsummary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Explain_Hoc_mindspore_5fsummary_2eproto}, {
      &scc_info_Explain_HocLayer_mindspore_5fsummary_2eproto.base,}};

static void InitDefaultsscc_info_Explain_HocLayer_mindspore_5fsummary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mindspore::irpb::_Explain_HocLayer_default_instance_;
    new (ptr) ::mindspore::irpb::Explain_HocLayer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mindspore::irpb::Explain_HocLayer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Explain_HocLayer_mindspore_5fsummary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Explain_HocLayer_mindspore_5fsummary_2eproto}, {}};

static void InitDefaultsscc_info_Explain_Inference_mindspore_5fsummary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mindspore::irpb::_Explain_Inference_default_instance_;
    new (ptr) ::mindspore::irpb::Explain_Inference();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mindspore::irpb::Explain_Inference::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Explain_Inference_mindspore_5fsummary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Explain_Inference_mindspore_5fsummary_2eproto}, {}};

static void InitDefaultsscc_info_Explain_Metadata_mindspore_5fsummary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mindspore::irpb::_Explain_Metadata_default_instance_;
    new (ptr) ::mindspore::irpb::Explain_Metadata();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mindspore::irpb::Explain_Metadata::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Explain_Metadata_mindspore_5fsummary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Explain_Metadata_mindspore_5fsummary_2eproto}, {}};

static void InitDefaultsscc_info_LossLandscape_mindspore_5fsummary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mindspore::irpb::_LossLandscape_default_instance_;
    new (ptr) ::mindspore::irpb::LossLandscape();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mindspore::irpb::LossLandscape::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_LossLandscape_mindspore_5fsummary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_LossLandscape_mindspore_5fsummary_2eproto}, {
      &scc_info_LossLandscape_Point_mindspore_5fsummary_2eproto.base,
      &scc_info_LossLandscape_LossPath_mindspore_5fsummary_2eproto.base,
      &scc_info_LossLandscape_Metadata_mindspore_5fsummary_2eproto.base,}};

static void InitDefaultsscc_info_LossLandscape_LossPath_mindspore_5fsummary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mindspore::irpb::_LossLandscape_LossPath_default_instance_;
    new (ptr) ::mindspore::irpb::LossLandscape_LossPath();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mindspore::irpb::LossLandscape_LossPath::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LossLandscape_LossPath_mindspore_5fsummary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LossLandscape_LossPath_mindspore_5fsummary_2eproto}, {
      &scc_info_LossLandscape_Point_mindspore_5fsummary_2eproto.base,}};

static void InitDefaultsscc_info_LossLandscape_Metadata_mindspore_5fsummary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mindspore::irpb::_LossLandscape_Metadata_default_instance_;
    new (ptr) ::mindspore::irpb::LossLandscape_Metadata();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mindspore::irpb::LossLandscape_Metadata::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LossLandscape_Metadata_mindspore_5fsummary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LossLandscape_Metadata_mindspore_5fsummary_2eproto}, {}};

static void InitDefaultsscc_info_LossLandscape_Point_mindspore_5fsummary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mindspore::irpb::_LossLandscape_Point_default_instance_;
    new (ptr) ::mindspore::irpb::LossLandscape_Point();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mindspore::irpb::LossLandscape_Point::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LossLandscape_Point_mindspore_5fsummary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LossLandscape_Point_mindspore_5fsummary_2eproto}, {
      &scc_info_TensorProto_mindspore_5fanf_5fir_2eproto.base,}};

static void InitDefaultsscc_info_Summary_mindspore_5fsummary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mindspore::irpb::_Summary_default_instance_;
    new (ptr) ::mindspore::irpb::Summary();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mindspore::irpb::Summary::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Summary_mindspore_5fsummary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Summary_mindspore_5fsummary_2eproto}, {
      &scc_info_Summary_Value_mindspore_5fsummary_2eproto.base,}};

static void InitDefaultsscc_info_Summary_Histogram_mindspore_5fsummary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mindspore::irpb::_Summary_Histogram_default_instance_;
    new (ptr) ::mindspore::irpb::Summary_Histogram();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mindspore::irpb::Summary_Histogram::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Summary_Histogram_mindspore_5fsummary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Summary_Histogram_mindspore_5fsummary_2eproto}, {
      &scc_info_Summary_Histogram_bucket_mindspore_5fsummary_2eproto.base,}};

static void InitDefaultsscc_info_Summary_Histogram_bucket_mindspore_5fsummary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mindspore::irpb::_Summary_Histogram_bucket_default_instance_;
    new (ptr) ::mindspore::irpb::Summary_Histogram_bucket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mindspore::irpb::Summary_Histogram_bucket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Summary_Histogram_bucket_mindspore_5fsummary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Summary_Histogram_bucket_mindspore_5fsummary_2eproto}, {}};

static void InitDefaultsscc_info_Summary_Image_mindspore_5fsummary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mindspore::irpb::_Summary_Image_default_instance_;
    new (ptr) ::mindspore::irpb::Summary_Image();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mindspore::irpb::Summary_Image::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Summary_Image_mindspore_5fsummary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Summary_Image_mindspore_5fsummary_2eproto}, {}};

static void InitDefaultsscc_info_Summary_Value_mindspore_5fsummary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mindspore::irpb::_Summary_Value_default_instance_;
    new (ptr) ::mindspore::irpb::Summary_Value();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mindspore::irpb::Summary_Value::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Summary_Value_mindspore_5fsummary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_Summary_Value_mindspore_5fsummary_2eproto}, {
      &scc_info_Summary_Image_mindspore_5fsummary_2eproto.base,
      &scc_info_TensorProto_mindspore_5fanf_5fir_2eproto.base,
      &scc_info_Summary_Histogram_mindspore_5fsummary_2eproto.base,
      &scc_info_LossLandscape_mindspore_5fsummary_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mindspore_5fsummary_2eproto[17];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_mindspore_5fsummary_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mindspore_5fsummary_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mindspore_5fsummary_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::mindspore::irpb::Event, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mindspore::irpb::Event, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::mindspore::irpb::Event, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mindspore::irpb::Event, wall_time_),
  PROTOBUF_FIELD_OFFSET(::mindspore::irpb::Event, step_),
  offsetof(::mindspore::irpb::EventDefaultTypeInternal, version_),
  offsetof(::mindspore::irpb::EventDefaultTypeInternal, graph_def_),
  offsetof(::mindspore::irpb::EventDefaultTypeInternal, summary_),
  offsetof(::mindspore::irpb::EventDefaultTypeInternal, explain_),
  PROTOBUF_FIELD_OFFSET(::mindspore::irpb::Event, what_),
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::mindspore::irpb::LossLandscape_Point, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mindspore::irpb::LossLandscape_Point, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mindspore::irpb::LossLandscape_Point, x_),
  PROTOBUF_FIELD_OFFSET(::mindspore::irpb::LossLandscape_Point, y_),
  PROTOBUF_FIELD_OFFSET(::mindspore::irpb::LossLandscape_Point, z_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::mindspore::irpb::LossLandscape_LossPath, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mindspore::irpb::LossLandscape_LossPath, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mindspore::irpb::LossLandscape_LossPath, intervals_),
  PROTOBUF_FIELD_OFFSET(::mindspore::irpb::LossLandscape_LossPath, points_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::mindspore::irpb::LossLandscape_Metadata, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mindspore::irpb::LossLandscape_Metadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mindspore::irpb::LossLandscape_Metadata, decomposition_),
  PROTOBUF_FIELD_OFFSET(::mindspore::irpb::LossLandscape_Metadata, unit_),
  PROTOBUF_FIELD_OFFSET(::mindspore::irpb::LossLandscape_Metadata, step_per_epoch_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::mindspore::irpb::LossLandscape, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mindspore::irpb::LossLandscape, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mindspore::irpb::LossLandscape, landscape_),
  PROTOBUF_FIELD_OFFSET(::mindspore::irpb::LossLandscape, loss_path_),
  PROTOBUF_FIELD_OFFSET(::mindspore::irpb::LossLandscape, metadata_),
  PROTOBUF_FIELD_OFFSET(::mindspore::irpb::LossLandscape, convergence_point_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::mindspore::irpb::Summary_Image, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mindspore::irpb::Summary_Image, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mindspore::irpb::Summary_Image, height_),
  PROTOBUF_FIELD_OFFSET(::mindspore::irpb::Summary_Image, width_),
  PROTOBUF_FIELD_OFFSET(::mindspore::irpb::Summary_Image, colorspace_),
  PROTOBUF_FIELD_OFFSET(::mindspore::irpb::Summary_Image, encoded_image_),
  1,
  2,
  3,
  0,
  PROTOBUF_FIELD_OFFSET(::mindspore::irpb::Summary_Histogram_bucket, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mindspore::irpb::Summary_Histogram_bucket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mindspore::irpb::Summary_Histogram_bucket, left_),
  PROTOBUF_FIELD_OFFSET(::mindspore::irpb::Summary_Histogram_bucket, width_),
  PROTOBUF_FIELD_OFFSET(::mindspore::irpb::Summary_Histogram_bucket, count_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::mindspore::irpb::Summary_Histogram, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mindspore::irpb::Summary_Histogram, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mindspore::irpb::Summary_Histogram, buckets_),
  PROTOBUF_FIELD_OFFSET(::mindspore::irpb::Summary_Histogram, nan_count_),
  PROTOBUF_FIELD_OFFSET(::mindspore::irpb::Summary_Histogram, pos_inf_count_),
  PROTOBUF_FIELD_OFFSET(::mindspore::irpb::Summary_Histogram, neg_inf_count_),
  PROTOBUF_FIELD_OFFSET(::mindspore::irpb::Summary_Histogram, max_),
  PROTOBUF_FIELD_OFFSET(::mindspore::irpb::Summary_Histogram, min_),
  PROTOBUF_FIELD_OFFSET(::mindspore::irpb::Summary_Histogram, sum_),
  PROTOBUF_FIELD_OFFSET(::mindspore::irpb::Summary_Histogram, count_),
  ~0u,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::mindspore::irpb::Summary_Value, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mindspore::irpb::Summary_Value, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::mindspore::irpb::Summary_Value, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mindspore::irpb::Summary_Value, tag_),
  offsetof(::mindspore::irpb::Summary_ValueDefaultTypeInternal, scalar_value_),
  offsetof(::mindspore::irpb::Summary_ValueDefaultTypeInternal, image_),
  offsetof(::mindspore::irpb::Summary_ValueDefaultTypeInternal, tensor_),
  offsetof(::mindspore::irpb::Summary_ValueDefaultTypeInternal, histogram_),
  offsetof(::mindspore::irpb::Summary_ValueDefaultTypeInternal, loss_landscape_),
  PROTOBUF_FIELD_OFFSET(::mindspore::irpb::Summary_Value, value_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mindspore::irpb::Summary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mindspore::irpb::Summary, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mindspore::irpb::Explain_Inference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mindspore::irpb::Explain_Inference, ground_truth_prob_),
  PROTOBUF_FIELD_OFFSET(::mindspore::irpb::Explain_Inference, predicted_label_),
  PROTOBUF_FIELD_OFFSET(::mindspore::irpb::Explain_Inference, predicted_prob_),
  PROTOBUF_FIELD_OFFSET(::mindspore::irpb::Explain_Inference, ground_truth_prob_sd_),
  PROTOBUF_FIELD_OFFSET(::mindspore::irpb::Explain_Inference, ground_truth_prob_itl95_low_),
  PROTOBUF_FIELD_OFFSET(::mindspore::irpb::Explain_Inference, ground_truth_prob_itl95_hi_),
  PROTOBUF_FIELD_OFFSET(::mindspore::irpb::Explain_Inference, predicted_prob_sd_),
  PROTOBUF_FIELD_OFFSET(::mindspore::irpb::Explain_Inference, predicted_prob_itl95_low_),
  PROTOBUF_FIELD_OFFSET(::mindspore::irpb::Explain_Inference, predicted_prob_itl95_hi_),
  PROTOBUF_FIELD_OFFSET(::mindspore::irpb::Explain_Explanation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mindspore::irpb::Explain_Explanation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mindspore::irpb::Explain_Explanation, explain_method_),
  PROTOBUF_FIELD_OFFSET(::mindspore::irpb::Explain_Explanation, label_),
  PROTOBUF_FIELD_OFFSET(::mindspore::irpb::Explain_Explanation, heatmap_path_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::mindspore::irpb::Explain_Benchmark, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mindspore::irpb::Explain_Benchmark, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mindspore::irpb::Explain_Benchmark, benchmark_method_),
  PROTOBUF_FIELD_OFFSET(::mindspore::irpb::Explain_Benchmark, explain_method_),
  PROTOBUF_FIELD_OFFSET(::mindspore::irpb::Explain_Benchmark, total_score_),
  PROTOBUF_FIELD_OFFSET(::mindspore::irpb::Explain_Benchmark, label_score_),
  0,
  1,
  2,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mindspore::irpb::Explain_Metadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mindspore::irpb::Explain_Metadata, label_),
  PROTOBUF_FIELD_OFFSET(::mindspore::irpb::Explain_Metadata, explain_method_),
  PROTOBUF_FIELD_OFFSET(::mindspore::irpb::Explain_Metadata, benchmark_method_),
  PROTOBUF_FIELD_OFFSET(::mindspore::irpb::Explain_HocLayer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mindspore::irpb::Explain_HocLayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mindspore::irpb::Explain_HocLayer, prob_),
  PROTOBUF_FIELD_OFFSET(::mindspore::irpb::Explain_HocLayer, box_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::mindspore::irpb::Explain_Hoc, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mindspore::irpb::Explain_Hoc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mindspore::irpb::Explain_Hoc, label_),
  PROTOBUF_FIELD_OFFSET(::mindspore::irpb::Explain_Hoc, mask_),
  PROTOBUF_FIELD_OFFSET(::mindspore::irpb::Explain_Hoc, layer_),
  1,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::mindspore::irpb::Explain, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::mindspore::irpb::Explain, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mindspore::irpb::Explain, sample_id_),
  PROTOBUF_FIELD_OFFSET(::mindspore::irpb::Explain, image_path_),
  PROTOBUF_FIELD_OFFSET(::mindspore::irpb::Explain, ground_truth_label_),
  PROTOBUF_FIELD_OFFSET(::mindspore::irpb::Explain, inference_),
  PROTOBUF_FIELD_OFFSET(::mindspore::irpb::Explain, explanation_),
  PROTOBUF_FIELD_OFFSET(::mindspore::irpb::Explain, benchmark_),
  PROTOBUF_FIELD_OFFSET(::mindspore::irpb::Explain, metadata_),
  PROTOBUF_FIELD_OFFSET(::mindspore::irpb::Explain, status_),
  PROTOBUF_FIELD_OFFSET(::mindspore::irpb::Explain, hoc_),
  4,
  0,
  ~0u,
  2,
  ~0u,
  ~0u,
  3,
  1,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, sizeof(::mindspore::irpb::Event)},
  { 18, 26, sizeof(::mindspore::irpb::LossLandscape_Point)},
  { 29, 36, sizeof(::mindspore::irpb::LossLandscape_LossPath)},
  { 38, 46, sizeof(::mindspore::irpb::LossLandscape_Metadata)},
  { 49, 58, sizeof(::mindspore::irpb::LossLandscape)},
  { 62, 71, sizeof(::mindspore::irpb::Summary_Image)},
  { 75, 83, sizeof(::mindspore::irpb::Summary_Histogram_bucket)},
  { 86, 99, sizeof(::mindspore::irpb::Summary_Histogram)},
  { 107, 119, sizeof(::mindspore::irpb::Summary_Value)},
  { 125, -1, sizeof(::mindspore::irpb::Summary)},
  { 131, -1, sizeof(::mindspore::irpb::Explain_Inference)},
  { 145, 153, sizeof(::mindspore::irpb::Explain_Explanation)},
  { 156, 165, sizeof(::mindspore::irpb::Explain_Benchmark)},
  { 169, -1, sizeof(::mindspore::irpb::Explain_Metadata)},
  { 177, 184, sizeof(::mindspore::irpb::Explain_HocLayer)},
  { 186, 194, sizeof(::mindspore::irpb::Explain_Hoc)},
  { 197, 211, sizeof(::mindspore::irpb::Explain)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mindspore::irpb::_Event_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mindspore::irpb::_LossLandscape_Point_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mindspore::irpb::_LossLandscape_LossPath_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mindspore::irpb::_LossLandscape_Metadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mindspore::irpb::_LossLandscape_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mindspore::irpb::_Summary_Image_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mindspore::irpb::_Summary_Histogram_bucket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mindspore::irpb::_Summary_Histogram_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mindspore::irpb::_Summary_Value_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mindspore::irpb::_Summary_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mindspore::irpb::_Explain_Inference_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mindspore::irpb::_Explain_Explanation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mindspore::irpb::_Explain_Benchmark_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mindspore::irpb::_Explain_Metadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mindspore::irpb::_Explain_HocLayer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mindspore::irpb::_Explain_Hoc_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mindspore::irpb::_Explain_default_instance_),
};

const char descriptor_table_protodef_mindspore_5fsummary_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027mindspore_summary.proto\022\016mindspore.irp"
  "b\032\026mindspore_anf_ir.proto\"\314\001\n\005Event\022\021\n\tw"
  "all_time\030\001 \002(\001\022\014\n\004step\030\002 \001(\003\022\021\n\007version\030"
  "\003 \001(\tH\000\022/\n\tgraph_def\030\004 \001(\0132\032.mindspore.i"
  "rpb.GraphProtoH\000\022*\n\007summary\030\005 \001(\0132\027.mind"
  "spore.irpb.SummaryH\000\022*\n\007explain\030\006 \001(\0132\027."
  "mindspore.irpb.ExplainH\000B\006\n\004what\"\232\004\n\rLos"
  "sLandscape\0226\n\tlandscape\030\001 \001(\0132#.mindspor"
  "e.irpb.LossLandscape.Point\0229\n\tloss_path\030"
  "\002 \001(\0132&.mindspore.irpb.LossLandscape.Los"
  "sPath\0228\n\010metadata\030\003 \001(\0132&.mindspore.irpb"
  ".LossLandscape.Metadata\022>\n\021convergence_p"
  "oint\030\004 \001(\0132#.mindspore.irpb.LossLandscap"
  "e.Point\032\177\n\005Point\022&\n\001x\030\001 \001(\0132\033.mindspore."
  "irpb.TensorProto\022&\n\001y\030\002 \001(\0132\033.mindspore."
  "irpb.TensorProto\022&\n\001z\030\003 \001(\0132\033.mindspore."
  "irpb.TensorProto\032R\n\010LossPath\022\021\n\tinterval"
  "s\030\001 \003(\005\0223\n\006points\030\002 \001(\0132#.mindspore.irpb"
  ".LossLandscape.Point\032G\n\010Metadata\022\025\n\rdeco"
  "mposition\030\001 \001(\t\022\014\n\004unit\030\002 \001(\t\022\026\n\016step_pe"
  "r_epoch\030\003 \001(\005\"\210\005\n\007Summary\022,\n\005value\030\001 \003(\013"
  "2\035.mindspore.irpb.Summary.Value\032Q\n\005Image"
  "\022\016\n\006height\030\001 \002(\005\022\r\n\005width\030\002 \002(\005\022\022\n\ncolor"
  "space\030\003 \002(\005\022\025\n\rencoded_image\030\004 \002(\014\032\363\001\n\tH"
  "istogram\0229\n\007buckets\030\001 \003(\0132(.mindspore.ir"
  "pb.Summary.Histogram.bucket\022\021\n\tnan_count"
  "\030\002 \001(\003\022\025\n\rpos_inf_count\030\003 \001(\003\022\025\n\rneg_inf"
  "_count\030\004 \001(\003\022\013\n\003max\030\005 \001(\001\022\013\n\003min\030\006 \001(\001\022\013"
  "\n\003sum\030\007 \001(\001\022\r\n\005count\030\010 \001(\003\0324\n\006bucket\022\014\n\004"
  "left\030\001 \002(\001\022\r\n\005width\030\002 \002(\001\022\r\n\005count\030\003 \002(\003"
  "\032\205\002\n\005Value\022\013\n\003tag\030\001 \002(\t\022\026\n\014scalar_value\030"
  "\003 \001(\002H\000\022.\n\005image\030\004 \001(\0132\035.mindspore.irpb."
  "Summary.ImageH\000\022-\n\006tensor\030\010 \001(\0132\033.mindsp"
  "ore.irpb.TensorProtoH\000\0226\n\thistogram\030\t \001("
  "\0132!.mindspore.irpb.Summary.HistogramH\000\0227"
  "\n\016loss_landscape\030\n \001(\0132\035.mindspore.irpb."
  "LossLandscapeH\000B\007\n\005value\"\375\007\n\007Explain\022\021\n\t"
  "sample_id\030\001 \001(\005\022\022\n\nimage_path\030\002 \001(\t\022\032\n\022g"
  "round_truth_label\030\003 \003(\005\0224\n\tinference\030\004 \001"
  "(\0132!.mindspore.irpb.Explain.Inference\0228\n"
  "\013explanation\030\005 \003(\0132#.mindspore.irpb.Expl"
  "ain.Explanation\0224\n\tbenchmark\030\006 \003(\0132!.min"
  "dspore.irpb.Explain.Benchmark\0222\n\010metadat"
  "a\030\007 \001(\0132 .mindspore.irpb.Explain.Metadat"
  "a\022\016\n\006status\030\010 \001(\t\022(\n\003hoc\030\t \003(\0132\033.mindspo"
  "re.irpb.Explain.Hoc\032\234\002\n\tInference\022\031\n\021gro"
  "und_truth_prob\030\001 \003(\002\022\027\n\017predicted_label\030"
  "\002 \003(\005\022\026\n\016predicted_prob\030\003 \003(\002\022\034\n\024ground_"
  "truth_prob_sd\030\004 \003(\002\022#\n\033ground_truth_prob"
  "_itl95_low\030\005 \003(\002\022\"\n\032ground_truth_prob_it"
  "l95_hi\030\006 \003(\002\022\031\n\021predicted_prob_sd\030\007 \003(\002\022"
  " \n\030predicted_prob_itl95_low\030\010 \003(\002\022\037\n\027pre"
  "dicted_prob_itl95_hi\030\t \003(\002\032J\n\013Explanatio"
  "n\022\026\n\016explain_method\030\001 \001(\t\022\r\n\005label\030\002 \001(\005"
  "\022\024\n\014heatmap_path\030\003 \001(\t\032g\n\tBenchmark\022\030\n\020b"
  "enchmark_method\030\001 \001(\t\022\026\n\016explain_method\030"
  "\002 \001(\t\022\023\n\013total_score\030\003 \001(\002\022\023\n\013label_scor"
  "e\030\004 \003(\002\032K\n\010Metadata\022\r\n\005label\030\001 \003(\t\022\026\n\016ex"
  "plain_method\030\002 \003(\t\022\030\n\020benchmark_method\030\003"
  " \003(\t\032%\n\010HocLayer\022\014\n\004prob\030\001 \001(\002\022\013\n\003box\030\002 "
  "\003(\005\032S\n\003Hoc\022\r\n\005label\030\001 \001(\005\022\014\n\004mask\030\002 \001(\t\022"
  "/\n\005layer\030\003 \003(\0132 .mindspore.irpb.Explain."
  "HocLayerB\003\370\001\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_mindspore_5fsummary_2eproto_deps[1] = {
  &::descriptor_table_mindspore_5fanf_5fir_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_mindspore_5fsummary_2eproto_sccs[17] = {
  &scc_info_Event_mindspore_5fsummary_2eproto.base,
  &scc_info_Explain_mindspore_5fsummary_2eproto.base,
  &scc_info_Explain_Benchmark_mindspore_5fsummary_2eproto.base,
  &scc_info_Explain_Explanation_mindspore_5fsummary_2eproto.base,
  &scc_info_Explain_Hoc_mindspore_5fsummary_2eproto.base,
  &scc_info_Explain_HocLayer_mindspore_5fsummary_2eproto.base,
  &scc_info_Explain_Inference_mindspore_5fsummary_2eproto.base,
  &scc_info_Explain_Metadata_mindspore_5fsummary_2eproto.base,
  &scc_info_LossLandscape_mindspore_5fsummary_2eproto.base,
  &scc_info_LossLandscape_LossPath_mindspore_5fsummary_2eproto.base,
  &scc_info_LossLandscape_Metadata_mindspore_5fsummary_2eproto.base,
  &scc_info_LossLandscape_Point_mindspore_5fsummary_2eproto.base,
  &scc_info_Summary_mindspore_5fsummary_2eproto.base,
  &scc_info_Summary_Histogram_mindspore_5fsummary_2eproto.base,
  &scc_info_Summary_Histogram_bucket_mindspore_5fsummary_2eproto.base,
  &scc_info_Summary_Image_mindspore_5fsummary_2eproto.base,
  &scc_info_Summary_Value_mindspore_5fsummary_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mindspore_5fsummary_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mindspore_5fsummary_2eproto = {
  false, false, descriptor_table_protodef_mindspore_5fsummary_2eproto, "mindspore_summary.proto", 2493,
  &descriptor_table_mindspore_5fsummary_2eproto_once, descriptor_table_mindspore_5fsummary_2eproto_sccs, descriptor_table_mindspore_5fsummary_2eproto_deps, 17, 1,
  schemas, file_default_instances, TableStruct_mindspore_5fsummary_2eproto::offsets,
  file_level_metadata_mindspore_5fsummary_2eproto, 17, file_level_enum_descriptors_mindspore_5fsummary_2eproto, file_level_service_descriptors_mindspore_5fsummary_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_mindspore_5fsummary_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_mindspore_5fsummary_2eproto)), true);
namespace mindspore {
namespace irpb {

// ===================================================================

void Event::InitAsDefaultInstance() {
  ::mindspore::irpb::_Event_default_instance_.version_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::mindspore::irpb::_Event_default_instance_.graph_def_ = const_cast< ::mindspore::irpb::GraphProto*>(
      ::mindspore::irpb::GraphProto::internal_default_instance());
  ::mindspore::irpb::_Event_default_instance_.summary_ = const_cast< ::mindspore::irpb::Summary*>(
      ::mindspore::irpb::Summary::internal_default_instance());
  ::mindspore::irpb::_Event_default_instance_.explain_ = const_cast< ::mindspore::irpb::Explain*>(
      ::mindspore::irpb::Explain::internal_default_instance());
}
class Event::_Internal {
 public:
  using HasBits = decltype(std::declval<Event>()._has_bits_);
  static void set_has_wall_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_step(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::mindspore::irpb::GraphProto& graph_def(const Event* msg);
  static const ::mindspore::irpb::Summary& summary(const Event* msg);
  static const ::mindspore::irpb::Explain& explain(const Event* msg);
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::mindspore::irpb::GraphProto&
Event::_Internal::graph_def(const Event* msg) {
  return *msg->what_.graph_def_;
}
const ::mindspore::irpb::Summary&
Event::_Internal::summary(const Event* msg) {
  return *msg->what_.summary_;
}
const ::mindspore::irpb::Explain&
Event::_Internal::explain(const Event* msg) {
  return *msg->what_.explain_;
}
void Event::set_allocated_graph_def(::mindspore::irpb::GraphProto* graph_def) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_what();
  if (graph_def) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(graph_def)->GetArena();
    if (message_arena != submessage_arena) {
      graph_def = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, graph_def, submessage_arena);
    }
    set_has_graph_def();
    what_.graph_def_ = graph_def;
  }
  // @@protoc_insertion_point(field_set_allocated:mindspore.irpb.Event.graph_def)
}
void Event::clear_graph_def() {
  if (_internal_has_graph_def()) {
    if (GetArena() == nullptr) {
      delete what_.graph_def_;
    }
    clear_has_what();
  }
}
void Event::set_allocated_summary(::mindspore::irpb::Summary* summary) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_what();
  if (summary) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(summary);
    if (message_arena != submessage_arena) {
      summary = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, summary, submessage_arena);
    }
    set_has_summary();
    what_.summary_ = summary;
  }
  // @@protoc_insertion_point(field_set_allocated:mindspore.irpb.Event.summary)
}
void Event::set_allocated_explain(::mindspore::irpb::Explain* explain) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_what();
  if (explain) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(explain);
    if (message_arena != submessage_arena) {
      explain = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, explain, submessage_arena);
    }
    set_has_explain();
    what_.explain_ = explain;
  }
  // @@protoc_insertion_point(field_set_allocated:mindspore.irpb.Event.explain)
}
Event::Event(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mindspore.irpb.Event)
}
Event::Event(const Event& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&wall_time_, &from.wall_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&step_) -
    reinterpret_cast<char*>(&wall_time_)) + sizeof(step_));
  clear_has_what();
  switch (from.what_case()) {
    case kVersion: {
      _internal_set_version(from._internal_version());
      break;
    }
    case kGraphDef: {
      _internal_mutable_graph_def()->::mindspore::irpb::GraphProto::MergeFrom(from._internal_graph_def());
      break;
    }
    case kSummary: {
      _internal_mutable_summary()->::mindspore::irpb::Summary::MergeFrom(from._internal_summary());
      break;
    }
    case kExplain: {
      _internal_mutable_explain()->::mindspore::irpb::Explain::MergeFrom(from._internal_explain());
      break;
    }
    case WHAT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:mindspore.irpb.Event)
}

void Event::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Event_mindspore_5fsummary_2eproto.base);
  ::memset(&wall_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&step_) -
      reinterpret_cast<char*>(&wall_time_)) + sizeof(step_));
  clear_has_what();
}

Event::~Event() {
  // @@protoc_insertion_point(destructor:mindspore.irpb.Event)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Event::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_what()) {
    clear_what();
  }
}

void Event::ArenaDtor(void* object) {
  Event* _this = reinterpret_cast< Event* >(object);
  (void)_this;
}
void Event::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Event::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Event& Event::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Event_mindspore_5fsummary_2eproto.base);
  return *internal_default_instance();
}


void Event::clear_what() {
// @@protoc_insertion_point(one_of_clear_start:mindspore.irpb.Event)
  switch (what_case()) {
    case kVersion: {
      what_.version_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
      break;
    }
    case kGraphDef: {
      if (GetArena() == nullptr) {
        delete what_.graph_def_;
      }
      break;
    }
    case kSummary: {
      if (GetArena() == nullptr) {
        delete what_.summary_;
      }
      break;
    }
    case kExplain: {
      if (GetArena() == nullptr) {
        delete what_.explain_;
      }
      break;
    }
    case WHAT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = WHAT_NOT_SET;
}


void Event::Clear() {
// @@protoc_insertion_point(message_clear_start:mindspore.irpb.Event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&wall_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&step_) -
        reinterpret_cast<char*>(&wall_time_)) + sizeof(step_));
  }
  clear_what();
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Event::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required double wall_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_wall_time(&has_bits);
          wall_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int64 step = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_step(&has_bits);
          step_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mindspore.irpb.Event.version");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mindspore.irpb.GraphProto graph_def = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_graph_def(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mindspore.irpb.Summary summary = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_summary(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mindspore.irpb.Explain explain = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_explain(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Event::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mindspore.irpb.Event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double wall_time = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_wall_time(), target);
  }

  // optional int64 step = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_step(), target);
  }

  switch (what_case()) {
    case kVersion: {
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "mindspore.irpb.Event.version");
      target = stream->WriteStringMaybeAliased(
          3, this->_internal_version(), target);
      break;
    }
    case kGraphDef: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          4, _Internal::graph_def(this), target, stream);
      break;
    }
    case kSummary: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          5, _Internal::summary(this), target, stream);
      break;
    }
    case kExplain: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          6, _Internal::explain(this), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mindspore.irpb.Event)
  return target;
}

size_t Event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mindspore.irpb.Event)
  size_t total_size = 0;

  // required double wall_time = 1;
  if (_internal_has_wall_time()) {
    total_size += 1 + 8;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 step = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_step());
  }

  switch (what_case()) {
    // string version = 3;
    case kVersion: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_version());
      break;
    }
    // .mindspore.irpb.GraphProto graph_def = 4;
    case kGraphDef: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *what_.graph_def_);
      break;
    }
    // .mindspore.irpb.Summary summary = 5;
    case kSummary: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *what_.summary_);
      break;
    }
    // .mindspore.irpb.Explain explain = 6;
    case kExplain: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *what_.explain_);
      break;
    }
    case WHAT_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Event::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mindspore.irpb.Event)
  GOOGLE_DCHECK_NE(&from, this);
  const Event* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Event>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mindspore.irpb.Event)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mindspore.irpb.Event)
    MergeFrom(*source);
  }
}

void Event::MergeFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mindspore.irpb.Event)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      wall_time_ = from.wall_time_;
    }
    if (cached_has_bits & 0x00000002u) {
      step_ = from.step_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.what_case()) {
    case kVersion: {
      _internal_set_version(from._internal_version());
      break;
    }
    case kGraphDef: {
      _internal_mutable_graph_def()->::mindspore::irpb::GraphProto::MergeFrom(from._internal_graph_def());
      break;
    }
    case kSummary: {
      _internal_mutable_summary()->::mindspore::irpb::Summary::MergeFrom(from._internal_summary());
      break;
    }
    case kExplain: {
      _internal_mutable_explain()->::mindspore::irpb::Explain::MergeFrom(from._internal_explain());
      break;
    }
    case WHAT_NOT_SET: {
      break;
    }
  }
}

void Event::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mindspore.irpb.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event::CopyFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mindspore.irpb.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  switch (what_case()) {
    case kVersion: {
      break;
    }
    case kGraphDef: {
      break;
    }
    case kSummary: {
      if (has_summary()) {
        if (!this->summary().IsInitialized()) return false;
      }
      break;
    }
    case kExplain: {
      break;
    }
    case WHAT_NOT_SET: {
      break;
    }
  }
  return true;
}

void Event::InternalSwap(Event* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Event, step_)
      + sizeof(Event::step_)
      - PROTOBUF_FIELD_OFFSET(Event, wall_time_)>(
          reinterpret_cast<char*>(&wall_time_),
          reinterpret_cast<char*>(&other->wall_time_));
  swap(what_, other->what_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Event::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LossLandscape_Point::InitAsDefaultInstance() {
  ::mindspore::irpb::_LossLandscape_Point_default_instance_._instance.get_mutable()->x_ = const_cast< ::mindspore::irpb::TensorProto*>(
      ::mindspore::irpb::TensorProto::internal_default_instance());
  ::mindspore::irpb::_LossLandscape_Point_default_instance_._instance.get_mutable()->y_ = const_cast< ::mindspore::irpb::TensorProto*>(
      ::mindspore::irpb::TensorProto::internal_default_instance());
  ::mindspore::irpb::_LossLandscape_Point_default_instance_._instance.get_mutable()->z_ = const_cast< ::mindspore::irpb::TensorProto*>(
      ::mindspore::irpb::TensorProto::internal_default_instance());
}
class LossLandscape_Point::_Internal {
 public:
  using HasBits = decltype(std::declval<LossLandscape_Point>()._has_bits_);
  static const ::mindspore::irpb::TensorProto& x(const LossLandscape_Point* msg);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::mindspore::irpb::TensorProto& y(const LossLandscape_Point* msg);
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::mindspore::irpb::TensorProto& z(const LossLandscape_Point* msg);
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::mindspore::irpb::TensorProto&
LossLandscape_Point::_Internal::x(const LossLandscape_Point* msg) {
  return *msg->x_;
}
const ::mindspore::irpb::TensorProto&
LossLandscape_Point::_Internal::y(const LossLandscape_Point* msg) {
  return *msg->y_;
}
const ::mindspore::irpb::TensorProto&
LossLandscape_Point::_Internal::z(const LossLandscape_Point* msg) {
  return *msg->z_;
}
void LossLandscape_Point::clear_x() {
  if (x_ != nullptr) x_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void LossLandscape_Point::clear_y() {
  if (y_ != nullptr) y_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void LossLandscape_Point::clear_z() {
  if (z_ != nullptr) z_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
LossLandscape_Point::LossLandscape_Point(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mindspore.irpb.LossLandscape.Point)
}
LossLandscape_Point::LossLandscape_Point(const LossLandscape_Point& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_x()) {
    x_ = new ::mindspore::irpb::TensorProto(*from.x_);
  } else {
    x_ = nullptr;
  }
  if (from._internal_has_y()) {
    y_ = new ::mindspore::irpb::TensorProto(*from.y_);
  } else {
    y_ = nullptr;
  }
  if (from._internal_has_z()) {
    z_ = new ::mindspore::irpb::TensorProto(*from.z_);
  } else {
    z_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mindspore.irpb.LossLandscape.Point)
}

void LossLandscape_Point::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LossLandscape_Point_mindspore_5fsummary_2eproto.base);
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

LossLandscape_Point::~LossLandscape_Point() {
  // @@protoc_insertion_point(destructor:mindspore.irpb.LossLandscape.Point)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LossLandscape_Point::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete x_;
  if (this != internal_default_instance()) delete y_;
  if (this != internal_default_instance()) delete z_;
}

void LossLandscape_Point::ArenaDtor(void* object) {
  LossLandscape_Point* _this = reinterpret_cast< LossLandscape_Point* >(object);
  (void)_this;
}
void LossLandscape_Point::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LossLandscape_Point::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LossLandscape_Point& LossLandscape_Point::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LossLandscape_Point_mindspore_5fsummary_2eproto.base);
  return *internal_default_instance();
}


void LossLandscape_Point::Clear() {
// @@protoc_insertion_point(message_clear_start:mindspore.irpb.LossLandscape.Point)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(x_ != nullptr);
      x_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(y_ != nullptr);
      y_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(z_ != nullptr);
      z_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LossLandscape_Point::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .mindspore.irpb.TensorProto x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_x(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mindspore.irpb.TensorProto y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_y(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mindspore.irpb.TensorProto z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_z(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LossLandscape_Point::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mindspore.irpb.LossLandscape.Point)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mindspore.irpb.TensorProto x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::x(this), target, stream);
  }

  // optional .mindspore.irpb.TensorProto y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::y(this), target, stream);
  }

  // optional .mindspore.irpb.TensorProto z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::z(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mindspore.irpb.LossLandscape.Point)
  return target;
}

size_t LossLandscape_Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mindspore.irpb.LossLandscape.Point)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .mindspore.irpb.TensorProto x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *x_);
    }

    // optional .mindspore.irpb.TensorProto y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *y_);
    }

    // optional .mindspore.irpb.TensorProto z = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *z_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LossLandscape_Point::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mindspore.irpb.LossLandscape.Point)
  GOOGLE_DCHECK_NE(&from, this);
  const LossLandscape_Point* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LossLandscape_Point>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mindspore.irpb.LossLandscape.Point)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mindspore.irpb.LossLandscape.Point)
    MergeFrom(*source);
  }
}

void LossLandscape_Point::MergeFrom(const LossLandscape_Point& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mindspore.irpb.LossLandscape.Point)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_x()->::mindspore::irpb::TensorProto::MergeFrom(from._internal_x());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_y()->::mindspore::irpb::TensorProto::MergeFrom(from._internal_y());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_z()->::mindspore::irpb::TensorProto::MergeFrom(from._internal_z());
    }
  }
}

void LossLandscape_Point::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mindspore.irpb.LossLandscape.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LossLandscape_Point::CopyFrom(const LossLandscape_Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mindspore.irpb.LossLandscape.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LossLandscape_Point::IsInitialized() const {
  return true;
}

void LossLandscape_Point::InternalSwap(LossLandscape_Point* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LossLandscape_Point, z_)
      + sizeof(LossLandscape_Point::z_)
      - PROTOBUF_FIELD_OFFSET(LossLandscape_Point, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LossLandscape_Point::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LossLandscape_LossPath::InitAsDefaultInstance() {
  ::mindspore::irpb::_LossLandscape_LossPath_default_instance_._instance.get_mutable()->points_ = const_cast< ::mindspore::irpb::LossLandscape_Point*>(
      ::mindspore::irpb::LossLandscape_Point::internal_default_instance());
}
class LossLandscape_LossPath::_Internal {
 public:
  using HasBits = decltype(std::declval<LossLandscape_LossPath>()._has_bits_);
  static const ::mindspore::irpb::LossLandscape_Point& points(const LossLandscape_LossPath* msg);
  static void set_has_points(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mindspore::irpb::LossLandscape_Point&
LossLandscape_LossPath::_Internal::points(const LossLandscape_LossPath* msg) {
  return *msg->points_;
}
LossLandscape_LossPath::LossLandscape_LossPath(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  intervals_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mindspore.irpb.LossLandscape.LossPath)
}
LossLandscape_LossPath::LossLandscape_LossPath(const LossLandscape_LossPath& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      intervals_(from.intervals_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_points()) {
    points_ = new ::mindspore::irpb::LossLandscape_Point(*from.points_);
  } else {
    points_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mindspore.irpb.LossLandscape.LossPath)
}

void LossLandscape_LossPath::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LossLandscape_LossPath_mindspore_5fsummary_2eproto.base);
  points_ = nullptr;
}

LossLandscape_LossPath::~LossLandscape_LossPath() {
  // @@protoc_insertion_point(destructor:mindspore.irpb.LossLandscape.LossPath)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LossLandscape_LossPath::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete points_;
}

void LossLandscape_LossPath::ArenaDtor(void* object) {
  LossLandscape_LossPath* _this = reinterpret_cast< LossLandscape_LossPath* >(object);
  (void)_this;
}
void LossLandscape_LossPath::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LossLandscape_LossPath::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LossLandscape_LossPath& LossLandscape_LossPath::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LossLandscape_LossPath_mindspore_5fsummary_2eproto.base);
  return *internal_default_instance();
}


void LossLandscape_LossPath::Clear() {
// @@protoc_insertion_point(message_clear_start:mindspore.irpb.LossLandscape.LossPath)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  intervals_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(points_ != nullptr);
    points_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LossLandscape_LossPath::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 intervals = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_intervals(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_intervals(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mindspore.irpb.LossLandscape.Point points = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_points(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LossLandscape_LossPath::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mindspore.irpb.LossLandscape.LossPath)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 intervals = 1;
  for (int i = 0, n = this->_internal_intervals_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_intervals(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .mindspore.irpb.LossLandscape.Point points = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::points(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mindspore.irpb.LossLandscape.LossPath)
  return target;
}

size_t LossLandscape_LossPath::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mindspore.irpb.LossLandscape.LossPath)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 intervals = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->intervals_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_intervals_size());
    total_size += data_size;
  }

  // optional .mindspore.irpb.LossLandscape.Point points = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *points_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LossLandscape_LossPath::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mindspore.irpb.LossLandscape.LossPath)
  GOOGLE_DCHECK_NE(&from, this);
  const LossLandscape_LossPath* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LossLandscape_LossPath>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mindspore.irpb.LossLandscape.LossPath)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mindspore.irpb.LossLandscape.LossPath)
    MergeFrom(*source);
  }
}

void LossLandscape_LossPath::MergeFrom(const LossLandscape_LossPath& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mindspore.irpb.LossLandscape.LossPath)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  intervals_.MergeFrom(from.intervals_);
  if (from._internal_has_points()) {
    _internal_mutable_points()->::mindspore::irpb::LossLandscape_Point::MergeFrom(from._internal_points());
  }
}

void LossLandscape_LossPath::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mindspore.irpb.LossLandscape.LossPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LossLandscape_LossPath::CopyFrom(const LossLandscape_LossPath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mindspore.irpb.LossLandscape.LossPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LossLandscape_LossPath::IsInitialized() const {
  return true;
}

void LossLandscape_LossPath::InternalSwap(LossLandscape_LossPath* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  intervals_.InternalSwap(&other->intervals_);
  swap(points_, other->points_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LossLandscape_LossPath::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LossLandscape_Metadata::InitAsDefaultInstance() {
}
class LossLandscape_Metadata::_Internal {
 public:
  using HasBits = decltype(std::declval<LossLandscape_Metadata>()._has_bits_);
  static void set_has_decomposition(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_unit(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_step_per_epoch(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

LossLandscape_Metadata::LossLandscape_Metadata(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mindspore.irpb.LossLandscape.Metadata)
}
LossLandscape_Metadata::LossLandscape_Metadata(const LossLandscape_Metadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  decomposition_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_decomposition()) {
    decomposition_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_decomposition(),
      GetArena());
  }
  unit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_unit()) {
    unit_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_unit(),
      GetArena());
  }
  step_per_epoch_ = from.step_per_epoch_;
  // @@protoc_insertion_point(copy_constructor:mindspore.irpb.LossLandscape.Metadata)
}

void LossLandscape_Metadata::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LossLandscape_Metadata_mindspore_5fsummary_2eproto.base);
  decomposition_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  unit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  step_per_epoch_ = 0;
}

LossLandscape_Metadata::~LossLandscape_Metadata() {
  // @@protoc_insertion_point(destructor:mindspore.irpb.LossLandscape.Metadata)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LossLandscape_Metadata::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  decomposition_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  unit_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LossLandscape_Metadata::ArenaDtor(void* object) {
  LossLandscape_Metadata* _this = reinterpret_cast< LossLandscape_Metadata* >(object);
  (void)_this;
}
void LossLandscape_Metadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LossLandscape_Metadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LossLandscape_Metadata& LossLandscape_Metadata::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LossLandscape_Metadata_mindspore_5fsummary_2eproto.base);
  return *internal_default_instance();
}


void LossLandscape_Metadata::Clear() {
// @@protoc_insertion_point(message_clear_start:mindspore.irpb.LossLandscape.Metadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      decomposition_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      unit_.ClearNonDefaultToEmpty();
    }
  }
  step_per_epoch_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LossLandscape_Metadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string decomposition = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_decomposition();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mindspore.irpb.LossLandscape.Metadata.decomposition");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string unit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_unit();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mindspore.irpb.LossLandscape.Metadata.unit");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 step_per_epoch = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_step_per_epoch(&has_bits);
          step_per_epoch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LossLandscape_Metadata::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mindspore.irpb.LossLandscape.Metadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string decomposition = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_decomposition().data(), static_cast<int>(this->_internal_decomposition().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mindspore.irpb.LossLandscape.Metadata.decomposition");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_decomposition(), target);
  }

  // optional string unit = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_unit().data(), static_cast<int>(this->_internal_unit().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mindspore.irpb.LossLandscape.Metadata.unit");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_unit(), target);
  }

  // optional int32 step_per_epoch = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_step_per_epoch(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mindspore.irpb.LossLandscape.Metadata)
  return target;
}

size_t LossLandscape_Metadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mindspore.irpb.LossLandscape.Metadata)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string decomposition = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_decomposition());
    }

    // optional string unit = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_unit());
    }

    // optional int32 step_per_epoch = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_step_per_epoch());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LossLandscape_Metadata::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mindspore.irpb.LossLandscape.Metadata)
  GOOGLE_DCHECK_NE(&from, this);
  const LossLandscape_Metadata* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LossLandscape_Metadata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mindspore.irpb.LossLandscape.Metadata)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mindspore.irpb.LossLandscape.Metadata)
    MergeFrom(*source);
  }
}

void LossLandscape_Metadata::MergeFrom(const LossLandscape_Metadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mindspore.irpb.LossLandscape.Metadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_decomposition(from._internal_decomposition());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_unit(from._internal_unit());
    }
    if (cached_has_bits & 0x00000004u) {
      step_per_epoch_ = from.step_per_epoch_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LossLandscape_Metadata::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mindspore.irpb.LossLandscape.Metadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LossLandscape_Metadata::CopyFrom(const LossLandscape_Metadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mindspore.irpb.LossLandscape.Metadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LossLandscape_Metadata::IsInitialized() const {
  return true;
}

void LossLandscape_Metadata::InternalSwap(LossLandscape_Metadata* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  decomposition_.Swap(&other->decomposition_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  unit_.Swap(&other->unit_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(step_per_epoch_, other->step_per_epoch_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LossLandscape_Metadata::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LossLandscape::InitAsDefaultInstance() {
  ::mindspore::irpb::_LossLandscape_default_instance_._instance.get_mutable()->landscape_ = const_cast< ::mindspore::irpb::LossLandscape_Point*>(
      ::mindspore::irpb::LossLandscape_Point::internal_default_instance());
  ::mindspore::irpb::_LossLandscape_default_instance_._instance.get_mutable()->loss_path_ = const_cast< ::mindspore::irpb::LossLandscape_LossPath*>(
      ::mindspore::irpb::LossLandscape_LossPath::internal_default_instance());
  ::mindspore::irpb::_LossLandscape_default_instance_._instance.get_mutable()->metadata_ = const_cast< ::mindspore::irpb::LossLandscape_Metadata*>(
      ::mindspore::irpb::LossLandscape_Metadata::internal_default_instance());
  ::mindspore::irpb::_LossLandscape_default_instance_._instance.get_mutable()->convergence_point_ = const_cast< ::mindspore::irpb::LossLandscape_Point*>(
      ::mindspore::irpb::LossLandscape_Point::internal_default_instance());
}
class LossLandscape::_Internal {
 public:
  using HasBits = decltype(std::declval<LossLandscape>()._has_bits_);
  static const ::mindspore::irpb::LossLandscape_Point& landscape(const LossLandscape* msg);
  static void set_has_landscape(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::mindspore::irpb::LossLandscape_LossPath& loss_path(const LossLandscape* msg);
  static void set_has_loss_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::mindspore::irpb::LossLandscape_Metadata& metadata(const LossLandscape* msg);
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::mindspore::irpb::LossLandscape_Point& convergence_point(const LossLandscape* msg);
  static void set_has_convergence_point(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::mindspore::irpb::LossLandscape_Point&
LossLandscape::_Internal::landscape(const LossLandscape* msg) {
  return *msg->landscape_;
}
const ::mindspore::irpb::LossLandscape_LossPath&
LossLandscape::_Internal::loss_path(const LossLandscape* msg) {
  return *msg->loss_path_;
}
const ::mindspore::irpb::LossLandscape_Metadata&
LossLandscape::_Internal::metadata(const LossLandscape* msg) {
  return *msg->metadata_;
}
const ::mindspore::irpb::LossLandscape_Point&
LossLandscape::_Internal::convergence_point(const LossLandscape* msg) {
  return *msg->convergence_point_;
}
LossLandscape::LossLandscape(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mindspore.irpb.LossLandscape)
}
LossLandscape::LossLandscape(const LossLandscape& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_landscape()) {
    landscape_ = new ::mindspore::irpb::LossLandscape_Point(*from.landscape_);
  } else {
    landscape_ = nullptr;
  }
  if (from._internal_has_loss_path()) {
    loss_path_ = new ::mindspore::irpb::LossLandscape_LossPath(*from.loss_path_);
  } else {
    loss_path_ = nullptr;
  }
  if (from._internal_has_metadata()) {
    metadata_ = new ::mindspore::irpb::LossLandscape_Metadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  if (from._internal_has_convergence_point()) {
    convergence_point_ = new ::mindspore::irpb::LossLandscape_Point(*from.convergence_point_);
  } else {
    convergence_point_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mindspore.irpb.LossLandscape)
}

void LossLandscape::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LossLandscape_mindspore_5fsummary_2eproto.base);
  ::memset(&landscape_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&convergence_point_) -
      reinterpret_cast<char*>(&landscape_)) + sizeof(convergence_point_));
}

LossLandscape::~LossLandscape() {
  // @@protoc_insertion_point(destructor:mindspore.irpb.LossLandscape)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LossLandscape::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete landscape_;
  if (this != internal_default_instance()) delete loss_path_;
  if (this != internal_default_instance()) delete metadata_;
  if (this != internal_default_instance()) delete convergence_point_;
}

void LossLandscape::ArenaDtor(void* object) {
  LossLandscape* _this = reinterpret_cast< LossLandscape* >(object);
  (void)_this;
}
void LossLandscape::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LossLandscape::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LossLandscape& LossLandscape::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LossLandscape_mindspore_5fsummary_2eproto.base);
  return *internal_default_instance();
}


void LossLandscape::Clear() {
// @@protoc_insertion_point(message_clear_start:mindspore.irpb.LossLandscape)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(landscape_ != nullptr);
      landscape_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(loss_path_ != nullptr);
      loss_path_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(metadata_ != nullptr);
      metadata_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(convergence_point_ != nullptr);
      convergence_point_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LossLandscape::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .mindspore.irpb.LossLandscape.Point landscape = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_landscape(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mindspore.irpb.LossLandscape.LossPath loss_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_loss_path(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mindspore.irpb.LossLandscape.Metadata metadata = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mindspore.irpb.LossLandscape.Point convergence_point = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_convergence_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LossLandscape::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mindspore.irpb.LossLandscape)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mindspore.irpb.LossLandscape.Point landscape = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::landscape(this), target, stream);
  }

  // optional .mindspore.irpb.LossLandscape.LossPath loss_path = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::loss_path(this), target, stream);
  }

  // optional .mindspore.irpb.LossLandscape.Metadata metadata = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::metadata(this), target, stream);
  }

  // optional .mindspore.irpb.LossLandscape.Point convergence_point = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::convergence_point(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mindspore.irpb.LossLandscape)
  return target;
}

size_t LossLandscape::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mindspore.irpb.LossLandscape)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .mindspore.irpb.LossLandscape.Point landscape = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *landscape_);
    }

    // optional .mindspore.irpb.LossLandscape.LossPath loss_path = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *loss_path_);
    }

    // optional .mindspore.irpb.LossLandscape.Metadata metadata = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *metadata_);
    }

    // optional .mindspore.irpb.LossLandscape.Point convergence_point = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *convergence_point_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LossLandscape::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mindspore.irpb.LossLandscape)
  GOOGLE_DCHECK_NE(&from, this);
  const LossLandscape* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LossLandscape>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mindspore.irpb.LossLandscape)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mindspore.irpb.LossLandscape)
    MergeFrom(*source);
  }
}

void LossLandscape::MergeFrom(const LossLandscape& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mindspore.irpb.LossLandscape)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_landscape()->::mindspore::irpb::LossLandscape_Point::MergeFrom(from._internal_landscape());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_loss_path()->::mindspore::irpb::LossLandscape_LossPath::MergeFrom(from._internal_loss_path());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_metadata()->::mindspore::irpb::LossLandscape_Metadata::MergeFrom(from._internal_metadata());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_convergence_point()->::mindspore::irpb::LossLandscape_Point::MergeFrom(from._internal_convergence_point());
    }
  }
}

void LossLandscape::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mindspore.irpb.LossLandscape)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LossLandscape::CopyFrom(const LossLandscape& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mindspore.irpb.LossLandscape)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LossLandscape::IsInitialized() const {
  return true;
}

void LossLandscape::InternalSwap(LossLandscape* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LossLandscape, convergence_point_)
      + sizeof(LossLandscape::convergence_point_)
      - PROTOBUF_FIELD_OFFSET(LossLandscape, landscape_)>(
          reinterpret_cast<char*>(&landscape_),
          reinterpret_cast<char*>(&other->landscape_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LossLandscape::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Summary_Image::InitAsDefaultInstance() {
}
class Summary_Image::_Internal {
 public:
  using HasBits = decltype(std::declval<Summary_Image>()._has_bits_);
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_colorspace(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_encoded_image(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

Summary_Image::Summary_Image(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mindspore.irpb.Summary.Image)
}
Summary_Image::Summary_Image(const Summary_Image& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  encoded_image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_encoded_image()) {
    encoded_image_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_encoded_image(),
      GetArena());
  }
  ::memcpy(&height_, &from.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&colorspace_) -
    reinterpret_cast<char*>(&height_)) + sizeof(colorspace_));
  // @@protoc_insertion_point(copy_constructor:mindspore.irpb.Summary.Image)
}

void Summary_Image::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Summary_Image_mindspore_5fsummary_2eproto.base);
  encoded_image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&colorspace_) -
      reinterpret_cast<char*>(&height_)) + sizeof(colorspace_));
}

Summary_Image::~Summary_Image() {
  // @@protoc_insertion_point(destructor:mindspore.irpb.Summary.Image)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Summary_Image::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  encoded_image_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Summary_Image::ArenaDtor(void* object) {
  Summary_Image* _this = reinterpret_cast< Summary_Image* >(object);
  (void)_this;
}
void Summary_Image::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Summary_Image::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Summary_Image& Summary_Image::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Summary_Image_mindspore_5fsummary_2eproto.base);
  return *internal_default_instance();
}


void Summary_Image::Clear() {
// @@protoc_insertion_point(message_clear_start:mindspore.irpb.Summary.Image)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    encoded_image_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&height_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&colorspace_) -
        reinterpret_cast<char*>(&height_)) + sizeof(colorspace_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Summary_Image::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 height = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 colorspace = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_colorspace(&has_bits);
          colorspace_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes encoded_image = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_encoded_image();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Summary_Image::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mindspore.irpb.Summary.Image)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 height = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_height(), target);
  }

  // required int32 width = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_width(), target);
  }

  // required int32 colorspace = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_colorspace(), target);
  }

  // required bytes encoded_image = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_encoded_image(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mindspore.irpb.Summary.Image)
  return target;
}

size_t Summary_Image::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:mindspore.irpb.Summary.Image)
  size_t total_size = 0;

  if (_internal_has_encoded_image()) {
    // required bytes encoded_image = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_encoded_image());
  }

  if (_internal_has_height()) {
    // required int32 height = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_height());
  }

  if (_internal_has_width()) {
    // required int32 width = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_width());
  }

  if (_internal_has_colorspace()) {
    // required int32 colorspace = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_colorspace());
  }

  return total_size;
}
size_t Summary_Image::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mindspore.irpb.Summary.Image)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required bytes encoded_image = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_encoded_image());

    // required int32 height = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_height());

    // required int32 width = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_width());

    // required int32 colorspace = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_colorspace());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Summary_Image::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mindspore.irpb.Summary.Image)
  GOOGLE_DCHECK_NE(&from, this);
  const Summary_Image* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Summary_Image>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mindspore.irpb.Summary.Image)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mindspore.irpb.Summary.Image)
    MergeFrom(*source);
  }
}

void Summary_Image::MergeFrom(const Summary_Image& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mindspore.irpb.Summary.Image)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_encoded_image(from._internal_encoded_image());
    }
    if (cached_has_bits & 0x00000002u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000004u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000008u) {
      colorspace_ = from.colorspace_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Summary_Image::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mindspore.irpb.Summary.Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Summary_Image::CopyFrom(const Summary_Image& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mindspore.irpb.Summary.Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Summary_Image::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Summary_Image::InternalSwap(Summary_Image* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  encoded_image_.Swap(&other->encoded_image_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Summary_Image, colorspace_)
      + sizeof(Summary_Image::colorspace_)
      - PROTOBUF_FIELD_OFFSET(Summary_Image, height_)>(
          reinterpret_cast<char*>(&height_),
          reinterpret_cast<char*>(&other->height_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Summary_Image::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Summary_Histogram_bucket::InitAsDefaultInstance() {
}
class Summary_Histogram_bucket::_Internal {
 public:
  using HasBits = decltype(std::declval<Summary_Histogram_bucket>()._has_bits_);
  static void set_has_left(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

Summary_Histogram_bucket::Summary_Histogram_bucket(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mindspore.irpb.Summary.Histogram.bucket)
}
Summary_Histogram_bucket::Summary_Histogram_bucket(const Summary_Histogram_bucket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&left_, &from.left_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&left_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:mindspore.irpb.Summary.Histogram.bucket)
}

void Summary_Histogram_bucket::SharedCtor() {
  ::memset(&left_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&left_)) + sizeof(count_));
}

Summary_Histogram_bucket::~Summary_Histogram_bucket() {
  // @@protoc_insertion_point(destructor:mindspore.irpb.Summary.Histogram.bucket)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Summary_Histogram_bucket::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Summary_Histogram_bucket::ArenaDtor(void* object) {
  Summary_Histogram_bucket* _this = reinterpret_cast< Summary_Histogram_bucket* >(object);
  (void)_this;
}
void Summary_Histogram_bucket::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Summary_Histogram_bucket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Summary_Histogram_bucket& Summary_Histogram_bucket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Summary_Histogram_bucket_mindspore_5fsummary_2eproto.base);
  return *internal_default_instance();
}


void Summary_Histogram_bucket::Clear() {
// @@protoc_insertion_point(message_clear_start:mindspore.irpb.Summary.Histogram.bucket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&left_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&count_) -
        reinterpret_cast<char*>(&left_)) + sizeof(count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Summary_Histogram_bucket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required double left = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_left(&has_bits);
          left_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required int64 count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Summary_Histogram_bucket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mindspore.irpb.Summary.Histogram.bucket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double left = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_left(), target);
  }

  // required double width = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_width(), target);
  }

  // required int64 count = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mindspore.irpb.Summary.Histogram.bucket)
  return target;
}

size_t Summary_Histogram_bucket::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:mindspore.irpb.Summary.Histogram.bucket)
  size_t total_size = 0;

  if (_internal_has_left()) {
    // required double left = 1;
    total_size += 1 + 8;
  }

  if (_internal_has_width()) {
    // required double width = 2;
    total_size += 1 + 8;
  }

  if (_internal_has_count()) {
    // required int64 count = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_count());
  }

  return total_size;
}
size_t Summary_Histogram_bucket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mindspore.irpb.Summary.Histogram.bucket)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required double left = 1;
    total_size += 1 + 8;

    // required double width = 2;
    total_size += 1 + 8;

    // required int64 count = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Summary_Histogram_bucket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mindspore.irpb.Summary.Histogram.bucket)
  GOOGLE_DCHECK_NE(&from, this);
  const Summary_Histogram_bucket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Summary_Histogram_bucket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mindspore.irpb.Summary.Histogram.bucket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mindspore.irpb.Summary.Histogram.bucket)
    MergeFrom(*source);
  }
}

void Summary_Histogram_bucket::MergeFrom(const Summary_Histogram_bucket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mindspore.irpb.Summary.Histogram.bucket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      left_ = from.left_;
    }
    if (cached_has_bits & 0x00000002u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000004u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Summary_Histogram_bucket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mindspore.irpb.Summary.Histogram.bucket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Summary_Histogram_bucket::CopyFrom(const Summary_Histogram_bucket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mindspore.irpb.Summary.Histogram.bucket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Summary_Histogram_bucket::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Summary_Histogram_bucket::InternalSwap(Summary_Histogram_bucket* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Summary_Histogram_bucket, count_)
      + sizeof(Summary_Histogram_bucket::count_)
      - PROTOBUF_FIELD_OFFSET(Summary_Histogram_bucket, left_)>(
          reinterpret_cast<char*>(&left_),
          reinterpret_cast<char*>(&other->left_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Summary_Histogram_bucket::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Summary_Histogram::InitAsDefaultInstance() {
}
class Summary_Histogram::_Internal {
 public:
  using HasBits = decltype(std::declval<Summary_Histogram>()._has_bits_);
  static void set_has_nan_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pos_inf_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_neg_inf_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_max(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_min(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_sum(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

Summary_Histogram::Summary_Histogram(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  buckets_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mindspore.irpb.Summary.Histogram)
}
Summary_Histogram::Summary_Histogram(const Summary_Histogram& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      buckets_(from.buckets_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&nan_count_, &from.nan_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&nan_count_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:mindspore.irpb.Summary.Histogram)
}

void Summary_Histogram::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Summary_Histogram_mindspore_5fsummary_2eproto.base);
  ::memset(&nan_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&nan_count_)) + sizeof(count_));
}

Summary_Histogram::~Summary_Histogram() {
  // @@protoc_insertion_point(destructor:mindspore.irpb.Summary.Histogram)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Summary_Histogram::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Summary_Histogram::ArenaDtor(void* object) {
  Summary_Histogram* _this = reinterpret_cast< Summary_Histogram* >(object);
  (void)_this;
}
void Summary_Histogram::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Summary_Histogram::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Summary_Histogram& Summary_Histogram::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Summary_Histogram_mindspore_5fsummary_2eproto.base);
  return *internal_default_instance();
}


void Summary_Histogram::Clear() {
// @@protoc_insertion_point(message_clear_start:mindspore.irpb.Summary.Histogram)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buckets_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&nan_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&count_) -
        reinterpret_cast<char*>(&nan_count_)) + sizeof(count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Summary_Histogram::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .mindspore.irpb.Summary.Histogram.bucket buckets = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_buckets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional int64 nan_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_nan_count(&has_bits);
          nan_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 pos_inf_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_pos_inf_count(&has_bits);
          pos_inf_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 neg_inf_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_neg_inf_count(&has_bits);
          neg_inf_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double max = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_max(&has_bits);
          max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double min = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_min(&has_bits);
          min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double sum = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_sum(&has_bits);
          sum_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int64 count = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Summary_Histogram::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mindspore.irpb.Summary.Histogram)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mindspore.irpb.Summary.Histogram.bucket buckets = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_buckets_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_buckets(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional int64 nan_count = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_nan_count(), target);
  }

  // optional int64 pos_inf_count = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_pos_inf_count(), target);
  }

  // optional int64 neg_inf_count = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_neg_inf_count(), target);
  }

  // optional double max = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_max(), target);
  }

  // optional double min = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_min(), target);
  }

  // optional double sum = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_sum(), target);
  }

  // optional int64 count = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mindspore.irpb.Summary.Histogram)
  return target;
}

size_t Summary_Histogram::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mindspore.irpb.Summary.Histogram)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mindspore.irpb.Summary.Histogram.bucket buckets = 1;
  total_size += 1UL * this->_internal_buckets_size();
  for (const auto& msg : this->buckets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional int64 nan_count = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_nan_count());
    }

    // optional int64 pos_inf_count = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_pos_inf_count());
    }

    // optional int64 neg_inf_count = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_neg_inf_count());
    }

    // optional double max = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double min = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double sum = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional int64 count = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_count());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Summary_Histogram::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mindspore.irpb.Summary.Histogram)
  GOOGLE_DCHECK_NE(&from, this);
  const Summary_Histogram* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Summary_Histogram>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mindspore.irpb.Summary.Histogram)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mindspore.irpb.Summary.Histogram)
    MergeFrom(*source);
  }
}

void Summary_Histogram::MergeFrom(const Summary_Histogram& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mindspore.irpb.Summary.Histogram)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  buckets_.MergeFrom(from.buckets_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      nan_count_ = from.nan_count_;
    }
    if (cached_has_bits & 0x00000002u) {
      pos_inf_count_ = from.pos_inf_count_;
    }
    if (cached_has_bits & 0x00000004u) {
      neg_inf_count_ = from.neg_inf_count_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_ = from.max_;
    }
    if (cached_has_bits & 0x00000010u) {
      min_ = from.min_;
    }
    if (cached_has_bits & 0x00000020u) {
      sum_ = from.sum_;
    }
    if (cached_has_bits & 0x00000040u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Summary_Histogram::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mindspore.irpb.Summary.Histogram)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Summary_Histogram::CopyFrom(const Summary_Histogram& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mindspore.irpb.Summary.Histogram)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Summary_Histogram::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(buckets_)) return false;
  return true;
}

void Summary_Histogram::InternalSwap(Summary_Histogram* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  buckets_.InternalSwap(&other->buckets_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Summary_Histogram, count_)
      + sizeof(Summary_Histogram::count_)
      - PROTOBUF_FIELD_OFFSET(Summary_Histogram, nan_count_)>(
          reinterpret_cast<char*>(&nan_count_),
          reinterpret_cast<char*>(&other->nan_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Summary_Histogram::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Summary_Value::InitAsDefaultInstance() {
  ::mindspore::irpb::_Summary_Value_default_instance_.scalar_value_ = 0;
  ::mindspore::irpb::_Summary_Value_default_instance_.image_ = const_cast< ::mindspore::irpb::Summary_Image*>(
      ::mindspore::irpb::Summary_Image::internal_default_instance());
  ::mindspore::irpb::_Summary_Value_default_instance_.tensor_ = const_cast< ::mindspore::irpb::TensorProto*>(
      ::mindspore::irpb::TensorProto::internal_default_instance());
  ::mindspore::irpb::_Summary_Value_default_instance_.histogram_ = const_cast< ::mindspore::irpb::Summary_Histogram*>(
      ::mindspore::irpb::Summary_Histogram::internal_default_instance());
  ::mindspore::irpb::_Summary_Value_default_instance_.loss_landscape_ = const_cast< ::mindspore::irpb::LossLandscape*>(
      ::mindspore::irpb::LossLandscape::internal_default_instance());
}
class Summary_Value::_Internal {
 public:
  using HasBits = decltype(std::declval<Summary_Value>()._has_bits_);
  static void set_has_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::mindspore::irpb::Summary_Image& image(const Summary_Value* msg);
  static const ::mindspore::irpb::TensorProto& tensor(const Summary_Value* msg);
  static const ::mindspore::irpb::Summary_Histogram& histogram(const Summary_Value* msg);
  static const ::mindspore::irpb::LossLandscape& loss_landscape(const Summary_Value* msg);
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::mindspore::irpb::Summary_Image&
Summary_Value::_Internal::image(const Summary_Value* msg) {
  return *msg->value_.image_;
}
const ::mindspore::irpb::TensorProto&
Summary_Value::_Internal::tensor(const Summary_Value* msg) {
  return *msg->value_.tensor_;
}
const ::mindspore::irpb::Summary_Histogram&
Summary_Value::_Internal::histogram(const Summary_Value* msg) {
  return *msg->value_.histogram_;
}
const ::mindspore::irpb::LossLandscape&
Summary_Value::_Internal::loss_landscape(const Summary_Value* msg) {
  return *msg->value_.loss_landscape_;
}
void Summary_Value::set_allocated_image(::mindspore::irpb::Summary_Image* image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_value();
  if (image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(image);
    if (message_arena != submessage_arena) {
      image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image, submessage_arena);
    }
    set_has_image();
    value_.image_ = image;
  }
  // @@protoc_insertion_point(field_set_allocated:mindspore.irpb.Summary.Value.image)
}
void Summary_Value::set_allocated_tensor(::mindspore::irpb::TensorProto* tensor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_value();
  if (tensor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tensor)->GetArena();
    if (message_arena != submessage_arena) {
      tensor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tensor, submessage_arena);
    }
    set_has_tensor();
    value_.tensor_ = tensor;
  }
  // @@protoc_insertion_point(field_set_allocated:mindspore.irpb.Summary.Value.tensor)
}
void Summary_Value::clear_tensor() {
  if (_internal_has_tensor()) {
    if (GetArena() == nullptr) {
      delete value_.tensor_;
    }
    clear_has_value();
  }
}
void Summary_Value::set_allocated_histogram(::mindspore::irpb::Summary_Histogram* histogram) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_value();
  if (histogram) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(histogram);
    if (message_arena != submessage_arena) {
      histogram = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, histogram, submessage_arena);
    }
    set_has_histogram();
    value_.histogram_ = histogram;
  }
  // @@protoc_insertion_point(field_set_allocated:mindspore.irpb.Summary.Value.histogram)
}
void Summary_Value::set_allocated_loss_landscape(::mindspore::irpb::LossLandscape* loss_landscape) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_value();
  if (loss_landscape) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(loss_landscape);
    if (message_arena != submessage_arena) {
      loss_landscape = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, loss_landscape, submessage_arena);
    }
    set_has_loss_landscape();
    value_.loss_landscape_ = loss_landscape;
  }
  // @@protoc_insertion_point(field_set_allocated:mindspore.irpb.Summary.Value.loss_landscape)
}
Summary_Value::Summary_Value(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mindspore.irpb.Summary.Value)
}
Summary_Value::Summary_Value(const Summary_Value& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_tag()) {
    tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_tag(),
      GetArena());
  }
  clear_has_value();
  switch (from.value_case()) {
    case kScalarValue: {
      _internal_set_scalar_value(from._internal_scalar_value());
      break;
    }
    case kImage: {
      _internal_mutable_image()->::mindspore::irpb::Summary_Image::MergeFrom(from._internal_image());
      break;
    }
    case kTensor: {
      _internal_mutable_tensor()->::mindspore::irpb::TensorProto::MergeFrom(from._internal_tensor());
      break;
    }
    case kHistogram: {
      _internal_mutable_histogram()->::mindspore::irpb::Summary_Histogram::MergeFrom(from._internal_histogram());
      break;
    }
    case kLossLandscape: {
      _internal_mutable_loss_landscape()->::mindspore::irpb::LossLandscape::MergeFrom(from._internal_loss_landscape());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:mindspore.irpb.Summary.Value)
}

void Summary_Value::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Summary_Value_mindspore_5fsummary_2eproto.base);
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}

Summary_Value::~Summary_Value() {
  // @@protoc_insertion_point(destructor:mindspore.irpb.Summary.Value)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Summary_Value::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_value()) {
    clear_value();
  }
}

void Summary_Value::ArenaDtor(void* object) {
  Summary_Value* _this = reinterpret_cast< Summary_Value* >(object);
  (void)_this;
}
void Summary_Value::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Summary_Value::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Summary_Value& Summary_Value::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Summary_Value_mindspore_5fsummary_2eproto.base);
  return *internal_default_instance();
}


void Summary_Value::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:mindspore.irpb.Summary.Value)
  switch (value_case()) {
    case kScalarValue: {
      // No need to clear
      break;
    }
    case kImage: {
      if (GetArena() == nullptr) {
        delete value_.image_;
      }
      break;
    }
    case kTensor: {
      if (GetArena() == nullptr) {
        delete value_.tensor_;
      }
      break;
    }
    case kHistogram: {
      if (GetArena() == nullptr) {
        delete value_.histogram_;
      }
      break;
    }
    case kLossLandscape: {
      if (GetArena() == nullptr) {
        delete value_.loss_landscape_;
      }
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void Summary_Value::Clear() {
// @@protoc_insertion_point(message_clear_start:mindspore.irpb.Summary.Value)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    tag_.ClearNonDefaultToEmpty();
  }
  clear_value();
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Summary_Value::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string tag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_tag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mindspore.irpb.Summary.Value.tag");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float scalar_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _internal_set_scalar_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .mindspore.irpb.Summary.Image image = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_image(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mindspore.irpb.TensorProto tensor = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_tensor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mindspore.irpb.Summary.Histogram histogram = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_histogram(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mindspore.irpb.LossLandscape loss_landscape = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_loss_landscape(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Summary_Value::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mindspore.irpb.Summary.Value)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string tag = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tag().data(), static_cast<int>(this->_internal_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mindspore.irpb.Summary.Value.tag");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tag(), target);
  }

  switch (value_case()) {
    case kScalarValue: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_scalar_value(), target);
      break;
    }
    case kImage: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          4, _Internal::image(this), target, stream);
      break;
    }
    case kTensor: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          8, _Internal::tensor(this), target, stream);
      break;
    }
    case kHistogram: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          9, _Internal::histogram(this), target, stream);
      break;
    }
    case kLossLandscape: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          10, _Internal::loss_landscape(this), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mindspore.irpb.Summary.Value)
  return target;
}

size_t Summary_Value::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mindspore.irpb.Summary.Value)
  size_t total_size = 0;

  // required string tag = 1;
  if (_internal_has_tag()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tag());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (value_case()) {
    // float scalar_value = 3;
    case kScalarValue: {
      total_size += 1 + 4;
      break;
    }
    // .mindspore.irpb.Summary.Image image = 4;
    case kImage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.image_);
      break;
    }
    // .mindspore.irpb.TensorProto tensor = 8;
    case kTensor: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.tensor_);
      break;
    }
    // .mindspore.irpb.Summary.Histogram histogram = 9;
    case kHistogram: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.histogram_);
      break;
    }
    // .mindspore.irpb.LossLandscape loss_landscape = 10;
    case kLossLandscape: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.loss_landscape_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Summary_Value::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mindspore.irpb.Summary.Value)
  GOOGLE_DCHECK_NE(&from, this);
  const Summary_Value* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Summary_Value>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mindspore.irpb.Summary.Value)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mindspore.irpb.Summary.Value)
    MergeFrom(*source);
  }
}

void Summary_Value::MergeFrom(const Summary_Value& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mindspore.irpb.Summary.Value)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_tag()) {
    _internal_set_tag(from._internal_tag());
  }
  switch (from.value_case()) {
    case kScalarValue: {
      _internal_set_scalar_value(from._internal_scalar_value());
      break;
    }
    case kImage: {
      _internal_mutable_image()->::mindspore::irpb::Summary_Image::MergeFrom(from._internal_image());
      break;
    }
    case kTensor: {
      _internal_mutable_tensor()->::mindspore::irpb::TensorProto::MergeFrom(from._internal_tensor());
      break;
    }
    case kHistogram: {
      _internal_mutable_histogram()->::mindspore::irpb::Summary_Histogram::MergeFrom(from._internal_histogram());
      break;
    }
    case kLossLandscape: {
      _internal_mutable_loss_landscape()->::mindspore::irpb::LossLandscape::MergeFrom(from._internal_loss_landscape());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void Summary_Value::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mindspore.irpb.Summary.Value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Summary_Value::CopyFrom(const Summary_Value& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mindspore.irpb.Summary.Value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Summary_Value::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  switch (value_case()) {
    case kScalarValue: {
      break;
    }
    case kImage: {
      if (has_image()) {
        if (!this->image().IsInitialized()) return false;
      }
      break;
    }
    case kTensor: {
      break;
    }
    case kHistogram: {
      if (has_histogram()) {
        if (!this->histogram().IsInitialized()) return false;
      }
      break;
    }
    case kLossLandscape: {
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  return true;
}

void Summary_Value::InternalSwap(Summary_Value* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tag_.Swap(&other->tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Summary_Value::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Summary::InitAsDefaultInstance() {
}
class Summary::_Internal {
 public:
};

Summary::Summary(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  value_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mindspore.irpb.Summary)
}
Summary::Summary(const Summary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      value_(from.value_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mindspore.irpb.Summary)
}

void Summary::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Summary_mindspore_5fsummary_2eproto.base);
}

Summary::~Summary() {
  // @@protoc_insertion_point(destructor:mindspore.irpb.Summary)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Summary::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Summary::ArenaDtor(void* object) {
  Summary* _this = reinterpret_cast< Summary* >(object);
  (void)_this;
}
void Summary::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Summary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Summary& Summary::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Summary_mindspore_5fsummary_2eproto.base);
  return *internal_default_instance();
}


void Summary::Clear() {
// @@protoc_insertion_point(message_clear_start:mindspore.irpb.Summary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Summary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .mindspore.irpb.Summary.Value value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_value(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Summary::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mindspore.irpb.Summary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mindspore.irpb.Summary.Value value = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_value_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_value(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mindspore.irpb.Summary)
  return target;
}

size_t Summary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mindspore.irpb.Summary)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mindspore.irpb.Summary.Value value = 1;
  total_size += 1UL * this->_internal_value_size();
  for (const auto& msg : this->value_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Summary::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mindspore.irpb.Summary)
  GOOGLE_DCHECK_NE(&from, this);
  const Summary* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Summary>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mindspore.irpb.Summary)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mindspore.irpb.Summary)
    MergeFrom(*source);
  }
}

void Summary::MergeFrom(const Summary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mindspore.irpb.Summary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
}

void Summary::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mindspore.irpb.Summary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Summary::CopyFrom(const Summary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mindspore.irpb.Summary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Summary::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(value_)) return false;
  return true;
}

void Summary::InternalSwap(Summary* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  value_.InternalSwap(&other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Summary::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Explain_Inference::InitAsDefaultInstance() {
}
class Explain_Inference::_Internal {
 public:
};

Explain_Inference::Explain_Inference(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ground_truth_prob_(arena),
  predicted_label_(arena),
  predicted_prob_(arena),
  ground_truth_prob_sd_(arena),
  ground_truth_prob_itl95_low_(arena),
  ground_truth_prob_itl95_hi_(arena),
  predicted_prob_sd_(arena),
  predicted_prob_itl95_low_(arena),
  predicted_prob_itl95_hi_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mindspore.irpb.Explain.Inference)
}
Explain_Inference::Explain_Inference(const Explain_Inference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ground_truth_prob_(from.ground_truth_prob_),
      predicted_label_(from.predicted_label_),
      predicted_prob_(from.predicted_prob_),
      ground_truth_prob_sd_(from.ground_truth_prob_sd_),
      ground_truth_prob_itl95_low_(from.ground_truth_prob_itl95_low_),
      ground_truth_prob_itl95_hi_(from.ground_truth_prob_itl95_hi_),
      predicted_prob_sd_(from.predicted_prob_sd_),
      predicted_prob_itl95_low_(from.predicted_prob_itl95_low_),
      predicted_prob_itl95_hi_(from.predicted_prob_itl95_hi_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mindspore.irpb.Explain.Inference)
}

void Explain_Inference::SharedCtor() {
}

Explain_Inference::~Explain_Inference() {
  // @@protoc_insertion_point(destructor:mindspore.irpb.Explain.Inference)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Explain_Inference::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Explain_Inference::ArenaDtor(void* object) {
  Explain_Inference* _this = reinterpret_cast< Explain_Inference* >(object);
  (void)_this;
}
void Explain_Inference::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Explain_Inference::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Explain_Inference& Explain_Inference::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Explain_Inference_mindspore_5fsummary_2eproto.base);
  return *internal_default_instance();
}


void Explain_Inference::Clear() {
// @@protoc_insertion_point(message_clear_start:mindspore.irpb.Explain.Inference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ground_truth_prob_.Clear();
  predicted_label_.Clear();
  predicted_prob_.Clear();
  ground_truth_prob_sd_.Clear();
  ground_truth_prob_itl95_low_.Clear();
  ground_truth_prob_itl95_hi_.Clear();
  predicted_prob_sd_.Clear();
  predicted_prob_itl95_low_.Clear();
  predicted_prob_itl95_hi_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Explain_Inference::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float ground_truth_prob = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_ground_truth_prob(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<13>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_ground_truth_prob(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 predicted_label = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_predicted_label(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_predicted_label(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float predicted_prob = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_predicted_prob(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<29>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_predicted_prob(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float ground_truth_prob_sd = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_ground_truth_prob_sd(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<37>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_ground_truth_prob_sd(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float ground_truth_prob_itl95_low = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_ground_truth_prob_itl95_low(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<45>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_ground_truth_prob_itl95_low(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float ground_truth_prob_itl95_hi = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_ground_truth_prob_itl95_hi(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<53>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_ground_truth_prob_itl95_hi(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float predicted_prob_sd = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_predicted_prob_sd(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<61>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_predicted_prob_sd(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float predicted_prob_itl95_low = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_predicted_prob_itl95_low(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<69>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_predicted_prob_itl95_low(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float predicted_prob_itl95_hi = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_predicted_prob_itl95_hi(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<77>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_predicted_prob_itl95_hi(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Explain_Inference::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mindspore.irpb.Explain.Inference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float ground_truth_prob = 1;
  for (int i = 0, n = this->_internal_ground_truth_prob_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_ground_truth_prob(i), target);
  }

  // repeated int32 predicted_label = 2;
  for (int i = 0, n = this->_internal_predicted_label_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_predicted_label(i), target);
  }

  // repeated float predicted_prob = 3;
  for (int i = 0, n = this->_internal_predicted_prob_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_predicted_prob(i), target);
  }

  // repeated float ground_truth_prob_sd = 4;
  for (int i = 0, n = this->_internal_ground_truth_prob_sd_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_ground_truth_prob_sd(i), target);
  }

  // repeated float ground_truth_prob_itl95_low = 5;
  for (int i = 0, n = this->_internal_ground_truth_prob_itl95_low_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_ground_truth_prob_itl95_low(i), target);
  }

  // repeated float ground_truth_prob_itl95_hi = 6;
  for (int i = 0, n = this->_internal_ground_truth_prob_itl95_hi_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_ground_truth_prob_itl95_hi(i), target);
  }

  // repeated float predicted_prob_sd = 7;
  for (int i = 0, n = this->_internal_predicted_prob_sd_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_predicted_prob_sd(i), target);
  }

  // repeated float predicted_prob_itl95_low = 8;
  for (int i = 0, n = this->_internal_predicted_prob_itl95_low_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_predicted_prob_itl95_low(i), target);
  }

  // repeated float predicted_prob_itl95_hi = 9;
  for (int i = 0, n = this->_internal_predicted_prob_itl95_hi_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_predicted_prob_itl95_hi(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mindspore.irpb.Explain.Inference)
  return target;
}

size_t Explain_Inference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mindspore.irpb.Explain.Inference)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float ground_truth_prob = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_ground_truth_prob_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ground_truth_prob_size());
    total_size += data_size;
  }

  // repeated int32 predicted_label = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->predicted_label_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_predicted_label_size());
    total_size += data_size;
  }

  // repeated float predicted_prob = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_predicted_prob_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_predicted_prob_size());
    total_size += data_size;
  }

  // repeated float ground_truth_prob_sd = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_ground_truth_prob_sd_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ground_truth_prob_sd_size());
    total_size += data_size;
  }

  // repeated float ground_truth_prob_itl95_low = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_ground_truth_prob_itl95_low_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ground_truth_prob_itl95_low_size());
    total_size += data_size;
  }

  // repeated float ground_truth_prob_itl95_hi = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_ground_truth_prob_itl95_hi_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ground_truth_prob_itl95_hi_size());
    total_size += data_size;
  }

  // repeated float predicted_prob_sd = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_predicted_prob_sd_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_predicted_prob_sd_size());
    total_size += data_size;
  }

  // repeated float predicted_prob_itl95_low = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_predicted_prob_itl95_low_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_predicted_prob_itl95_low_size());
    total_size += data_size;
  }

  // repeated float predicted_prob_itl95_hi = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_predicted_prob_itl95_hi_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_predicted_prob_itl95_hi_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Explain_Inference::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mindspore.irpb.Explain.Inference)
  GOOGLE_DCHECK_NE(&from, this);
  const Explain_Inference* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Explain_Inference>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mindspore.irpb.Explain.Inference)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mindspore.irpb.Explain.Inference)
    MergeFrom(*source);
  }
}

void Explain_Inference::MergeFrom(const Explain_Inference& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mindspore.irpb.Explain.Inference)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ground_truth_prob_.MergeFrom(from.ground_truth_prob_);
  predicted_label_.MergeFrom(from.predicted_label_);
  predicted_prob_.MergeFrom(from.predicted_prob_);
  ground_truth_prob_sd_.MergeFrom(from.ground_truth_prob_sd_);
  ground_truth_prob_itl95_low_.MergeFrom(from.ground_truth_prob_itl95_low_);
  ground_truth_prob_itl95_hi_.MergeFrom(from.ground_truth_prob_itl95_hi_);
  predicted_prob_sd_.MergeFrom(from.predicted_prob_sd_);
  predicted_prob_itl95_low_.MergeFrom(from.predicted_prob_itl95_low_);
  predicted_prob_itl95_hi_.MergeFrom(from.predicted_prob_itl95_hi_);
}

void Explain_Inference::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mindspore.irpb.Explain.Inference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Explain_Inference::CopyFrom(const Explain_Inference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mindspore.irpb.Explain.Inference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Explain_Inference::IsInitialized() const {
  return true;
}

void Explain_Inference::InternalSwap(Explain_Inference* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ground_truth_prob_.InternalSwap(&other->ground_truth_prob_);
  predicted_label_.InternalSwap(&other->predicted_label_);
  predicted_prob_.InternalSwap(&other->predicted_prob_);
  ground_truth_prob_sd_.InternalSwap(&other->ground_truth_prob_sd_);
  ground_truth_prob_itl95_low_.InternalSwap(&other->ground_truth_prob_itl95_low_);
  ground_truth_prob_itl95_hi_.InternalSwap(&other->ground_truth_prob_itl95_hi_);
  predicted_prob_sd_.InternalSwap(&other->predicted_prob_sd_);
  predicted_prob_itl95_low_.InternalSwap(&other->predicted_prob_itl95_low_);
  predicted_prob_itl95_hi_.InternalSwap(&other->predicted_prob_itl95_hi_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Explain_Inference::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Explain_Explanation::InitAsDefaultInstance() {
}
class Explain_Explanation::_Internal {
 public:
  using HasBits = decltype(std::declval<Explain_Explanation>()._has_bits_);
  static void set_has_explain_method(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_label(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_heatmap_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Explain_Explanation::Explain_Explanation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mindspore.irpb.Explain.Explanation)
}
Explain_Explanation::Explain_Explanation(const Explain_Explanation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  explain_method_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_explain_method()) {
    explain_method_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_explain_method(),
      GetArena());
  }
  heatmap_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_heatmap_path()) {
    heatmap_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_heatmap_path(),
      GetArena());
  }
  label_ = from.label_;
  // @@protoc_insertion_point(copy_constructor:mindspore.irpb.Explain.Explanation)
}

void Explain_Explanation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Explain_Explanation_mindspore_5fsummary_2eproto.base);
  explain_method_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  heatmap_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  label_ = 0;
}

Explain_Explanation::~Explain_Explanation() {
  // @@protoc_insertion_point(destructor:mindspore.irpb.Explain.Explanation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Explain_Explanation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  explain_method_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  heatmap_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Explain_Explanation::ArenaDtor(void* object) {
  Explain_Explanation* _this = reinterpret_cast< Explain_Explanation* >(object);
  (void)_this;
}
void Explain_Explanation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Explain_Explanation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Explain_Explanation& Explain_Explanation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Explain_Explanation_mindspore_5fsummary_2eproto.base);
  return *internal_default_instance();
}


void Explain_Explanation::Clear() {
// @@protoc_insertion_point(message_clear_start:mindspore.irpb.Explain.Explanation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      explain_method_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      heatmap_path_.ClearNonDefaultToEmpty();
    }
  }
  label_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Explain_Explanation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string explain_method = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_explain_method();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mindspore.irpb.Explain.Explanation.explain_method");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 label = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_label(&has_bits);
          label_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string heatmap_path = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_heatmap_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mindspore.irpb.Explain.Explanation.heatmap_path");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Explain_Explanation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mindspore.irpb.Explain.Explanation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string explain_method = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_explain_method().data(), static_cast<int>(this->_internal_explain_method().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mindspore.irpb.Explain.Explanation.explain_method");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_explain_method(), target);
  }

  // optional int32 label = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_label(), target);
  }

  // optional string heatmap_path = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_heatmap_path().data(), static_cast<int>(this->_internal_heatmap_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mindspore.irpb.Explain.Explanation.heatmap_path");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_heatmap_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mindspore.irpb.Explain.Explanation)
  return target;
}

size_t Explain_Explanation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mindspore.irpb.Explain.Explanation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string explain_method = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_explain_method());
    }

    // optional string heatmap_path = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_heatmap_path());
    }

    // optional int32 label = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_label());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Explain_Explanation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mindspore.irpb.Explain.Explanation)
  GOOGLE_DCHECK_NE(&from, this);
  const Explain_Explanation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Explain_Explanation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mindspore.irpb.Explain.Explanation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mindspore.irpb.Explain.Explanation)
    MergeFrom(*source);
  }
}

void Explain_Explanation::MergeFrom(const Explain_Explanation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mindspore.irpb.Explain.Explanation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_explain_method(from._internal_explain_method());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_heatmap_path(from._internal_heatmap_path());
    }
    if (cached_has_bits & 0x00000004u) {
      label_ = from.label_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Explain_Explanation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mindspore.irpb.Explain.Explanation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Explain_Explanation::CopyFrom(const Explain_Explanation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mindspore.irpb.Explain.Explanation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Explain_Explanation::IsInitialized() const {
  return true;
}

void Explain_Explanation::InternalSwap(Explain_Explanation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  explain_method_.Swap(&other->explain_method_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  heatmap_path_.Swap(&other->heatmap_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(label_, other->label_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Explain_Explanation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Explain_Benchmark::InitAsDefaultInstance() {
}
class Explain_Benchmark::_Internal {
 public:
  using HasBits = decltype(std::declval<Explain_Benchmark>()._has_bits_);
  static void set_has_benchmark_method(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_explain_method(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_total_score(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Explain_Benchmark::Explain_Benchmark(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  label_score_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mindspore.irpb.Explain.Benchmark)
}
Explain_Benchmark::Explain_Benchmark(const Explain_Benchmark& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      label_score_(from.label_score_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  benchmark_method_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_benchmark_method()) {
    benchmark_method_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_benchmark_method(),
      GetArena());
  }
  explain_method_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_explain_method()) {
    explain_method_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_explain_method(),
      GetArena());
  }
  total_score_ = from.total_score_;
  // @@protoc_insertion_point(copy_constructor:mindspore.irpb.Explain.Benchmark)
}

void Explain_Benchmark::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Explain_Benchmark_mindspore_5fsummary_2eproto.base);
  benchmark_method_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  explain_method_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  total_score_ = 0;
}

Explain_Benchmark::~Explain_Benchmark() {
  // @@protoc_insertion_point(destructor:mindspore.irpb.Explain.Benchmark)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Explain_Benchmark::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  benchmark_method_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  explain_method_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Explain_Benchmark::ArenaDtor(void* object) {
  Explain_Benchmark* _this = reinterpret_cast< Explain_Benchmark* >(object);
  (void)_this;
}
void Explain_Benchmark::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Explain_Benchmark::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Explain_Benchmark& Explain_Benchmark::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Explain_Benchmark_mindspore_5fsummary_2eproto.base);
  return *internal_default_instance();
}


void Explain_Benchmark::Clear() {
// @@protoc_insertion_point(message_clear_start:mindspore.irpb.Explain.Benchmark)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  label_score_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      benchmark_method_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      explain_method_.ClearNonDefaultToEmpty();
    }
  }
  total_score_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Explain_Benchmark::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string benchmark_method = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_benchmark_method();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mindspore.irpb.Explain.Benchmark.benchmark_method");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string explain_method = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_explain_method();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mindspore.irpb.Explain.Benchmark.explain_method");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float total_score = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_total_score(&has_bits);
          total_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float label_score = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_label_score(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<37>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_label_score(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Explain_Benchmark::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mindspore.irpb.Explain.Benchmark)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string benchmark_method = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_benchmark_method().data(), static_cast<int>(this->_internal_benchmark_method().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mindspore.irpb.Explain.Benchmark.benchmark_method");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_benchmark_method(), target);
  }

  // optional string explain_method = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_explain_method().data(), static_cast<int>(this->_internal_explain_method().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mindspore.irpb.Explain.Benchmark.explain_method");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_explain_method(), target);
  }

  // optional float total_score = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_total_score(), target);
  }

  // repeated float label_score = 4;
  for (int i = 0, n = this->_internal_label_score_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_label_score(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mindspore.irpb.Explain.Benchmark)
  return target;
}

size_t Explain_Benchmark::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mindspore.irpb.Explain.Benchmark)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float label_score = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_label_score_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_label_score_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string benchmark_method = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_benchmark_method());
    }

    // optional string explain_method = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_explain_method());
    }

    // optional float total_score = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Explain_Benchmark::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mindspore.irpb.Explain.Benchmark)
  GOOGLE_DCHECK_NE(&from, this);
  const Explain_Benchmark* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Explain_Benchmark>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mindspore.irpb.Explain.Benchmark)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mindspore.irpb.Explain.Benchmark)
    MergeFrom(*source);
  }
}

void Explain_Benchmark::MergeFrom(const Explain_Benchmark& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mindspore.irpb.Explain.Benchmark)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  label_score_.MergeFrom(from.label_score_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_benchmark_method(from._internal_benchmark_method());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_explain_method(from._internal_explain_method());
    }
    if (cached_has_bits & 0x00000004u) {
      total_score_ = from.total_score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Explain_Benchmark::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mindspore.irpb.Explain.Benchmark)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Explain_Benchmark::CopyFrom(const Explain_Benchmark& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mindspore.irpb.Explain.Benchmark)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Explain_Benchmark::IsInitialized() const {
  return true;
}

void Explain_Benchmark::InternalSwap(Explain_Benchmark* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  label_score_.InternalSwap(&other->label_score_);
  benchmark_method_.Swap(&other->benchmark_method_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  explain_method_.Swap(&other->explain_method_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(total_score_, other->total_score_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Explain_Benchmark::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Explain_Metadata::InitAsDefaultInstance() {
}
class Explain_Metadata::_Internal {
 public:
};

Explain_Metadata::Explain_Metadata(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  label_(arena),
  explain_method_(arena),
  benchmark_method_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mindspore.irpb.Explain.Metadata)
}
Explain_Metadata::Explain_Metadata(const Explain_Metadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      label_(from.label_),
      explain_method_(from.explain_method_),
      benchmark_method_(from.benchmark_method_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mindspore.irpb.Explain.Metadata)
}

void Explain_Metadata::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Explain_Metadata_mindspore_5fsummary_2eproto.base);
}

Explain_Metadata::~Explain_Metadata() {
  // @@protoc_insertion_point(destructor:mindspore.irpb.Explain.Metadata)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Explain_Metadata::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Explain_Metadata::ArenaDtor(void* object) {
  Explain_Metadata* _this = reinterpret_cast< Explain_Metadata* >(object);
  (void)_this;
}
void Explain_Metadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Explain_Metadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Explain_Metadata& Explain_Metadata::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Explain_Metadata_mindspore_5fsummary_2eproto.base);
  return *internal_default_instance();
}


void Explain_Metadata::Clear() {
// @@protoc_insertion_point(message_clear_start:mindspore.irpb.Explain.Metadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  label_.Clear();
  explain_method_.Clear();
  benchmark_method_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Explain_Metadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string label = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_label();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mindspore.irpb.Explain.Metadata.label");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string explain_method = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_explain_method();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mindspore.irpb.Explain.Metadata.explain_method");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string benchmark_method = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_benchmark_method();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mindspore.irpb.Explain.Metadata.benchmark_method");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Explain_Metadata::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mindspore.irpb.Explain.Metadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string label = 1;
  for (int i = 0, n = this->_internal_label_size(); i < n; i++) {
    const auto& s = this->_internal_label(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mindspore.irpb.Explain.Metadata.label");
    target = stream->WriteString(1, s, target);
  }

  // repeated string explain_method = 2;
  for (int i = 0, n = this->_internal_explain_method_size(); i < n; i++) {
    const auto& s = this->_internal_explain_method(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mindspore.irpb.Explain.Metadata.explain_method");
    target = stream->WriteString(2, s, target);
  }

  // repeated string benchmark_method = 3;
  for (int i = 0, n = this->_internal_benchmark_method_size(); i < n; i++) {
    const auto& s = this->_internal_benchmark_method(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mindspore.irpb.Explain.Metadata.benchmark_method");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mindspore.irpb.Explain.Metadata)
  return target;
}

size_t Explain_Metadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mindspore.irpb.Explain.Metadata)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string label = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(label_.size());
  for (int i = 0, n = label_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      label_.Get(i));
  }

  // repeated string explain_method = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(explain_method_.size());
  for (int i = 0, n = explain_method_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      explain_method_.Get(i));
  }

  // repeated string benchmark_method = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(benchmark_method_.size());
  for (int i = 0, n = benchmark_method_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      benchmark_method_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Explain_Metadata::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mindspore.irpb.Explain.Metadata)
  GOOGLE_DCHECK_NE(&from, this);
  const Explain_Metadata* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Explain_Metadata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mindspore.irpb.Explain.Metadata)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mindspore.irpb.Explain.Metadata)
    MergeFrom(*source);
  }
}

void Explain_Metadata::MergeFrom(const Explain_Metadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mindspore.irpb.Explain.Metadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  label_.MergeFrom(from.label_);
  explain_method_.MergeFrom(from.explain_method_);
  benchmark_method_.MergeFrom(from.benchmark_method_);
}

void Explain_Metadata::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mindspore.irpb.Explain.Metadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Explain_Metadata::CopyFrom(const Explain_Metadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mindspore.irpb.Explain.Metadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Explain_Metadata::IsInitialized() const {
  return true;
}

void Explain_Metadata::InternalSwap(Explain_Metadata* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  label_.InternalSwap(&other->label_);
  explain_method_.InternalSwap(&other->explain_method_);
  benchmark_method_.InternalSwap(&other->benchmark_method_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Explain_Metadata::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Explain_HocLayer::InitAsDefaultInstance() {
}
class Explain_HocLayer::_Internal {
 public:
  using HasBits = decltype(std::declval<Explain_HocLayer>()._has_bits_);
  static void set_has_prob(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Explain_HocLayer::Explain_HocLayer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  box_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mindspore.irpb.Explain.HocLayer)
}
Explain_HocLayer::Explain_HocLayer(const Explain_HocLayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      box_(from.box_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  prob_ = from.prob_;
  // @@protoc_insertion_point(copy_constructor:mindspore.irpb.Explain.HocLayer)
}

void Explain_HocLayer::SharedCtor() {
  prob_ = 0;
}

Explain_HocLayer::~Explain_HocLayer() {
  // @@protoc_insertion_point(destructor:mindspore.irpb.Explain.HocLayer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Explain_HocLayer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Explain_HocLayer::ArenaDtor(void* object) {
  Explain_HocLayer* _this = reinterpret_cast< Explain_HocLayer* >(object);
  (void)_this;
}
void Explain_HocLayer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Explain_HocLayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Explain_HocLayer& Explain_HocLayer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Explain_HocLayer_mindspore_5fsummary_2eproto.base);
  return *internal_default_instance();
}


void Explain_HocLayer::Clear() {
// @@protoc_insertion_point(message_clear_start:mindspore.irpb.Explain.HocLayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  box_.Clear();
  prob_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Explain_HocLayer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float prob = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_prob(&has_bits);
          prob_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated int32 box = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_box(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_box(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Explain_HocLayer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mindspore.irpb.Explain.HocLayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float prob = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_prob(), target);
  }

  // repeated int32 box = 2;
  for (int i = 0, n = this->_internal_box_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_box(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mindspore.irpb.Explain.HocLayer)
  return target;
}

size_t Explain_HocLayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mindspore.irpb.Explain.HocLayer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 box = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->box_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_box_size());
    total_size += data_size;
  }

  // optional float prob = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Explain_HocLayer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mindspore.irpb.Explain.HocLayer)
  GOOGLE_DCHECK_NE(&from, this);
  const Explain_HocLayer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Explain_HocLayer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mindspore.irpb.Explain.HocLayer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mindspore.irpb.Explain.HocLayer)
    MergeFrom(*source);
  }
}

void Explain_HocLayer::MergeFrom(const Explain_HocLayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mindspore.irpb.Explain.HocLayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  box_.MergeFrom(from.box_);
  if (from._internal_has_prob()) {
    _internal_set_prob(from._internal_prob());
  }
}

void Explain_HocLayer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mindspore.irpb.Explain.HocLayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Explain_HocLayer::CopyFrom(const Explain_HocLayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mindspore.irpb.Explain.HocLayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Explain_HocLayer::IsInitialized() const {
  return true;
}

void Explain_HocLayer::InternalSwap(Explain_HocLayer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  box_.InternalSwap(&other->box_);
  swap(prob_, other->prob_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Explain_HocLayer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Explain_Hoc::InitAsDefaultInstance() {
}
class Explain_Hoc::_Internal {
 public:
  using HasBits = decltype(std::declval<Explain_Hoc>()._has_bits_);
  static void set_has_label(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mask(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Explain_Hoc::Explain_Hoc(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  layer_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mindspore.irpb.Explain.Hoc)
}
Explain_Hoc::Explain_Hoc(const Explain_Hoc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      layer_(from.layer_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mask_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_mask()) {
    mask_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_mask(),
      GetArena());
  }
  label_ = from.label_;
  // @@protoc_insertion_point(copy_constructor:mindspore.irpb.Explain.Hoc)
}

void Explain_Hoc::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Explain_Hoc_mindspore_5fsummary_2eproto.base);
  mask_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  label_ = 0;
}

Explain_Hoc::~Explain_Hoc() {
  // @@protoc_insertion_point(destructor:mindspore.irpb.Explain.Hoc)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Explain_Hoc::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  mask_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Explain_Hoc::ArenaDtor(void* object) {
  Explain_Hoc* _this = reinterpret_cast< Explain_Hoc* >(object);
  (void)_this;
}
void Explain_Hoc::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Explain_Hoc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Explain_Hoc& Explain_Hoc::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Explain_Hoc_mindspore_5fsummary_2eproto.base);
  return *internal_default_instance();
}


void Explain_Hoc::Clear() {
// @@protoc_insertion_point(message_clear_start:mindspore.irpb.Explain.Hoc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  layer_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    mask_.ClearNonDefaultToEmpty();
  }
  label_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Explain_Hoc::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 label = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_label(&has_bits);
          label_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string mask = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_mask();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mindspore.irpb.Explain.Hoc.mask");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mindspore.irpb.Explain.HocLayer layer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_layer(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Explain_Hoc::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mindspore.irpb.Explain.Hoc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 label = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_label(), target);
  }

  // optional string mask = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_mask().data(), static_cast<int>(this->_internal_mask().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mindspore.irpb.Explain.Hoc.mask");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_mask(), target);
  }

  // repeated .mindspore.irpb.Explain.HocLayer layer = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_layer_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_layer(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mindspore.irpb.Explain.Hoc)
  return target;
}

size_t Explain_Hoc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mindspore.irpb.Explain.Hoc)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mindspore.irpb.Explain.HocLayer layer = 3;
  total_size += 1UL * this->_internal_layer_size();
  for (const auto& msg : this->layer_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string mask = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mask());
    }

    // optional int32 label = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_label());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Explain_Hoc::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mindspore.irpb.Explain.Hoc)
  GOOGLE_DCHECK_NE(&from, this);
  const Explain_Hoc* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Explain_Hoc>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mindspore.irpb.Explain.Hoc)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mindspore.irpb.Explain.Hoc)
    MergeFrom(*source);
  }
}

void Explain_Hoc::MergeFrom(const Explain_Hoc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mindspore.irpb.Explain.Hoc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  layer_.MergeFrom(from.layer_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_mask(from._internal_mask());
    }
    if (cached_has_bits & 0x00000002u) {
      label_ = from.label_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Explain_Hoc::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mindspore.irpb.Explain.Hoc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Explain_Hoc::CopyFrom(const Explain_Hoc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mindspore.irpb.Explain.Hoc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Explain_Hoc::IsInitialized() const {
  return true;
}

void Explain_Hoc::InternalSwap(Explain_Hoc* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  layer_.InternalSwap(&other->layer_);
  mask_.Swap(&other->mask_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(label_, other->label_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Explain_Hoc::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Explain::InitAsDefaultInstance() {
  ::mindspore::irpb::_Explain_default_instance_._instance.get_mutable()->inference_ = const_cast< ::mindspore::irpb::Explain_Inference*>(
      ::mindspore::irpb::Explain_Inference::internal_default_instance());
  ::mindspore::irpb::_Explain_default_instance_._instance.get_mutable()->metadata_ = const_cast< ::mindspore::irpb::Explain_Metadata*>(
      ::mindspore::irpb::Explain_Metadata::internal_default_instance());
}
class Explain::_Internal {
 public:
  using HasBits = decltype(std::declval<Explain>()._has_bits_);
  static void set_has_sample_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_image_path(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::mindspore::irpb::Explain_Inference& inference(const Explain* msg);
  static void set_has_inference(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::mindspore::irpb::Explain_Metadata& metadata(const Explain* msg);
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::mindspore::irpb::Explain_Inference&
Explain::_Internal::inference(const Explain* msg) {
  return *msg->inference_;
}
const ::mindspore::irpb::Explain_Metadata&
Explain::_Internal::metadata(const Explain* msg) {
  return *msg->metadata_;
}
Explain::Explain(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ground_truth_label_(arena),
  explanation_(arena),
  benchmark_(arena),
  hoc_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mindspore.irpb.Explain)
}
Explain::Explain(const Explain& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      ground_truth_label_(from.ground_truth_label_),
      explanation_(from.explanation_),
      benchmark_(from.benchmark_),
      hoc_(from.hoc_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  image_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_image_path()) {
    image_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_image_path(),
      GetArena());
  }
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_status()) {
    status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_status(),
      GetArena());
  }
  if (from._internal_has_inference()) {
    inference_ = new ::mindspore::irpb::Explain_Inference(*from.inference_);
  } else {
    inference_ = nullptr;
  }
  if (from._internal_has_metadata()) {
    metadata_ = new ::mindspore::irpb::Explain_Metadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  sample_id_ = from.sample_id_;
  // @@protoc_insertion_point(copy_constructor:mindspore.irpb.Explain)
}

void Explain::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Explain_mindspore_5fsummary_2eproto.base);
  image_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&inference_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sample_id_) -
      reinterpret_cast<char*>(&inference_)) + sizeof(sample_id_));
}

Explain::~Explain() {
  // @@protoc_insertion_point(destructor:mindspore.irpb.Explain)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Explain::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  image_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete inference_;
  if (this != internal_default_instance()) delete metadata_;
}

void Explain::ArenaDtor(void* object) {
  Explain* _this = reinterpret_cast< Explain* >(object);
  (void)_this;
}
void Explain::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Explain::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Explain& Explain::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Explain_mindspore_5fsummary_2eproto.base);
  return *internal_default_instance();
}


void Explain::Clear() {
// @@protoc_insertion_point(message_clear_start:mindspore.irpb.Explain)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ground_truth_label_.Clear();
  explanation_.Clear();
  benchmark_.Clear();
  hoc_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      image_path_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      status_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(inference_ != nullptr);
      inference_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(metadata_ != nullptr);
      metadata_->Clear();
    }
  }
  sample_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Explain::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 sample_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_sample_id(&has_bits);
          sample_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string image_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_image_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mindspore.irpb.Explain.image_path");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 ground_truth_label = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_ground_truth_label(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_ground_truth_label(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mindspore.irpb.Explain.Inference inference = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_inference(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mindspore.irpb.Explain.Explanation explanation = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_explanation(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .mindspore.irpb.Explain.Benchmark benchmark = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_benchmark(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .mindspore.irpb.Explain.Metadata metadata = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string status = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mindspore.irpb.Explain.status");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mindspore.irpb.Explain.Hoc hoc = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hoc(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Explain::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mindspore.irpb.Explain)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 sample_id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_sample_id(), target);
  }

  // optional string image_path = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_image_path().data(), static_cast<int>(this->_internal_image_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mindspore.irpb.Explain.image_path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_image_path(), target);
  }

  // repeated int32 ground_truth_label = 3;
  for (int i = 0, n = this->_internal_ground_truth_label_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_ground_truth_label(i), target);
  }

  // optional .mindspore.irpb.Explain.Inference inference = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::inference(this), target, stream);
  }

  // repeated .mindspore.irpb.Explain.Explanation explanation = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_explanation_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_explanation(i), target, stream);
  }

  // repeated .mindspore.irpb.Explain.Benchmark benchmark = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_benchmark_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_benchmark(i), target, stream);
  }

  // optional .mindspore.irpb.Explain.Metadata metadata = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::metadata(this), target, stream);
  }

  // optional string status = 8;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "mindspore.irpb.Explain.status");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_status(), target);
  }

  // repeated .mindspore.irpb.Explain.Hoc hoc = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_hoc_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_hoc(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mindspore.irpb.Explain)
  return target;
}

size_t Explain::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mindspore.irpb.Explain)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 ground_truth_label = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->ground_truth_label_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ground_truth_label_size());
    total_size += data_size;
  }

  // repeated .mindspore.irpb.Explain.Explanation explanation = 5;
  total_size += 1UL * this->_internal_explanation_size();
  for (const auto& msg : this->explanation_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mindspore.irpb.Explain.Benchmark benchmark = 6;
  total_size += 1UL * this->_internal_benchmark_size();
  for (const auto& msg : this->benchmark_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .mindspore.irpb.Explain.Hoc hoc = 9;
  total_size += 1UL * this->_internal_hoc_size();
  for (const auto& msg : this->hoc_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string image_path = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_image_path());
    }

    // optional string status = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_status());
    }

    // optional .mindspore.irpb.Explain.Inference inference = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *inference_);
    }

    // optional .mindspore.irpb.Explain.Metadata metadata = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *metadata_);
    }

    // optional int32 sample_id = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_sample_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Explain::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mindspore.irpb.Explain)
  GOOGLE_DCHECK_NE(&from, this);
  const Explain* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Explain>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mindspore.irpb.Explain)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mindspore.irpb.Explain)
    MergeFrom(*source);
  }
}

void Explain::MergeFrom(const Explain& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mindspore.irpb.Explain)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ground_truth_label_.MergeFrom(from.ground_truth_label_);
  explanation_.MergeFrom(from.explanation_);
  benchmark_.MergeFrom(from.benchmark_);
  hoc_.MergeFrom(from.hoc_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_image_path(from._internal_image_path());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_status(from._internal_status());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_inference()->::mindspore::irpb::Explain_Inference::MergeFrom(from._internal_inference());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_metadata()->::mindspore::irpb::Explain_Metadata::MergeFrom(from._internal_metadata());
    }
    if (cached_has_bits & 0x00000010u) {
      sample_id_ = from.sample_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Explain::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mindspore.irpb.Explain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Explain::CopyFrom(const Explain& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mindspore.irpb.Explain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Explain::IsInitialized() const {
  return true;
}

void Explain::InternalSwap(Explain* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ground_truth_label_.InternalSwap(&other->ground_truth_label_);
  explanation_.InternalSwap(&other->explanation_);
  benchmark_.InternalSwap(&other->benchmark_);
  hoc_.InternalSwap(&other->hoc_);
  image_path_.Swap(&other->image_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  status_.Swap(&other->status_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Explain, sample_id_)
      + sizeof(Explain::sample_id_)
      - PROTOBUF_FIELD_OFFSET(Explain, inference_)>(
          reinterpret_cast<char*>(&inference_),
          reinterpret_cast<char*>(&other->inference_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Explain::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace irpb
}  // namespace mindspore
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mindspore::irpb::Event* Arena::CreateMaybeMessage< ::mindspore::irpb::Event >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mindspore::irpb::Event >(arena);
}
template<> PROTOBUF_NOINLINE ::mindspore::irpb::LossLandscape_Point* Arena::CreateMaybeMessage< ::mindspore::irpb::LossLandscape_Point >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mindspore::irpb::LossLandscape_Point >(arena);
}
template<> PROTOBUF_NOINLINE ::mindspore::irpb::LossLandscape_LossPath* Arena::CreateMaybeMessage< ::mindspore::irpb::LossLandscape_LossPath >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mindspore::irpb::LossLandscape_LossPath >(arena);
}
template<> PROTOBUF_NOINLINE ::mindspore::irpb::LossLandscape_Metadata* Arena::CreateMaybeMessage< ::mindspore::irpb::LossLandscape_Metadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mindspore::irpb::LossLandscape_Metadata >(arena);
}
template<> PROTOBUF_NOINLINE ::mindspore::irpb::LossLandscape* Arena::CreateMaybeMessage< ::mindspore::irpb::LossLandscape >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mindspore::irpb::LossLandscape >(arena);
}
template<> PROTOBUF_NOINLINE ::mindspore::irpb::Summary_Image* Arena::CreateMaybeMessage< ::mindspore::irpb::Summary_Image >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mindspore::irpb::Summary_Image >(arena);
}
template<> PROTOBUF_NOINLINE ::mindspore::irpb::Summary_Histogram_bucket* Arena::CreateMaybeMessage< ::mindspore::irpb::Summary_Histogram_bucket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mindspore::irpb::Summary_Histogram_bucket >(arena);
}
template<> PROTOBUF_NOINLINE ::mindspore::irpb::Summary_Histogram* Arena::CreateMaybeMessage< ::mindspore::irpb::Summary_Histogram >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mindspore::irpb::Summary_Histogram >(arena);
}
template<> PROTOBUF_NOINLINE ::mindspore::irpb::Summary_Value* Arena::CreateMaybeMessage< ::mindspore::irpb::Summary_Value >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mindspore::irpb::Summary_Value >(arena);
}
template<> PROTOBUF_NOINLINE ::mindspore::irpb::Summary* Arena::CreateMaybeMessage< ::mindspore::irpb::Summary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mindspore::irpb::Summary >(arena);
}
template<> PROTOBUF_NOINLINE ::mindspore::irpb::Explain_Inference* Arena::CreateMaybeMessage< ::mindspore::irpb::Explain_Inference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mindspore::irpb::Explain_Inference >(arena);
}
template<> PROTOBUF_NOINLINE ::mindspore::irpb::Explain_Explanation* Arena::CreateMaybeMessage< ::mindspore::irpb::Explain_Explanation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mindspore::irpb::Explain_Explanation >(arena);
}
template<> PROTOBUF_NOINLINE ::mindspore::irpb::Explain_Benchmark* Arena::CreateMaybeMessage< ::mindspore::irpb::Explain_Benchmark >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mindspore::irpb::Explain_Benchmark >(arena);
}
template<> PROTOBUF_NOINLINE ::mindspore::irpb::Explain_Metadata* Arena::CreateMaybeMessage< ::mindspore::irpb::Explain_Metadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mindspore::irpb::Explain_Metadata >(arena);
}
template<> PROTOBUF_NOINLINE ::mindspore::irpb::Explain_HocLayer* Arena::CreateMaybeMessage< ::mindspore::irpb::Explain_HocLayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mindspore::irpb::Explain_HocLayer >(arena);
}
template<> PROTOBUF_NOINLINE ::mindspore::irpb::Explain_Hoc* Arena::CreateMaybeMessage< ::mindspore::irpb::Explain_Hoc >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mindspore::irpb::Explain_Hoc >(arena);
}
template<> PROTOBUF_NOINLINE ::mindspore::irpb::Explain* Arena::CreateMaybeMessage< ::mindspore::irpb::Explain >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mindspore::irpb::Explain >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
