// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mindspore_summary.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mindspore_5fsummary_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mindspore_5fsummary_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "mindspore_anf_ir.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mindspore_5fsummary_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mindspore_5fsummary_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[17]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mindspore_5fsummary_2eproto;
namespace mindspore {
namespace irpb {
class Event;
class EventDefaultTypeInternal;
extern EventDefaultTypeInternal _Event_default_instance_;
class Explain;
class ExplainDefaultTypeInternal;
extern ExplainDefaultTypeInternal _Explain_default_instance_;
class Explain_Benchmark;
class Explain_BenchmarkDefaultTypeInternal;
extern Explain_BenchmarkDefaultTypeInternal _Explain_Benchmark_default_instance_;
class Explain_Explanation;
class Explain_ExplanationDefaultTypeInternal;
extern Explain_ExplanationDefaultTypeInternal _Explain_Explanation_default_instance_;
class Explain_Hoc;
class Explain_HocDefaultTypeInternal;
extern Explain_HocDefaultTypeInternal _Explain_Hoc_default_instance_;
class Explain_HocLayer;
class Explain_HocLayerDefaultTypeInternal;
extern Explain_HocLayerDefaultTypeInternal _Explain_HocLayer_default_instance_;
class Explain_Inference;
class Explain_InferenceDefaultTypeInternal;
extern Explain_InferenceDefaultTypeInternal _Explain_Inference_default_instance_;
class Explain_Metadata;
class Explain_MetadataDefaultTypeInternal;
extern Explain_MetadataDefaultTypeInternal _Explain_Metadata_default_instance_;
class LossLandscape;
class LossLandscapeDefaultTypeInternal;
extern LossLandscapeDefaultTypeInternal _LossLandscape_default_instance_;
class LossLandscape_LossPath;
class LossLandscape_LossPathDefaultTypeInternal;
extern LossLandscape_LossPathDefaultTypeInternal _LossLandscape_LossPath_default_instance_;
class LossLandscape_Metadata;
class LossLandscape_MetadataDefaultTypeInternal;
extern LossLandscape_MetadataDefaultTypeInternal _LossLandscape_Metadata_default_instance_;
class LossLandscape_Point;
class LossLandscape_PointDefaultTypeInternal;
extern LossLandscape_PointDefaultTypeInternal _LossLandscape_Point_default_instance_;
class Summary;
class SummaryDefaultTypeInternal;
extern SummaryDefaultTypeInternal _Summary_default_instance_;
class Summary_Histogram;
class Summary_HistogramDefaultTypeInternal;
extern Summary_HistogramDefaultTypeInternal _Summary_Histogram_default_instance_;
class Summary_Histogram_bucket;
class Summary_Histogram_bucketDefaultTypeInternal;
extern Summary_Histogram_bucketDefaultTypeInternal _Summary_Histogram_bucket_default_instance_;
class Summary_Image;
class Summary_ImageDefaultTypeInternal;
extern Summary_ImageDefaultTypeInternal _Summary_Image_default_instance_;
class Summary_Value;
class Summary_ValueDefaultTypeInternal;
extern Summary_ValueDefaultTypeInternal _Summary_Value_default_instance_;
}  // namespace irpb
}  // namespace mindspore
PROTOBUF_NAMESPACE_OPEN
template<> ::mindspore::irpb::Event* Arena::CreateMaybeMessage<::mindspore::irpb::Event>(Arena*);
template<> ::mindspore::irpb::Explain* Arena::CreateMaybeMessage<::mindspore::irpb::Explain>(Arena*);
template<> ::mindspore::irpb::Explain_Benchmark* Arena::CreateMaybeMessage<::mindspore::irpb::Explain_Benchmark>(Arena*);
template<> ::mindspore::irpb::Explain_Explanation* Arena::CreateMaybeMessage<::mindspore::irpb::Explain_Explanation>(Arena*);
template<> ::mindspore::irpb::Explain_Hoc* Arena::CreateMaybeMessage<::mindspore::irpb::Explain_Hoc>(Arena*);
template<> ::mindspore::irpb::Explain_HocLayer* Arena::CreateMaybeMessage<::mindspore::irpb::Explain_HocLayer>(Arena*);
template<> ::mindspore::irpb::Explain_Inference* Arena::CreateMaybeMessage<::mindspore::irpb::Explain_Inference>(Arena*);
template<> ::mindspore::irpb::Explain_Metadata* Arena::CreateMaybeMessage<::mindspore::irpb::Explain_Metadata>(Arena*);
template<> ::mindspore::irpb::LossLandscape* Arena::CreateMaybeMessage<::mindspore::irpb::LossLandscape>(Arena*);
template<> ::mindspore::irpb::LossLandscape_LossPath* Arena::CreateMaybeMessage<::mindspore::irpb::LossLandscape_LossPath>(Arena*);
template<> ::mindspore::irpb::LossLandscape_Metadata* Arena::CreateMaybeMessage<::mindspore::irpb::LossLandscape_Metadata>(Arena*);
template<> ::mindspore::irpb::LossLandscape_Point* Arena::CreateMaybeMessage<::mindspore::irpb::LossLandscape_Point>(Arena*);
template<> ::mindspore::irpb::Summary* Arena::CreateMaybeMessage<::mindspore::irpb::Summary>(Arena*);
template<> ::mindspore::irpb::Summary_Histogram* Arena::CreateMaybeMessage<::mindspore::irpb::Summary_Histogram>(Arena*);
template<> ::mindspore::irpb::Summary_Histogram_bucket* Arena::CreateMaybeMessage<::mindspore::irpb::Summary_Histogram_bucket>(Arena*);
template<> ::mindspore::irpb::Summary_Image* Arena::CreateMaybeMessage<::mindspore::irpb::Summary_Image>(Arena*);
template<> ::mindspore::irpb::Summary_Value* Arena::CreateMaybeMessage<::mindspore::irpb::Summary_Value>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mindspore {
namespace irpb {

// ===================================================================

class Event PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mindspore.irpb.Event) */ {
 public:
  inline Event() : Event(nullptr) {}
  virtual ~Event();

  Event(const Event& from);
  Event(Event&& from) noexcept
    : Event() {
    *this = ::std::move(from);
  }

  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }
  inline Event& operator=(Event&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Event& default_instance();

  enum WhatCase {
    kVersion = 3,
    kGraphDef = 4,
    kSummary = 5,
    kExplain = 6,
    WHAT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event* internal_default_instance() {
    return reinterpret_cast<const Event*>(
               &_Event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Event& a, Event& b) {
    a.Swap(&b);
  }
  inline void Swap(Event* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Event* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Event* New() const final {
    return CreateMaybeMessage<Event>(nullptr);
  }

  Event* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Event>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Event& from);
  void MergeFrom(const Event& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mindspore.irpb.Event";
  }
  protected:
  explicit Event(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mindspore_5fsummary_2eproto);
    return ::descriptor_table_mindspore_5fsummary_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWallTimeFieldNumber = 1,
    kStepFieldNumber = 2,
    kVersionFieldNumber = 3,
    kGraphDefFieldNumber = 4,
    kSummaryFieldNumber = 5,
    kExplainFieldNumber = 6,
  };
  // required double wall_time = 1;
  bool has_wall_time() const;
  private:
  bool _internal_has_wall_time() const;
  public:
  void clear_wall_time();
  double wall_time() const;
  void set_wall_time(double value);
  private:
  double _internal_wall_time() const;
  void _internal_set_wall_time(double value);
  public:

  // optional int64 step = 2;
  bool has_step() const;
  private:
  bool _internal_has_step() const;
  public:
  void clear_step();
  ::PROTOBUF_NAMESPACE_ID::int64 step() const;
  void set_step(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_step() const;
  void _internal_set_step(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // string version = 3;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // .mindspore.irpb.GraphProto graph_def = 4;
  bool has_graph_def() const;
  private:
  bool _internal_has_graph_def() const;
  public:
  void clear_graph_def();
  const ::mindspore::irpb::GraphProto& graph_def() const;
  ::mindspore::irpb::GraphProto* release_graph_def();
  ::mindspore::irpb::GraphProto* mutable_graph_def();
  void set_allocated_graph_def(::mindspore::irpb::GraphProto* graph_def);
  private:
  const ::mindspore::irpb::GraphProto& _internal_graph_def() const;
  ::mindspore::irpb::GraphProto* _internal_mutable_graph_def();
  public:
  void unsafe_arena_set_allocated_graph_def(
      ::mindspore::irpb::GraphProto* graph_def);
  ::mindspore::irpb::GraphProto* unsafe_arena_release_graph_def();

  // .mindspore.irpb.Summary summary = 5;
  bool has_summary() const;
  private:
  bool _internal_has_summary() const;
  public:
  void clear_summary();
  const ::mindspore::irpb::Summary& summary() const;
  ::mindspore::irpb::Summary* release_summary();
  ::mindspore::irpb::Summary* mutable_summary();
  void set_allocated_summary(::mindspore::irpb::Summary* summary);
  private:
  const ::mindspore::irpb::Summary& _internal_summary() const;
  ::mindspore::irpb::Summary* _internal_mutable_summary();
  public:
  void unsafe_arena_set_allocated_summary(
      ::mindspore::irpb::Summary* summary);
  ::mindspore::irpb::Summary* unsafe_arena_release_summary();

  // .mindspore.irpb.Explain explain = 6;
  bool has_explain() const;
  private:
  bool _internal_has_explain() const;
  public:
  void clear_explain();
  const ::mindspore::irpb::Explain& explain() const;
  ::mindspore::irpb::Explain* release_explain();
  ::mindspore::irpb::Explain* mutable_explain();
  void set_allocated_explain(::mindspore::irpb::Explain* explain);
  private:
  const ::mindspore::irpb::Explain& _internal_explain() const;
  ::mindspore::irpb::Explain* _internal_mutable_explain();
  public:
  void unsafe_arena_set_allocated_explain(
      ::mindspore::irpb::Explain* explain);
  ::mindspore::irpb::Explain* unsafe_arena_release_explain();

  void clear_what();
  WhatCase what_case() const;
  // @@protoc_insertion_point(class_scope:mindspore.irpb.Event)
 private:
  class _Internal;
  void set_has_version();
  void set_has_graph_def();
  void set_has_summary();
  void set_has_explain();

  inline bool has_what() const;
  inline void clear_has_what();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double wall_time_;
  ::PROTOBUF_NAMESPACE_ID::int64 step_;
  union WhatUnion {
    WhatUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
    ::mindspore::irpb::GraphProto* graph_def_;
    ::mindspore::irpb::Summary* summary_;
    ::mindspore::irpb::Explain* explain_;
  } what_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_mindspore_5fsummary_2eproto;
};
// -------------------------------------------------------------------

class LossLandscape_Point PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mindspore.irpb.LossLandscape.Point) */ {
 public:
  inline LossLandscape_Point() : LossLandscape_Point(nullptr) {}
  virtual ~LossLandscape_Point();

  LossLandscape_Point(const LossLandscape_Point& from);
  LossLandscape_Point(LossLandscape_Point&& from) noexcept
    : LossLandscape_Point() {
    *this = ::std::move(from);
  }

  inline LossLandscape_Point& operator=(const LossLandscape_Point& from) {
    CopyFrom(from);
    return *this;
  }
  inline LossLandscape_Point& operator=(LossLandscape_Point&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LossLandscape_Point& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LossLandscape_Point* internal_default_instance() {
    return reinterpret_cast<const LossLandscape_Point*>(
               &_LossLandscape_Point_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LossLandscape_Point& a, LossLandscape_Point& b) {
    a.Swap(&b);
  }
  inline void Swap(LossLandscape_Point* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LossLandscape_Point* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LossLandscape_Point* New() const final {
    return CreateMaybeMessage<LossLandscape_Point>(nullptr);
  }

  LossLandscape_Point* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LossLandscape_Point>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LossLandscape_Point& from);
  void MergeFrom(const LossLandscape_Point& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LossLandscape_Point* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mindspore.irpb.LossLandscape.Point";
  }
  protected:
  explicit LossLandscape_Point(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mindspore_5fsummary_2eproto);
    return ::descriptor_table_mindspore_5fsummary_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // optional .mindspore.irpb.TensorProto x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  const ::mindspore::irpb::TensorProto& x() const;
  ::mindspore::irpb::TensorProto* release_x();
  ::mindspore::irpb::TensorProto* mutable_x();
  void set_allocated_x(::mindspore::irpb::TensorProto* x);
  private:
  const ::mindspore::irpb::TensorProto& _internal_x() const;
  ::mindspore::irpb::TensorProto* _internal_mutable_x();
  public:
  void unsafe_arena_set_allocated_x(
      ::mindspore::irpb::TensorProto* x);
  ::mindspore::irpb::TensorProto* unsafe_arena_release_x();

  // optional .mindspore.irpb.TensorProto y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  const ::mindspore::irpb::TensorProto& y() const;
  ::mindspore::irpb::TensorProto* release_y();
  ::mindspore::irpb::TensorProto* mutable_y();
  void set_allocated_y(::mindspore::irpb::TensorProto* y);
  private:
  const ::mindspore::irpb::TensorProto& _internal_y() const;
  ::mindspore::irpb::TensorProto* _internal_mutable_y();
  public:
  void unsafe_arena_set_allocated_y(
      ::mindspore::irpb::TensorProto* y);
  ::mindspore::irpb::TensorProto* unsafe_arena_release_y();

  // optional .mindspore.irpb.TensorProto z = 3;
  bool has_z() const;
  private:
  bool _internal_has_z() const;
  public:
  void clear_z();
  const ::mindspore::irpb::TensorProto& z() const;
  ::mindspore::irpb::TensorProto* release_z();
  ::mindspore::irpb::TensorProto* mutable_z();
  void set_allocated_z(::mindspore::irpb::TensorProto* z);
  private:
  const ::mindspore::irpb::TensorProto& _internal_z() const;
  ::mindspore::irpb::TensorProto* _internal_mutable_z();
  public:
  void unsafe_arena_set_allocated_z(
      ::mindspore::irpb::TensorProto* z);
  ::mindspore::irpb::TensorProto* unsafe_arena_release_z();

  // @@protoc_insertion_point(class_scope:mindspore.irpb.LossLandscape.Point)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::mindspore::irpb::TensorProto* x_;
  ::mindspore::irpb::TensorProto* y_;
  ::mindspore::irpb::TensorProto* z_;
  friend struct ::TableStruct_mindspore_5fsummary_2eproto;
};
// -------------------------------------------------------------------

class LossLandscape_LossPath PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mindspore.irpb.LossLandscape.LossPath) */ {
 public:
  inline LossLandscape_LossPath() : LossLandscape_LossPath(nullptr) {}
  virtual ~LossLandscape_LossPath();

  LossLandscape_LossPath(const LossLandscape_LossPath& from);
  LossLandscape_LossPath(LossLandscape_LossPath&& from) noexcept
    : LossLandscape_LossPath() {
    *this = ::std::move(from);
  }

  inline LossLandscape_LossPath& operator=(const LossLandscape_LossPath& from) {
    CopyFrom(from);
    return *this;
  }
  inline LossLandscape_LossPath& operator=(LossLandscape_LossPath&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LossLandscape_LossPath& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LossLandscape_LossPath* internal_default_instance() {
    return reinterpret_cast<const LossLandscape_LossPath*>(
               &_LossLandscape_LossPath_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LossLandscape_LossPath& a, LossLandscape_LossPath& b) {
    a.Swap(&b);
  }
  inline void Swap(LossLandscape_LossPath* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LossLandscape_LossPath* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LossLandscape_LossPath* New() const final {
    return CreateMaybeMessage<LossLandscape_LossPath>(nullptr);
  }

  LossLandscape_LossPath* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LossLandscape_LossPath>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LossLandscape_LossPath& from);
  void MergeFrom(const LossLandscape_LossPath& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LossLandscape_LossPath* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mindspore.irpb.LossLandscape.LossPath";
  }
  protected:
  explicit LossLandscape_LossPath(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mindspore_5fsummary_2eproto);
    return ::descriptor_table_mindspore_5fsummary_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIntervalsFieldNumber = 1,
    kPointsFieldNumber = 2,
  };
  // repeated int32 intervals = 1;
  int intervals_size() const;
  private:
  int _internal_intervals_size() const;
  public:
  void clear_intervals();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_intervals(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_intervals() const;
  void _internal_add_intervals(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_intervals();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 intervals(int index) const;
  void set_intervals(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_intervals(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      intervals() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_intervals();

  // optional .mindspore.irpb.LossLandscape.Point points = 2;
  bool has_points() const;
  private:
  bool _internal_has_points() const;
  public:
  void clear_points();
  const ::mindspore::irpb::LossLandscape_Point& points() const;
  ::mindspore::irpb::LossLandscape_Point* release_points();
  ::mindspore::irpb::LossLandscape_Point* mutable_points();
  void set_allocated_points(::mindspore::irpb::LossLandscape_Point* points);
  private:
  const ::mindspore::irpb::LossLandscape_Point& _internal_points() const;
  ::mindspore::irpb::LossLandscape_Point* _internal_mutable_points();
  public:
  void unsafe_arena_set_allocated_points(
      ::mindspore::irpb::LossLandscape_Point* points);
  ::mindspore::irpb::LossLandscape_Point* unsafe_arena_release_points();

  // @@protoc_insertion_point(class_scope:mindspore.irpb.LossLandscape.LossPath)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > intervals_;
  ::mindspore::irpb::LossLandscape_Point* points_;
  friend struct ::TableStruct_mindspore_5fsummary_2eproto;
};
// -------------------------------------------------------------------

class LossLandscape_Metadata PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mindspore.irpb.LossLandscape.Metadata) */ {
 public:
  inline LossLandscape_Metadata() : LossLandscape_Metadata(nullptr) {}
  virtual ~LossLandscape_Metadata();

  LossLandscape_Metadata(const LossLandscape_Metadata& from);
  LossLandscape_Metadata(LossLandscape_Metadata&& from) noexcept
    : LossLandscape_Metadata() {
    *this = ::std::move(from);
  }

  inline LossLandscape_Metadata& operator=(const LossLandscape_Metadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline LossLandscape_Metadata& operator=(LossLandscape_Metadata&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LossLandscape_Metadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LossLandscape_Metadata* internal_default_instance() {
    return reinterpret_cast<const LossLandscape_Metadata*>(
               &_LossLandscape_Metadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(LossLandscape_Metadata& a, LossLandscape_Metadata& b) {
    a.Swap(&b);
  }
  inline void Swap(LossLandscape_Metadata* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LossLandscape_Metadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LossLandscape_Metadata* New() const final {
    return CreateMaybeMessage<LossLandscape_Metadata>(nullptr);
  }

  LossLandscape_Metadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LossLandscape_Metadata>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LossLandscape_Metadata& from);
  void MergeFrom(const LossLandscape_Metadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LossLandscape_Metadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mindspore.irpb.LossLandscape.Metadata";
  }
  protected:
  explicit LossLandscape_Metadata(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mindspore_5fsummary_2eproto);
    return ::descriptor_table_mindspore_5fsummary_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDecompositionFieldNumber = 1,
    kUnitFieldNumber = 2,
    kStepPerEpochFieldNumber = 3,
  };
  // optional string decomposition = 1;
  bool has_decomposition() const;
  private:
  bool _internal_has_decomposition() const;
  public:
  void clear_decomposition();
  const std::string& decomposition() const;
  void set_decomposition(const std::string& value);
  void set_decomposition(std::string&& value);
  void set_decomposition(const char* value);
  void set_decomposition(const char* value, size_t size);
  std::string* mutable_decomposition();
  std::string* release_decomposition();
  void set_allocated_decomposition(std::string* decomposition);
  private:
  const std::string& _internal_decomposition() const;
  void _internal_set_decomposition(const std::string& value);
  std::string* _internal_mutable_decomposition();
  public:

  // optional string unit = 2;
  bool has_unit() const;
  private:
  bool _internal_has_unit() const;
  public:
  void clear_unit();
  const std::string& unit() const;
  void set_unit(const std::string& value);
  void set_unit(std::string&& value);
  void set_unit(const char* value);
  void set_unit(const char* value, size_t size);
  std::string* mutable_unit();
  std::string* release_unit();
  void set_allocated_unit(std::string* unit);
  private:
  const std::string& _internal_unit() const;
  void _internal_set_unit(const std::string& value);
  std::string* _internal_mutable_unit();
  public:

  // optional int32 step_per_epoch = 3;
  bool has_step_per_epoch() const;
  private:
  bool _internal_has_step_per_epoch() const;
  public:
  void clear_step_per_epoch();
  ::PROTOBUF_NAMESPACE_ID::int32 step_per_epoch() const;
  void set_step_per_epoch(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_step_per_epoch() const;
  void _internal_set_step_per_epoch(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mindspore.irpb.LossLandscape.Metadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr decomposition_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unit_;
  ::PROTOBUF_NAMESPACE_ID::int32 step_per_epoch_;
  friend struct ::TableStruct_mindspore_5fsummary_2eproto;
};
// -------------------------------------------------------------------

class LossLandscape PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mindspore.irpb.LossLandscape) */ {
 public:
  inline LossLandscape() : LossLandscape(nullptr) {}
  virtual ~LossLandscape();

  LossLandscape(const LossLandscape& from);
  LossLandscape(LossLandscape&& from) noexcept
    : LossLandscape() {
    *this = ::std::move(from);
  }

  inline LossLandscape& operator=(const LossLandscape& from) {
    CopyFrom(from);
    return *this;
  }
  inline LossLandscape& operator=(LossLandscape&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LossLandscape& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LossLandscape* internal_default_instance() {
    return reinterpret_cast<const LossLandscape*>(
               &_LossLandscape_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(LossLandscape& a, LossLandscape& b) {
    a.Swap(&b);
  }
  inline void Swap(LossLandscape* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LossLandscape* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LossLandscape* New() const final {
    return CreateMaybeMessage<LossLandscape>(nullptr);
  }

  LossLandscape* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LossLandscape>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LossLandscape& from);
  void MergeFrom(const LossLandscape& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LossLandscape* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mindspore.irpb.LossLandscape";
  }
  protected:
  explicit LossLandscape(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mindspore_5fsummary_2eproto);
    return ::descriptor_table_mindspore_5fsummary_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef LossLandscape_Point Point;
  typedef LossLandscape_LossPath LossPath;
  typedef LossLandscape_Metadata Metadata;

  // accessors -------------------------------------------------------

  enum : int {
    kLandscapeFieldNumber = 1,
    kLossPathFieldNumber = 2,
    kMetadataFieldNumber = 3,
    kConvergencePointFieldNumber = 4,
  };
  // optional .mindspore.irpb.LossLandscape.Point landscape = 1;
  bool has_landscape() const;
  private:
  bool _internal_has_landscape() const;
  public:
  void clear_landscape();
  const ::mindspore::irpb::LossLandscape_Point& landscape() const;
  ::mindspore::irpb::LossLandscape_Point* release_landscape();
  ::mindspore::irpb::LossLandscape_Point* mutable_landscape();
  void set_allocated_landscape(::mindspore::irpb::LossLandscape_Point* landscape);
  private:
  const ::mindspore::irpb::LossLandscape_Point& _internal_landscape() const;
  ::mindspore::irpb::LossLandscape_Point* _internal_mutable_landscape();
  public:
  void unsafe_arena_set_allocated_landscape(
      ::mindspore::irpb::LossLandscape_Point* landscape);
  ::mindspore::irpb::LossLandscape_Point* unsafe_arena_release_landscape();

  // optional .mindspore.irpb.LossLandscape.LossPath loss_path = 2;
  bool has_loss_path() const;
  private:
  bool _internal_has_loss_path() const;
  public:
  void clear_loss_path();
  const ::mindspore::irpb::LossLandscape_LossPath& loss_path() const;
  ::mindspore::irpb::LossLandscape_LossPath* release_loss_path();
  ::mindspore::irpb::LossLandscape_LossPath* mutable_loss_path();
  void set_allocated_loss_path(::mindspore::irpb::LossLandscape_LossPath* loss_path);
  private:
  const ::mindspore::irpb::LossLandscape_LossPath& _internal_loss_path() const;
  ::mindspore::irpb::LossLandscape_LossPath* _internal_mutable_loss_path();
  public:
  void unsafe_arena_set_allocated_loss_path(
      ::mindspore::irpb::LossLandscape_LossPath* loss_path);
  ::mindspore::irpb::LossLandscape_LossPath* unsafe_arena_release_loss_path();

  // optional .mindspore.irpb.LossLandscape.Metadata metadata = 3;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::mindspore::irpb::LossLandscape_Metadata& metadata() const;
  ::mindspore::irpb::LossLandscape_Metadata* release_metadata();
  ::mindspore::irpb::LossLandscape_Metadata* mutable_metadata();
  void set_allocated_metadata(::mindspore::irpb::LossLandscape_Metadata* metadata);
  private:
  const ::mindspore::irpb::LossLandscape_Metadata& _internal_metadata() const;
  ::mindspore::irpb::LossLandscape_Metadata* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::mindspore::irpb::LossLandscape_Metadata* metadata);
  ::mindspore::irpb::LossLandscape_Metadata* unsafe_arena_release_metadata();

  // optional .mindspore.irpb.LossLandscape.Point convergence_point = 4;
  bool has_convergence_point() const;
  private:
  bool _internal_has_convergence_point() const;
  public:
  void clear_convergence_point();
  const ::mindspore::irpb::LossLandscape_Point& convergence_point() const;
  ::mindspore::irpb::LossLandscape_Point* release_convergence_point();
  ::mindspore::irpb::LossLandscape_Point* mutable_convergence_point();
  void set_allocated_convergence_point(::mindspore::irpb::LossLandscape_Point* convergence_point);
  private:
  const ::mindspore::irpb::LossLandscape_Point& _internal_convergence_point() const;
  ::mindspore::irpb::LossLandscape_Point* _internal_mutable_convergence_point();
  public:
  void unsafe_arena_set_allocated_convergence_point(
      ::mindspore::irpb::LossLandscape_Point* convergence_point);
  ::mindspore::irpb::LossLandscape_Point* unsafe_arena_release_convergence_point();

  // @@protoc_insertion_point(class_scope:mindspore.irpb.LossLandscape)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::mindspore::irpb::LossLandscape_Point* landscape_;
  ::mindspore::irpb::LossLandscape_LossPath* loss_path_;
  ::mindspore::irpb::LossLandscape_Metadata* metadata_;
  ::mindspore::irpb::LossLandscape_Point* convergence_point_;
  friend struct ::TableStruct_mindspore_5fsummary_2eproto;
};
// -------------------------------------------------------------------

class Summary_Image PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mindspore.irpb.Summary.Image) */ {
 public:
  inline Summary_Image() : Summary_Image(nullptr) {}
  virtual ~Summary_Image();

  Summary_Image(const Summary_Image& from);
  Summary_Image(Summary_Image&& from) noexcept
    : Summary_Image() {
    *this = ::std::move(from);
  }

  inline Summary_Image& operator=(const Summary_Image& from) {
    CopyFrom(from);
    return *this;
  }
  inline Summary_Image& operator=(Summary_Image&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Summary_Image& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Summary_Image* internal_default_instance() {
    return reinterpret_cast<const Summary_Image*>(
               &_Summary_Image_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Summary_Image& a, Summary_Image& b) {
    a.Swap(&b);
  }
  inline void Swap(Summary_Image* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Summary_Image* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Summary_Image* New() const final {
    return CreateMaybeMessage<Summary_Image>(nullptr);
  }

  Summary_Image* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Summary_Image>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Summary_Image& from);
  void MergeFrom(const Summary_Image& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Summary_Image* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mindspore.irpb.Summary.Image";
  }
  protected:
  explicit Summary_Image(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mindspore_5fsummary_2eproto);
    return ::descriptor_table_mindspore_5fsummary_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncodedImageFieldNumber = 4,
    kHeightFieldNumber = 1,
    kWidthFieldNumber = 2,
    kColorspaceFieldNumber = 3,
  };
  // required bytes encoded_image = 4;
  bool has_encoded_image() const;
  private:
  bool _internal_has_encoded_image() const;
  public:
  void clear_encoded_image();
  const std::string& encoded_image() const;
  void set_encoded_image(const std::string& value);
  void set_encoded_image(std::string&& value);
  void set_encoded_image(const char* value);
  void set_encoded_image(const void* value, size_t size);
  std::string* mutable_encoded_image();
  std::string* release_encoded_image();
  void set_allocated_encoded_image(std::string* encoded_image);
  private:
  const std::string& _internal_encoded_image() const;
  void _internal_set_encoded_image(const std::string& value);
  std::string* _internal_mutable_encoded_image();
  public:

  // required int32 height = 1;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 width = 2;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 colorspace = 3;
  bool has_colorspace() const;
  private:
  bool _internal_has_colorspace() const;
  public:
  void clear_colorspace();
  ::PROTOBUF_NAMESPACE_ID::int32 colorspace() const;
  void set_colorspace(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_colorspace() const;
  void _internal_set_colorspace(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mindspore.irpb.Summary.Image)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encoded_image_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 colorspace_;
  friend struct ::TableStruct_mindspore_5fsummary_2eproto;
};
// -------------------------------------------------------------------

class Summary_Histogram_bucket PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mindspore.irpb.Summary.Histogram.bucket) */ {
 public:
  inline Summary_Histogram_bucket() : Summary_Histogram_bucket(nullptr) {}
  virtual ~Summary_Histogram_bucket();

  Summary_Histogram_bucket(const Summary_Histogram_bucket& from);
  Summary_Histogram_bucket(Summary_Histogram_bucket&& from) noexcept
    : Summary_Histogram_bucket() {
    *this = ::std::move(from);
  }

  inline Summary_Histogram_bucket& operator=(const Summary_Histogram_bucket& from) {
    CopyFrom(from);
    return *this;
  }
  inline Summary_Histogram_bucket& operator=(Summary_Histogram_bucket&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Summary_Histogram_bucket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Summary_Histogram_bucket* internal_default_instance() {
    return reinterpret_cast<const Summary_Histogram_bucket*>(
               &_Summary_Histogram_bucket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Summary_Histogram_bucket& a, Summary_Histogram_bucket& b) {
    a.Swap(&b);
  }
  inline void Swap(Summary_Histogram_bucket* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Summary_Histogram_bucket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Summary_Histogram_bucket* New() const final {
    return CreateMaybeMessage<Summary_Histogram_bucket>(nullptr);
  }

  Summary_Histogram_bucket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Summary_Histogram_bucket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Summary_Histogram_bucket& from);
  void MergeFrom(const Summary_Histogram_bucket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Summary_Histogram_bucket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mindspore.irpb.Summary.Histogram.bucket";
  }
  protected:
  explicit Summary_Histogram_bucket(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mindspore_5fsummary_2eproto);
    return ::descriptor_table_mindspore_5fsummary_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeftFieldNumber = 1,
    kWidthFieldNumber = 2,
    kCountFieldNumber = 3,
  };
  // required double left = 1;
  bool has_left() const;
  private:
  bool _internal_has_left() const;
  public:
  void clear_left();
  double left() const;
  void set_left(double value);
  private:
  double _internal_left() const;
  void _internal_set_left(double value);
  public:

  // required double width = 2;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  double width() const;
  void set_width(double value);
  private:
  double _internal_width() const;
  void _internal_set_width(double value);
  public:

  // required int64 count = 3;
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int64 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:mindspore.irpb.Summary.Histogram.bucket)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double left_;
  double width_;
  ::PROTOBUF_NAMESPACE_ID::int64 count_;
  friend struct ::TableStruct_mindspore_5fsummary_2eproto;
};
// -------------------------------------------------------------------

class Summary_Histogram PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mindspore.irpb.Summary.Histogram) */ {
 public:
  inline Summary_Histogram() : Summary_Histogram(nullptr) {}
  virtual ~Summary_Histogram();

  Summary_Histogram(const Summary_Histogram& from);
  Summary_Histogram(Summary_Histogram&& from) noexcept
    : Summary_Histogram() {
    *this = ::std::move(from);
  }

  inline Summary_Histogram& operator=(const Summary_Histogram& from) {
    CopyFrom(from);
    return *this;
  }
  inline Summary_Histogram& operator=(Summary_Histogram&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Summary_Histogram& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Summary_Histogram* internal_default_instance() {
    return reinterpret_cast<const Summary_Histogram*>(
               &_Summary_Histogram_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Summary_Histogram& a, Summary_Histogram& b) {
    a.Swap(&b);
  }
  inline void Swap(Summary_Histogram* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Summary_Histogram* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Summary_Histogram* New() const final {
    return CreateMaybeMessage<Summary_Histogram>(nullptr);
  }

  Summary_Histogram* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Summary_Histogram>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Summary_Histogram& from);
  void MergeFrom(const Summary_Histogram& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Summary_Histogram* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mindspore.irpb.Summary.Histogram";
  }
  protected:
  explicit Summary_Histogram(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mindspore_5fsummary_2eproto);
    return ::descriptor_table_mindspore_5fsummary_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Summary_Histogram_bucket bucket;

  // accessors -------------------------------------------------------

  enum : int {
    kBucketsFieldNumber = 1,
    kNanCountFieldNumber = 2,
    kPosInfCountFieldNumber = 3,
    kNegInfCountFieldNumber = 4,
    kMaxFieldNumber = 5,
    kMinFieldNumber = 6,
    kSumFieldNumber = 7,
    kCountFieldNumber = 8,
  };
  // repeated .mindspore.irpb.Summary.Histogram.bucket buckets = 1;
  int buckets_size() const;
  private:
  int _internal_buckets_size() const;
  public:
  void clear_buckets();
  ::mindspore::irpb::Summary_Histogram_bucket* mutable_buckets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mindspore::irpb::Summary_Histogram_bucket >*
      mutable_buckets();
  private:
  const ::mindspore::irpb::Summary_Histogram_bucket& _internal_buckets(int index) const;
  ::mindspore::irpb::Summary_Histogram_bucket* _internal_add_buckets();
  public:
  const ::mindspore::irpb::Summary_Histogram_bucket& buckets(int index) const;
  ::mindspore::irpb::Summary_Histogram_bucket* add_buckets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mindspore::irpb::Summary_Histogram_bucket >&
      buckets() const;

  // optional int64 nan_count = 2;
  bool has_nan_count() const;
  private:
  bool _internal_has_nan_count() const;
  public:
  void clear_nan_count();
  ::PROTOBUF_NAMESPACE_ID::int64 nan_count() const;
  void set_nan_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_nan_count() const;
  void _internal_set_nan_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 pos_inf_count = 3;
  bool has_pos_inf_count() const;
  private:
  bool _internal_has_pos_inf_count() const;
  public:
  void clear_pos_inf_count();
  ::PROTOBUF_NAMESPACE_ID::int64 pos_inf_count() const;
  void set_pos_inf_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_pos_inf_count() const;
  void _internal_set_pos_inf_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 neg_inf_count = 4;
  bool has_neg_inf_count() const;
  private:
  bool _internal_has_neg_inf_count() const;
  public:
  void clear_neg_inf_count();
  ::PROTOBUF_NAMESPACE_ID::int64 neg_inf_count() const;
  void set_neg_inf_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_neg_inf_count() const;
  void _internal_set_neg_inf_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional double max = 5;
  bool has_max() const;
  private:
  bool _internal_has_max() const;
  public:
  void clear_max();
  double max() const;
  void set_max(double value);
  private:
  double _internal_max() const;
  void _internal_set_max(double value);
  public:

  // optional double min = 6;
  bool has_min() const;
  private:
  bool _internal_has_min() const;
  public:
  void clear_min();
  double min() const;
  void set_min(double value);
  private:
  double _internal_min() const;
  void _internal_set_min(double value);
  public:

  // optional double sum = 7;
  bool has_sum() const;
  private:
  bool _internal_has_sum() const;
  public:
  void clear_sum();
  double sum() const;
  void set_sum(double value);
  private:
  double _internal_sum() const;
  void _internal_set_sum(double value);
  public:

  // optional int64 count = 8;
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int64 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:mindspore.irpb.Summary.Histogram)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mindspore::irpb::Summary_Histogram_bucket > buckets_;
  ::PROTOBUF_NAMESPACE_ID::int64 nan_count_;
  ::PROTOBUF_NAMESPACE_ID::int64 pos_inf_count_;
  ::PROTOBUF_NAMESPACE_ID::int64 neg_inf_count_;
  double max_;
  double min_;
  double sum_;
  ::PROTOBUF_NAMESPACE_ID::int64 count_;
  friend struct ::TableStruct_mindspore_5fsummary_2eproto;
};
// -------------------------------------------------------------------

class Summary_Value PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mindspore.irpb.Summary.Value) */ {
 public:
  inline Summary_Value() : Summary_Value(nullptr) {}
  virtual ~Summary_Value();

  Summary_Value(const Summary_Value& from);
  Summary_Value(Summary_Value&& from) noexcept
    : Summary_Value() {
    *this = ::std::move(from);
  }

  inline Summary_Value& operator=(const Summary_Value& from) {
    CopyFrom(from);
    return *this;
  }
  inline Summary_Value& operator=(Summary_Value&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Summary_Value& default_instance();

  enum ValueCase {
    kScalarValue = 3,
    kImage = 4,
    kTensor = 8,
    kHistogram = 9,
    kLossLandscape = 10,
    VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Summary_Value* internal_default_instance() {
    return reinterpret_cast<const Summary_Value*>(
               &_Summary_Value_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Summary_Value& a, Summary_Value& b) {
    a.Swap(&b);
  }
  inline void Swap(Summary_Value* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Summary_Value* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Summary_Value* New() const final {
    return CreateMaybeMessage<Summary_Value>(nullptr);
  }

  Summary_Value* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Summary_Value>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Summary_Value& from);
  void MergeFrom(const Summary_Value& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Summary_Value* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mindspore.irpb.Summary.Value";
  }
  protected:
  explicit Summary_Value(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mindspore_5fsummary_2eproto);
    return ::descriptor_table_mindspore_5fsummary_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagFieldNumber = 1,
    kScalarValueFieldNumber = 3,
    kImageFieldNumber = 4,
    kTensorFieldNumber = 8,
    kHistogramFieldNumber = 9,
    kLossLandscapeFieldNumber = 10,
  };
  // required string tag = 1;
  bool has_tag() const;
  private:
  bool _internal_has_tag() const;
  public:
  void clear_tag();
  const std::string& tag() const;
  void set_tag(const std::string& value);
  void set_tag(std::string&& value);
  void set_tag(const char* value);
  void set_tag(const char* value, size_t size);
  std::string* mutable_tag();
  std::string* release_tag();
  void set_allocated_tag(std::string* tag);
  private:
  const std::string& _internal_tag() const;
  void _internal_set_tag(const std::string& value);
  std::string* _internal_mutable_tag();
  public:

  // float scalar_value = 3;
  bool has_scalar_value() const;
  private:
  bool _internal_has_scalar_value() const;
  public:
  void clear_scalar_value();
  float scalar_value() const;
  void set_scalar_value(float value);
  private:
  float _internal_scalar_value() const;
  void _internal_set_scalar_value(float value);
  public:

  // .mindspore.irpb.Summary.Image image = 4;
  bool has_image() const;
  private:
  bool _internal_has_image() const;
  public:
  void clear_image();
  const ::mindspore::irpb::Summary_Image& image() const;
  ::mindspore::irpb::Summary_Image* release_image();
  ::mindspore::irpb::Summary_Image* mutable_image();
  void set_allocated_image(::mindspore::irpb::Summary_Image* image);
  private:
  const ::mindspore::irpb::Summary_Image& _internal_image() const;
  ::mindspore::irpb::Summary_Image* _internal_mutable_image();
  public:
  void unsafe_arena_set_allocated_image(
      ::mindspore::irpb::Summary_Image* image);
  ::mindspore::irpb::Summary_Image* unsafe_arena_release_image();

  // .mindspore.irpb.TensorProto tensor = 8;
  bool has_tensor() const;
  private:
  bool _internal_has_tensor() const;
  public:
  void clear_tensor();
  const ::mindspore::irpb::TensorProto& tensor() const;
  ::mindspore::irpb::TensorProto* release_tensor();
  ::mindspore::irpb::TensorProto* mutable_tensor();
  void set_allocated_tensor(::mindspore::irpb::TensorProto* tensor);
  private:
  const ::mindspore::irpb::TensorProto& _internal_tensor() const;
  ::mindspore::irpb::TensorProto* _internal_mutable_tensor();
  public:
  void unsafe_arena_set_allocated_tensor(
      ::mindspore::irpb::TensorProto* tensor);
  ::mindspore::irpb::TensorProto* unsafe_arena_release_tensor();

  // .mindspore.irpb.Summary.Histogram histogram = 9;
  bool has_histogram() const;
  private:
  bool _internal_has_histogram() const;
  public:
  void clear_histogram();
  const ::mindspore::irpb::Summary_Histogram& histogram() const;
  ::mindspore::irpb::Summary_Histogram* release_histogram();
  ::mindspore::irpb::Summary_Histogram* mutable_histogram();
  void set_allocated_histogram(::mindspore::irpb::Summary_Histogram* histogram);
  private:
  const ::mindspore::irpb::Summary_Histogram& _internal_histogram() const;
  ::mindspore::irpb::Summary_Histogram* _internal_mutable_histogram();
  public:
  void unsafe_arena_set_allocated_histogram(
      ::mindspore::irpb::Summary_Histogram* histogram);
  ::mindspore::irpb::Summary_Histogram* unsafe_arena_release_histogram();

  // .mindspore.irpb.LossLandscape loss_landscape = 10;
  bool has_loss_landscape() const;
  private:
  bool _internal_has_loss_landscape() const;
  public:
  void clear_loss_landscape();
  const ::mindspore::irpb::LossLandscape& loss_landscape() const;
  ::mindspore::irpb::LossLandscape* release_loss_landscape();
  ::mindspore::irpb::LossLandscape* mutable_loss_landscape();
  void set_allocated_loss_landscape(::mindspore::irpb::LossLandscape* loss_landscape);
  private:
  const ::mindspore::irpb::LossLandscape& _internal_loss_landscape() const;
  ::mindspore::irpb::LossLandscape* _internal_mutable_loss_landscape();
  public:
  void unsafe_arena_set_allocated_loss_landscape(
      ::mindspore::irpb::LossLandscape* loss_landscape);
  ::mindspore::irpb::LossLandscape* unsafe_arena_release_loss_landscape();

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:mindspore.irpb.Summary.Value)
 private:
  class _Internal;
  void set_has_scalar_value();
  void set_has_image();
  void set_has_tensor();
  void set_has_histogram();
  void set_has_loss_landscape();

  inline bool has_value() const;
  inline void clear_has_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
  union ValueUnion {
    ValueUnion() {}
    float scalar_value_;
    ::mindspore::irpb::Summary_Image* image_;
    ::mindspore::irpb::TensorProto* tensor_;
    ::mindspore::irpb::Summary_Histogram* histogram_;
    ::mindspore::irpb::LossLandscape* loss_landscape_;
  } value_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_mindspore_5fsummary_2eproto;
};
// -------------------------------------------------------------------

class Summary PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mindspore.irpb.Summary) */ {
 public:
  inline Summary() : Summary(nullptr) {}
  virtual ~Summary();

  Summary(const Summary& from);
  Summary(Summary&& from) noexcept
    : Summary() {
    *this = ::std::move(from);
  }

  inline Summary& operator=(const Summary& from) {
    CopyFrom(from);
    return *this;
  }
  inline Summary& operator=(Summary&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Summary& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Summary* internal_default_instance() {
    return reinterpret_cast<const Summary*>(
               &_Summary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Summary& a, Summary& b) {
    a.Swap(&b);
  }
  inline void Swap(Summary* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Summary* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Summary* New() const final {
    return CreateMaybeMessage<Summary>(nullptr);
  }

  Summary* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Summary>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Summary& from);
  void MergeFrom(const Summary& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Summary* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mindspore.irpb.Summary";
  }
  protected:
  explicit Summary(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mindspore_5fsummary_2eproto);
    return ::descriptor_table_mindspore_5fsummary_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Summary_Image Image;
  typedef Summary_Histogram Histogram;
  typedef Summary_Value Value;

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // repeated .mindspore.irpb.Summary.Value value = 1;
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  ::mindspore::irpb::Summary_Value* mutable_value(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mindspore::irpb::Summary_Value >*
      mutable_value();
  private:
  const ::mindspore::irpb::Summary_Value& _internal_value(int index) const;
  ::mindspore::irpb::Summary_Value* _internal_add_value();
  public:
  const ::mindspore::irpb::Summary_Value& value(int index) const;
  ::mindspore::irpb::Summary_Value* add_value();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mindspore::irpb::Summary_Value >&
      value() const;

  // @@protoc_insertion_point(class_scope:mindspore.irpb.Summary)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mindspore::irpb::Summary_Value > value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mindspore_5fsummary_2eproto;
};
// -------------------------------------------------------------------

class Explain_Inference PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mindspore.irpb.Explain.Inference) */ {
 public:
  inline Explain_Inference() : Explain_Inference(nullptr) {}
  virtual ~Explain_Inference();

  Explain_Inference(const Explain_Inference& from);
  Explain_Inference(Explain_Inference&& from) noexcept
    : Explain_Inference() {
    *this = ::std::move(from);
  }

  inline Explain_Inference& operator=(const Explain_Inference& from) {
    CopyFrom(from);
    return *this;
  }
  inline Explain_Inference& operator=(Explain_Inference&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Explain_Inference& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Explain_Inference* internal_default_instance() {
    return reinterpret_cast<const Explain_Inference*>(
               &_Explain_Inference_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Explain_Inference& a, Explain_Inference& b) {
    a.Swap(&b);
  }
  inline void Swap(Explain_Inference* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Explain_Inference* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Explain_Inference* New() const final {
    return CreateMaybeMessage<Explain_Inference>(nullptr);
  }

  Explain_Inference* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Explain_Inference>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Explain_Inference& from);
  void MergeFrom(const Explain_Inference& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Explain_Inference* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mindspore.irpb.Explain.Inference";
  }
  protected:
  explicit Explain_Inference(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mindspore_5fsummary_2eproto);
    return ::descriptor_table_mindspore_5fsummary_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroundTruthProbFieldNumber = 1,
    kPredictedLabelFieldNumber = 2,
    kPredictedProbFieldNumber = 3,
    kGroundTruthProbSdFieldNumber = 4,
    kGroundTruthProbItl95LowFieldNumber = 5,
    kGroundTruthProbItl95HiFieldNumber = 6,
    kPredictedProbSdFieldNumber = 7,
    kPredictedProbItl95LowFieldNumber = 8,
    kPredictedProbItl95HiFieldNumber = 9,
  };
  // repeated float ground_truth_prob = 1;
  int ground_truth_prob_size() const;
  private:
  int _internal_ground_truth_prob_size() const;
  public:
  void clear_ground_truth_prob();
  private:
  float _internal_ground_truth_prob(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_ground_truth_prob() const;
  void _internal_add_ground_truth_prob(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_ground_truth_prob();
  public:
  float ground_truth_prob(int index) const;
  void set_ground_truth_prob(int index, float value);
  void add_ground_truth_prob(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      ground_truth_prob() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_ground_truth_prob();

  // repeated int32 predicted_label = 2;
  int predicted_label_size() const;
  private:
  int _internal_predicted_label_size() const;
  public:
  void clear_predicted_label();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_predicted_label(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_predicted_label() const;
  void _internal_add_predicted_label(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_predicted_label();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 predicted_label(int index) const;
  void set_predicted_label(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_predicted_label(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      predicted_label() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_predicted_label();

  // repeated float predicted_prob = 3;
  int predicted_prob_size() const;
  private:
  int _internal_predicted_prob_size() const;
  public:
  void clear_predicted_prob();
  private:
  float _internal_predicted_prob(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_predicted_prob() const;
  void _internal_add_predicted_prob(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_predicted_prob();
  public:
  float predicted_prob(int index) const;
  void set_predicted_prob(int index, float value);
  void add_predicted_prob(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      predicted_prob() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_predicted_prob();

  // repeated float ground_truth_prob_sd = 4;
  int ground_truth_prob_sd_size() const;
  private:
  int _internal_ground_truth_prob_sd_size() const;
  public:
  void clear_ground_truth_prob_sd();
  private:
  float _internal_ground_truth_prob_sd(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_ground_truth_prob_sd() const;
  void _internal_add_ground_truth_prob_sd(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_ground_truth_prob_sd();
  public:
  float ground_truth_prob_sd(int index) const;
  void set_ground_truth_prob_sd(int index, float value);
  void add_ground_truth_prob_sd(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      ground_truth_prob_sd() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_ground_truth_prob_sd();

  // repeated float ground_truth_prob_itl95_low = 5;
  int ground_truth_prob_itl95_low_size() const;
  private:
  int _internal_ground_truth_prob_itl95_low_size() const;
  public:
  void clear_ground_truth_prob_itl95_low();
  private:
  float _internal_ground_truth_prob_itl95_low(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_ground_truth_prob_itl95_low() const;
  void _internal_add_ground_truth_prob_itl95_low(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_ground_truth_prob_itl95_low();
  public:
  float ground_truth_prob_itl95_low(int index) const;
  void set_ground_truth_prob_itl95_low(int index, float value);
  void add_ground_truth_prob_itl95_low(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      ground_truth_prob_itl95_low() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_ground_truth_prob_itl95_low();

  // repeated float ground_truth_prob_itl95_hi = 6;
  int ground_truth_prob_itl95_hi_size() const;
  private:
  int _internal_ground_truth_prob_itl95_hi_size() const;
  public:
  void clear_ground_truth_prob_itl95_hi();
  private:
  float _internal_ground_truth_prob_itl95_hi(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_ground_truth_prob_itl95_hi() const;
  void _internal_add_ground_truth_prob_itl95_hi(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_ground_truth_prob_itl95_hi();
  public:
  float ground_truth_prob_itl95_hi(int index) const;
  void set_ground_truth_prob_itl95_hi(int index, float value);
  void add_ground_truth_prob_itl95_hi(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      ground_truth_prob_itl95_hi() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_ground_truth_prob_itl95_hi();

  // repeated float predicted_prob_sd = 7;
  int predicted_prob_sd_size() const;
  private:
  int _internal_predicted_prob_sd_size() const;
  public:
  void clear_predicted_prob_sd();
  private:
  float _internal_predicted_prob_sd(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_predicted_prob_sd() const;
  void _internal_add_predicted_prob_sd(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_predicted_prob_sd();
  public:
  float predicted_prob_sd(int index) const;
  void set_predicted_prob_sd(int index, float value);
  void add_predicted_prob_sd(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      predicted_prob_sd() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_predicted_prob_sd();

  // repeated float predicted_prob_itl95_low = 8;
  int predicted_prob_itl95_low_size() const;
  private:
  int _internal_predicted_prob_itl95_low_size() const;
  public:
  void clear_predicted_prob_itl95_low();
  private:
  float _internal_predicted_prob_itl95_low(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_predicted_prob_itl95_low() const;
  void _internal_add_predicted_prob_itl95_low(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_predicted_prob_itl95_low();
  public:
  float predicted_prob_itl95_low(int index) const;
  void set_predicted_prob_itl95_low(int index, float value);
  void add_predicted_prob_itl95_low(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      predicted_prob_itl95_low() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_predicted_prob_itl95_low();

  // repeated float predicted_prob_itl95_hi = 9;
  int predicted_prob_itl95_hi_size() const;
  private:
  int _internal_predicted_prob_itl95_hi_size() const;
  public:
  void clear_predicted_prob_itl95_hi();
  private:
  float _internal_predicted_prob_itl95_hi(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_predicted_prob_itl95_hi() const;
  void _internal_add_predicted_prob_itl95_hi(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_predicted_prob_itl95_hi();
  public:
  float predicted_prob_itl95_hi(int index) const;
  void set_predicted_prob_itl95_hi(int index, float value);
  void add_predicted_prob_itl95_hi(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      predicted_prob_itl95_hi() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_predicted_prob_itl95_hi();

  // @@protoc_insertion_point(class_scope:mindspore.irpb.Explain.Inference)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > ground_truth_prob_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > predicted_label_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > predicted_prob_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > ground_truth_prob_sd_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > ground_truth_prob_itl95_low_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > ground_truth_prob_itl95_hi_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > predicted_prob_sd_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > predicted_prob_itl95_low_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > predicted_prob_itl95_hi_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mindspore_5fsummary_2eproto;
};
// -------------------------------------------------------------------

class Explain_Explanation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mindspore.irpb.Explain.Explanation) */ {
 public:
  inline Explain_Explanation() : Explain_Explanation(nullptr) {}
  virtual ~Explain_Explanation();

  Explain_Explanation(const Explain_Explanation& from);
  Explain_Explanation(Explain_Explanation&& from) noexcept
    : Explain_Explanation() {
    *this = ::std::move(from);
  }

  inline Explain_Explanation& operator=(const Explain_Explanation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Explain_Explanation& operator=(Explain_Explanation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Explain_Explanation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Explain_Explanation* internal_default_instance() {
    return reinterpret_cast<const Explain_Explanation*>(
               &_Explain_Explanation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Explain_Explanation& a, Explain_Explanation& b) {
    a.Swap(&b);
  }
  inline void Swap(Explain_Explanation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Explain_Explanation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Explain_Explanation* New() const final {
    return CreateMaybeMessage<Explain_Explanation>(nullptr);
  }

  Explain_Explanation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Explain_Explanation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Explain_Explanation& from);
  void MergeFrom(const Explain_Explanation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Explain_Explanation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mindspore.irpb.Explain.Explanation";
  }
  protected:
  explicit Explain_Explanation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mindspore_5fsummary_2eproto);
    return ::descriptor_table_mindspore_5fsummary_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExplainMethodFieldNumber = 1,
    kHeatmapPathFieldNumber = 3,
    kLabelFieldNumber = 2,
  };
  // optional string explain_method = 1;
  bool has_explain_method() const;
  private:
  bool _internal_has_explain_method() const;
  public:
  void clear_explain_method();
  const std::string& explain_method() const;
  void set_explain_method(const std::string& value);
  void set_explain_method(std::string&& value);
  void set_explain_method(const char* value);
  void set_explain_method(const char* value, size_t size);
  std::string* mutable_explain_method();
  std::string* release_explain_method();
  void set_allocated_explain_method(std::string* explain_method);
  private:
  const std::string& _internal_explain_method() const;
  void _internal_set_explain_method(const std::string& value);
  std::string* _internal_mutable_explain_method();
  public:

  // optional string heatmap_path = 3;
  bool has_heatmap_path() const;
  private:
  bool _internal_has_heatmap_path() const;
  public:
  void clear_heatmap_path();
  const std::string& heatmap_path() const;
  void set_heatmap_path(const std::string& value);
  void set_heatmap_path(std::string&& value);
  void set_heatmap_path(const char* value);
  void set_heatmap_path(const char* value, size_t size);
  std::string* mutable_heatmap_path();
  std::string* release_heatmap_path();
  void set_allocated_heatmap_path(std::string* heatmap_path);
  private:
  const std::string& _internal_heatmap_path() const;
  void _internal_set_heatmap_path(const std::string& value);
  std::string* _internal_mutable_heatmap_path();
  public:

  // optional int32 label = 2;
  bool has_label() const;
  private:
  bool _internal_has_label() const;
  public:
  void clear_label();
  ::PROTOBUF_NAMESPACE_ID::int32 label() const;
  void set_label(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_label() const;
  void _internal_set_label(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mindspore.irpb.Explain.Explanation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr explain_method_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr heatmap_path_;
  ::PROTOBUF_NAMESPACE_ID::int32 label_;
  friend struct ::TableStruct_mindspore_5fsummary_2eproto;
};
// -------------------------------------------------------------------

class Explain_Benchmark PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mindspore.irpb.Explain.Benchmark) */ {
 public:
  inline Explain_Benchmark() : Explain_Benchmark(nullptr) {}
  virtual ~Explain_Benchmark();

  Explain_Benchmark(const Explain_Benchmark& from);
  Explain_Benchmark(Explain_Benchmark&& from) noexcept
    : Explain_Benchmark() {
    *this = ::std::move(from);
  }

  inline Explain_Benchmark& operator=(const Explain_Benchmark& from) {
    CopyFrom(from);
    return *this;
  }
  inline Explain_Benchmark& operator=(Explain_Benchmark&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Explain_Benchmark& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Explain_Benchmark* internal_default_instance() {
    return reinterpret_cast<const Explain_Benchmark*>(
               &_Explain_Benchmark_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Explain_Benchmark& a, Explain_Benchmark& b) {
    a.Swap(&b);
  }
  inline void Swap(Explain_Benchmark* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Explain_Benchmark* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Explain_Benchmark* New() const final {
    return CreateMaybeMessage<Explain_Benchmark>(nullptr);
  }

  Explain_Benchmark* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Explain_Benchmark>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Explain_Benchmark& from);
  void MergeFrom(const Explain_Benchmark& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Explain_Benchmark* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mindspore.irpb.Explain.Benchmark";
  }
  protected:
  explicit Explain_Benchmark(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mindspore_5fsummary_2eproto);
    return ::descriptor_table_mindspore_5fsummary_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelScoreFieldNumber = 4,
    kBenchmarkMethodFieldNumber = 1,
    kExplainMethodFieldNumber = 2,
    kTotalScoreFieldNumber = 3,
  };
  // repeated float label_score = 4;
  int label_score_size() const;
  private:
  int _internal_label_score_size() const;
  public:
  void clear_label_score();
  private:
  float _internal_label_score(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_label_score() const;
  void _internal_add_label_score(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_label_score();
  public:
  float label_score(int index) const;
  void set_label_score(int index, float value);
  void add_label_score(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      label_score() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_label_score();

  // optional string benchmark_method = 1;
  bool has_benchmark_method() const;
  private:
  bool _internal_has_benchmark_method() const;
  public:
  void clear_benchmark_method();
  const std::string& benchmark_method() const;
  void set_benchmark_method(const std::string& value);
  void set_benchmark_method(std::string&& value);
  void set_benchmark_method(const char* value);
  void set_benchmark_method(const char* value, size_t size);
  std::string* mutable_benchmark_method();
  std::string* release_benchmark_method();
  void set_allocated_benchmark_method(std::string* benchmark_method);
  private:
  const std::string& _internal_benchmark_method() const;
  void _internal_set_benchmark_method(const std::string& value);
  std::string* _internal_mutable_benchmark_method();
  public:

  // optional string explain_method = 2;
  bool has_explain_method() const;
  private:
  bool _internal_has_explain_method() const;
  public:
  void clear_explain_method();
  const std::string& explain_method() const;
  void set_explain_method(const std::string& value);
  void set_explain_method(std::string&& value);
  void set_explain_method(const char* value);
  void set_explain_method(const char* value, size_t size);
  std::string* mutable_explain_method();
  std::string* release_explain_method();
  void set_allocated_explain_method(std::string* explain_method);
  private:
  const std::string& _internal_explain_method() const;
  void _internal_set_explain_method(const std::string& value);
  std::string* _internal_mutable_explain_method();
  public:

  // optional float total_score = 3;
  bool has_total_score() const;
  private:
  bool _internal_has_total_score() const;
  public:
  void clear_total_score();
  float total_score() const;
  void set_total_score(float value);
  private:
  float _internal_total_score() const;
  void _internal_set_total_score(float value);
  public:

  // @@protoc_insertion_point(class_scope:mindspore.irpb.Explain.Benchmark)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > label_score_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr benchmark_method_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr explain_method_;
  float total_score_;
  friend struct ::TableStruct_mindspore_5fsummary_2eproto;
};
// -------------------------------------------------------------------

class Explain_Metadata PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mindspore.irpb.Explain.Metadata) */ {
 public:
  inline Explain_Metadata() : Explain_Metadata(nullptr) {}
  virtual ~Explain_Metadata();

  Explain_Metadata(const Explain_Metadata& from);
  Explain_Metadata(Explain_Metadata&& from) noexcept
    : Explain_Metadata() {
    *this = ::std::move(from);
  }

  inline Explain_Metadata& operator=(const Explain_Metadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline Explain_Metadata& operator=(Explain_Metadata&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Explain_Metadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Explain_Metadata* internal_default_instance() {
    return reinterpret_cast<const Explain_Metadata*>(
               &_Explain_Metadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Explain_Metadata& a, Explain_Metadata& b) {
    a.Swap(&b);
  }
  inline void Swap(Explain_Metadata* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Explain_Metadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Explain_Metadata* New() const final {
    return CreateMaybeMessage<Explain_Metadata>(nullptr);
  }

  Explain_Metadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Explain_Metadata>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Explain_Metadata& from);
  void MergeFrom(const Explain_Metadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Explain_Metadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mindspore.irpb.Explain.Metadata";
  }
  protected:
  explicit Explain_Metadata(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mindspore_5fsummary_2eproto);
    return ::descriptor_table_mindspore_5fsummary_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelFieldNumber = 1,
    kExplainMethodFieldNumber = 2,
    kBenchmarkMethodFieldNumber = 3,
  };
  // repeated string label = 1;
  int label_size() const;
  private:
  int _internal_label_size() const;
  public:
  void clear_label();
  const std::string& label(int index) const;
  std::string* mutable_label(int index);
  void set_label(int index, const std::string& value);
  void set_label(int index, std::string&& value);
  void set_label(int index, const char* value);
  void set_label(int index, const char* value, size_t size);
  std::string* add_label();
  void add_label(const std::string& value);
  void add_label(std::string&& value);
  void add_label(const char* value);
  void add_label(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& label() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_label();
  private:
  const std::string& _internal_label(int index) const;
  std::string* _internal_add_label();
  public:

  // repeated string explain_method = 2;
  int explain_method_size() const;
  private:
  int _internal_explain_method_size() const;
  public:
  void clear_explain_method();
  const std::string& explain_method(int index) const;
  std::string* mutable_explain_method(int index);
  void set_explain_method(int index, const std::string& value);
  void set_explain_method(int index, std::string&& value);
  void set_explain_method(int index, const char* value);
  void set_explain_method(int index, const char* value, size_t size);
  std::string* add_explain_method();
  void add_explain_method(const std::string& value);
  void add_explain_method(std::string&& value);
  void add_explain_method(const char* value);
  void add_explain_method(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& explain_method() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_explain_method();
  private:
  const std::string& _internal_explain_method(int index) const;
  std::string* _internal_add_explain_method();
  public:

  // repeated string benchmark_method = 3;
  int benchmark_method_size() const;
  private:
  int _internal_benchmark_method_size() const;
  public:
  void clear_benchmark_method();
  const std::string& benchmark_method(int index) const;
  std::string* mutable_benchmark_method(int index);
  void set_benchmark_method(int index, const std::string& value);
  void set_benchmark_method(int index, std::string&& value);
  void set_benchmark_method(int index, const char* value);
  void set_benchmark_method(int index, const char* value, size_t size);
  std::string* add_benchmark_method();
  void add_benchmark_method(const std::string& value);
  void add_benchmark_method(std::string&& value);
  void add_benchmark_method(const char* value);
  void add_benchmark_method(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& benchmark_method() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_benchmark_method();
  private:
  const std::string& _internal_benchmark_method(int index) const;
  std::string* _internal_add_benchmark_method();
  public:

  // @@protoc_insertion_point(class_scope:mindspore.irpb.Explain.Metadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> label_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> explain_method_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> benchmark_method_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mindspore_5fsummary_2eproto;
};
// -------------------------------------------------------------------

class Explain_HocLayer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mindspore.irpb.Explain.HocLayer) */ {
 public:
  inline Explain_HocLayer() : Explain_HocLayer(nullptr) {}
  virtual ~Explain_HocLayer();

  Explain_HocLayer(const Explain_HocLayer& from);
  Explain_HocLayer(Explain_HocLayer&& from) noexcept
    : Explain_HocLayer() {
    *this = ::std::move(from);
  }

  inline Explain_HocLayer& operator=(const Explain_HocLayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Explain_HocLayer& operator=(Explain_HocLayer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Explain_HocLayer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Explain_HocLayer* internal_default_instance() {
    return reinterpret_cast<const Explain_HocLayer*>(
               &_Explain_HocLayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Explain_HocLayer& a, Explain_HocLayer& b) {
    a.Swap(&b);
  }
  inline void Swap(Explain_HocLayer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Explain_HocLayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Explain_HocLayer* New() const final {
    return CreateMaybeMessage<Explain_HocLayer>(nullptr);
  }

  Explain_HocLayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Explain_HocLayer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Explain_HocLayer& from);
  void MergeFrom(const Explain_HocLayer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Explain_HocLayer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mindspore.irpb.Explain.HocLayer";
  }
  protected:
  explicit Explain_HocLayer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mindspore_5fsummary_2eproto);
    return ::descriptor_table_mindspore_5fsummary_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBoxFieldNumber = 2,
    kProbFieldNumber = 1,
  };
  // repeated int32 box = 2;
  int box_size() const;
  private:
  int _internal_box_size() const;
  public:
  void clear_box();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_box(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_box() const;
  void _internal_add_box(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_box();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 box(int index) const;
  void set_box(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_box(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      box() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_box();

  // optional float prob = 1;
  bool has_prob() const;
  private:
  bool _internal_has_prob() const;
  public:
  void clear_prob();
  float prob() const;
  void set_prob(float value);
  private:
  float _internal_prob() const;
  void _internal_set_prob(float value);
  public:

  // @@protoc_insertion_point(class_scope:mindspore.irpb.Explain.HocLayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > box_;
  float prob_;
  friend struct ::TableStruct_mindspore_5fsummary_2eproto;
};
// -------------------------------------------------------------------

class Explain_Hoc PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mindspore.irpb.Explain.Hoc) */ {
 public:
  inline Explain_Hoc() : Explain_Hoc(nullptr) {}
  virtual ~Explain_Hoc();

  Explain_Hoc(const Explain_Hoc& from);
  Explain_Hoc(Explain_Hoc&& from) noexcept
    : Explain_Hoc() {
    *this = ::std::move(from);
  }

  inline Explain_Hoc& operator=(const Explain_Hoc& from) {
    CopyFrom(from);
    return *this;
  }
  inline Explain_Hoc& operator=(Explain_Hoc&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Explain_Hoc& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Explain_Hoc* internal_default_instance() {
    return reinterpret_cast<const Explain_Hoc*>(
               &_Explain_Hoc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(Explain_Hoc& a, Explain_Hoc& b) {
    a.Swap(&b);
  }
  inline void Swap(Explain_Hoc* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Explain_Hoc* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Explain_Hoc* New() const final {
    return CreateMaybeMessage<Explain_Hoc>(nullptr);
  }

  Explain_Hoc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Explain_Hoc>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Explain_Hoc& from);
  void MergeFrom(const Explain_Hoc& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Explain_Hoc* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mindspore.irpb.Explain.Hoc";
  }
  protected:
  explicit Explain_Hoc(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mindspore_5fsummary_2eproto);
    return ::descriptor_table_mindspore_5fsummary_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLayerFieldNumber = 3,
    kMaskFieldNumber = 2,
    kLabelFieldNumber = 1,
  };
  // repeated .mindspore.irpb.Explain.HocLayer layer = 3;
  int layer_size() const;
  private:
  int _internal_layer_size() const;
  public:
  void clear_layer();
  ::mindspore::irpb::Explain_HocLayer* mutable_layer(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mindspore::irpb::Explain_HocLayer >*
      mutable_layer();
  private:
  const ::mindspore::irpb::Explain_HocLayer& _internal_layer(int index) const;
  ::mindspore::irpb::Explain_HocLayer* _internal_add_layer();
  public:
  const ::mindspore::irpb::Explain_HocLayer& layer(int index) const;
  ::mindspore::irpb::Explain_HocLayer* add_layer();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mindspore::irpb::Explain_HocLayer >&
      layer() const;

  // optional string mask = 2;
  bool has_mask() const;
  private:
  bool _internal_has_mask() const;
  public:
  void clear_mask();
  const std::string& mask() const;
  void set_mask(const std::string& value);
  void set_mask(std::string&& value);
  void set_mask(const char* value);
  void set_mask(const char* value, size_t size);
  std::string* mutable_mask();
  std::string* release_mask();
  void set_allocated_mask(std::string* mask);
  private:
  const std::string& _internal_mask() const;
  void _internal_set_mask(const std::string& value);
  std::string* _internal_mutable_mask();
  public:

  // optional int32 label = 1;
  bool has_label() const;
  private:
  bool _internal_has_label() const;
  public:
  void clear_label();
  ::PROTOBUF_NAMESPACE_ID::int32 label() const;
  void set_label(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_label() const;
  void _internal_set_label(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mindspore.irpb.Explain.Hoc)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mindspore::irpb::Explain_HocLayer > layer_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mask_;
  ::PROTOBUF_NAMESPACE_ID::int32 label_;
  friend struct ::TableStruct_mindspore_5fsummary_2eproto;
};
// -------------------------------------------------------------------

class Explain PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mindspore.irpb.Explain) */ {
 public:
  inline Explain() : Explain(nullptr) {}
  virtual ~Explain();

  Explain(const Explain& from);
  Explain(Explain&& from) noexcept
    : Explain() {
    *this = ::std::move(from);
  }

  inline Explain& operator=(const Explain& from) {
    CopyFrom(from);
    return *this;
  }
  inline Explain& operator=(Explain&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Explain& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Explain* internal_default_instance() {
    return reinterpret_cast<const Explain*>(
               &_Explain_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(Explain& a, Explain& b) {
    a.Swap(&b);
  }
  inline void Swap(Explain* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Explain* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Explain* New() const final {
    return CreateMaybeMessage<Explain>(nullptr);
  }

  Explain* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Explain>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Explain& from);
  void MergeFrom(const Explain& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Explain* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mindspore.irpb.Explain";
  }
  protected:
  explicit Explain(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mindspore_5fsummary_2eproto);
    return ::descriptor_table_mindspore_5fsummary_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Explain_Inference Inference;
  typedef Explain_Explanation Explanation;
  typedef Explain_Benchmark Benchmark;
  typedef Explain_Metadata Metadata;
  typedef Explain_HocLayer HocLayer;
  typedef Explain_Hoc Hoc;

  // accessors -------------------------------------------------------

  enum : int {
    kGroundTruthLabelFieldNumber = 3,
    kExplanationFieldNumber = 5,
    kBenchmarkFieldNumber = 6,
    kHocFieldNumber = 9,
    kImagePathFieldNumber = 2,
    kStatusFieldNumber = 8,
    kInferenceFieldNumber = 4,
    kMetadataFieldNumber = 7,
    kSampleIdFieldNumber = 1,
  };
  // repeated int32 ground_truth_label = 3;
  int ground_truth_label_size() const;
  private:
  int _internal_ground_truth_label_size() const;
  public:
  void clear_ground_truth_label();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ground_truth_label(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_ground_truth_label() const;
  void _internal_add_ground_truth_label(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_ground_truth_label();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 ground_truth_label(int index) const;
  void set_ground_truth_label(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_ground_truth_label(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      ground_truth_label() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_ground_truth_label();

  // repeated .mindspore.irpb.Explain.Explanation explanation = 5;
  int explanation_size() const;
  private:
  int _internal_explanation_size() const;
  public:
  void clear_explanation();
  ::mindspore::irpb::Explain_Explanation* mutable_explanation(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mindspore::irpb::Explain_Explanation >*
      mutable_explanation();
  private:
  const ::mindspore::irpb::Explain_Explanation& _internal_explanation(int index) const;
  ::mindspore::irpb::Explain_Explanation* _internal_add_explanation();
  public:
  const ::mindspore::irpb::Explain_Explanation& explanation(int index) const;
  ::mindspore::irpb::Explain_Explanation* add_explanation();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mindspore::irpb::Explain_Explanation >&
      explanation() const;

  // repeated .mindspore.irpb.Explain.Benchmark benchmark = 6;
  int benchmark_size() const;
  private:
  int _internal_benchmark_size() const;
  public:
  void clear_benchmark();
  ::mindspore::irpb::Explain_Benchmark* mutable_benchmark(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mindspore::irpb::Explain_Benchmark >*
      mutable_benchmark();
  private:
  const ::mindspore::irpb::Explain_Benchmark& _internal_benchmark(int index) const;
  ::mindspore::irpb::Explain_Benchmark* _internal_add_benchmark();
  public:
  const ::mindspore::irpb::Explain_Benchmark& benchmark(int index) const;
  ::mindspore::irpb::Explain_Benchmark* add_benchmark();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mindspore::irpb::Explain_Benchmark >&
      benchmark() const;

  // repeated .mindspore.irpb.Explain.Hoc hoc = 9;
  int hoc_size() const;
  private:
  int _internal_hoc_size() const;
  public:
  void clear_hoc();
  ::mindspore::irpb::Explain_Hoc* mutable_hoc(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mindspore::irpb::Explain_Hoc >*
      mutable_hoc();
  private:
  const ::mindspore::irpb::Explain_Hoc& _internal_hoc(int index) const;
  ::mindspore::irpb::Explain_Hoc* _internal_add_hoc();
  public:
  const ::mindspore::irpb::Explain_Hoc& hoc(int index) const;
  ::mindspore::irpb::Explain_Hoc* add_hoc();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mindspore::irpb::Explain_Hoc >&
      hoc() const;

  // optional string image_path = 2;
  bool has_image_path() const;
  private:
  bool _internal_has_image_path() const;
  public:
  void clear_image_path();
  const std::string& image_path() const;
  void set_image_path(const std::string& value);
  void set_image_path(std::string&& value);
  void set_image_path(const char* value);
  void set_image_path(const char* value, size_t size);
  std::string* mutable_image_path();
  std::string* release_image_path();
  void set_allocated_image_path(std::string* image_path);
  private:
  const std::string& _internal_image_path() const;
  void _internal_set_image_path(const std::string& value);
  std::string* _internal_mutable_image_path();
  public:

  // optional string status = 8;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const std::string& status() const;
  void set_status(const std::string& value);
  void set_status(std::string&& value);
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  std::string* mutable_status();
  std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // optional .mindspore.irpb.Explain.Inference inference = 4;
  bool has_inference() const;
  private:
  bool _internal_has_inference() const;
  public:
  void clear_inference();
  const ::mindspore::irpb::Explain_Inference& inference() const;
  ::mindspore::irpb::Explain_Inference* release_inference();
  ::mindspore::irpb::Explain_Inference* mutable_inference();
  void set_allocated_inference(::mindspore::irpb::Explain_Inference* inference);
  private:
  const ::mindspore::irpb::Explain_Inference& _internal_inference() const;
  ::mindspore::irpb::Explain_Inference* _internal_mutable_inference();
  public:
  void unsafe_arena_set_allocated_inference(
      ::mindspore::irpb::Explain_Inference* inference);
  ::mindspore::irpb::Explain_Inference* unsafe_arena_release_inference();

  // optional .mindspore.irpb.Explain.Metadata metadata = 7;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::mindspore::irpb::Explain_Metadata& metadata() const;
  ::mindspore::irpb::Explain_Metadata* release_metadata();
  ::mindspore::irpb::Explain_Metadata* mutable_metadata();
  void set_allocated_metadata(::mindspore::irpb::Explain_Metadata* metadata);
  private:
  const ::mindspore::irpb::Explain_Metadata& _internal_metadata() const;
  ::mindspore::irpb::Explain_Metadata* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::mindspore::irpb::Explain_Metadata* metadata);
  ::mindspore::irpb::Explain_Metadata* unsafe_arena_release_metadata();

  // optional int32 sample_id = 1;
  bool has_sample_id() const;
  private:
  bool _internal_has_sample_id() const;
  public:
  void clear_sample_id();
  ::PROTOBUF_NAMESPACE_ID::int32 sample_id() const;
  void set_sample_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sample_id() const;
  void _internal_set_sample_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mindspore.irpb.Explain)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > ground_truth_label_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mindspore::irpb::Explain_Explanation > explanation_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mindspore::irpb::Explain_Benchmark > benchmark_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mindspore::irpb::Explain_Hoc > hoc_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::mindspore::irpb::Explain_Inference* inference_;
  ::mindspore::irpb::Explain_Metadata* metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 sample_id_;
  friend struct ::TableStruct_mindspore_5fsummary_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Event

// required double wall_time = 1;
inline bool Event::_internal_has_wall_time() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Event::has_wall_time() const {
  return _internal_has_wall_time();
}
inline void Event::clear_wall_time() {
  wall_time_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Event::_internal_wall_time() const {
  return wall_time_;
}
inline double Event::wall_time() const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.Event.wall_time)
  return _internal_wall_time();
}
inline void Event::_internal_set_wall_time(double value) {
  _has_bits_[0] |= 0x00000001u;
  wall_time_ = value;
}
inline void Event::set_wall_time(double value) {
  _internal_set_wall_time(value);
  // @@protoc_insertion_point(field_set:mindspore.irpb.Event.wall_time)
}

// optional int64 step = 2;
inline bool Event::_internal_has_step() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Event::has_step() const {
  return _internal_has_step();
}
inline void Event::clear_step() {
  step_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Event::_internal_step() const {
  return step_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Event::step() const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.Event.step)
  return _internal_step();
}
inline void Event::_internal_set_step(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  step_ = value;
}
inline void Event::set_step(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_step(value);
  // @@protoc_insertion_point(field_set:mindspore.irpb.Event.step)
}

// string version = 3;
inline bool Event::_internal_has_version() const {
  return what_case() == kVersion;
}
inline bool Event::has_version() const {
  return _internal_has_version();
}
inline void Event::set_has_version() {
  _oneof_case_[0] = kVersion;
}
inline void Event::clear_version() {
  if (_internal_has_version()) {
    what_.version_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_what();
  }
}
inline const std::string& Event::version() const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.Event.version)
  return _internal_version();
}
inline void Event::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:mindspore.irpb.Event.version)
}
inline std::string* Event::mutable_version() {
  // @@protoc_insertion_point(field_mutable:mindspore.irpb.Event.version)
  return _internal_mutable_version();
}
inline const std::string& Event::_internal_version() const {
  if (_internal_has_version()) {
    return what_.version_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Event::_internal_set_version(const std::string& value) {
  if (!_internal_has_version()) {
    clear_what();
    set_has_version();
    what_.version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  what_.version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Event::set_version(std::string&& value) {
  // @@protoc_insertion_point(field_set:mindspore.irpb.Event.version)
  if (!_internal_has_version()) {
    clear_what();
    set_has_version();
    what_.version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  what_.version_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mindspore.irpb.Event.version)
}
inline void Event::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_version()) {
    clear_what();
    set_has_version();
    what_.version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  what_.version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:mindspore.irpb.Event.version)
}
inline void Event::set_version(const char* value,
                             size_t size) {
  if (!_internal_has_version()) {
    clear_what();
    set_has_version();
    what_.version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  what_.version_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:mindspore.irpb.Event.version)
}
inline std::string* Event::_internal_mutable_version() {
  if (!_internal_has_version()) {
    clear_what();
    set_has_version();
    what_.version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return what_.version_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Event::release_version() {
  // @@protoc_insertion_point(field_release:mindspore.irpb.Event.version)
  if (_internal_has_version()) {
    clear_has_what();
    return what_.version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void Event::set_allocated_version(std::string* version) {
  if (has_what()) {
    clear_what();
  }
  if (version != nullptr) {
    set_has_version();
    what_.version_.UnsafeSetDefault(version);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(version);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:mindspore.irpb.Event.version)
}

// .mindspore.irpb.GraphProto graph_def = 4;
inline bool Event::_internal_has_graph_def() const {
  return what_case() == kGraphDef;
}
inline bool Event::has_graph_def() const {
  return _internal_has_graph_def();
}
inline void Event::set_has_graph_def() {
  _oneof_case_[0] = kGraphDef;
}
inline ::mindspore::irpb::GraphProto* Event::release_graph_def() {
  // @@protoc_insertion_point(field_release:mindspore.irpb.Event.graph_def)
  if (_internal_has_graph_def()) {
    clear_has_what();
      ::mindspore::irpb::GraphProto* temp = what_.graph_def_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    what_.graph_def_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::mindspore::irpb::GraphProto& Event::_internal_graph_def() const {
  return _internal_has_graph_def()
      ? *what_.graph_def_
      : *reinterpret_cast< ::mindspore::irpb::GraphProto*>(&::mindspore::irpb::_GraphProto_default_instance_);
}
inline const ::mindspore::irpb::GraphProto& Event::graph_def() const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.Event.graph_def)
  return _internal_graph_def();
}
inline ::mindspore::irpb::GraphProto* Event::unsafe_arena_release_graph_def() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mindspore.irpb.Event.graph_def)
  if (_internal_has_graph_def()) {
    clear_has_what();
    ::mindspore::irpb::GraphProto* temp = what_.graph_def_;
    what_.graph_def_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Event::unsafe_arena_set_allocated_graph_def(::mindspore::irpb::GraphProto* graph_def) {
  clear_what();
  if (graph_def) {
    set_has_graph_def();
    what_.graph_def_ = graph_def;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mindspore.irpb.Event.graph_def)
}
inline ::mindspore::irpb::GraphProto* Event::_internal_mutable_graph_def() {
  if (!_internal_has_graph_def()) {
    clear_what();
    set_has_graph_def();
    what_.graph_def_ = CreateMaybeMessage< ::mindspore::irpb::GraphProto >(GetArena());
  }
  return what_.graph_def_;
}
inline ::mindspore::irpb::GraphProto* Event::mutable_graph_def() {
  // @@protoc_insertion_point(field_mutable:mindspore.irpb.Event.graph_def)
  return _internal_mutable_graph_def();
}

// .mindspore.irpb.Summary summary = 5;
inline bool Event::_internal_has_summary() const {
  return what_case() == kSummary;
}
inline bool Event::has_summary() const {
  return _internal_has_summary();
}
inline void Event::set_has_summary() {
  _oneof_case_[0] = kSummary;
}
inline void Event::clear_summary() {
  if (_internal_has_summary()) {
    if (GetArena() == nullptr) {
      delete what_.summary_;
    }
    clear_has_what();
  }
}
inline ::mindspore::irpb::Summary* Event::release_summary() {
  // @@protoc_insertion_point(field_release:mindspore.irpb.Event.summary)
  if (_internal_has_summary()) {
    clear_has_what();
      ::mindspore::irpb::Summary* temp = what_.summary_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    what_.summary_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::mindspore::irpb::Summary& Event::_internal_summary() const {
  return _internal_has_summary()
      ? *what_.summary_
      : *reinterpret_cast< ::mindspore::irpb::Summary*>(&::mindspore::irpb::_Summary_default_instance_);
}
inline const ::mindspore::irpb::Summary& Event::summary() const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.Event.summary)
  return _internal_summary();
}
inline ::mindspore::irpb::Summary* Event::unsafe_arena_release_summary() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mindspore.irpb.Event.summary)
  if (_internal_has_summary()) {
    clear_has_what();
    ::mindspore::irpb::Summary* temp = what_.summary_;
    what_.summary_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Event::unsafe_arena_set_allocated_summary(::mindspore::irpb::Summary* summary) {
  clear_what();
  if (summary) {
    set_has_summary();
    what_.summary_ = summary;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mindspore.irpb.Event.summary)
}
inline ::mindspore::irpb::Summary* Event::_internal_mutable_summary() {
  if (!_internal_has_summary()) {
    clear_what();
    set_has_summary();
    what_.summary_ = CreateMaybeMessage< ::mindspore::irpb::Summary >(GetArena());
  }
  return what_.summary_;
}
inline ::mindspore::irpb::Summary* Event::mutable_summary() {
  // @@protoc_insertion_point(field_mutable:mindspore.irpb.Event.summary)
  return _internal_mutable_summary();
}

// .mindspore.irpb.Explain explain = 6;
inline bool Event::_internal_has_explain() const {
  return what_case() == kExplain;
}
inline bool Event::has_explain() const {
  return _internal_has_explain();
}
inline void Event::set_has_explain() {
  _oneof_case_[0] = kExplain;
}
inline void Event::clear_explain() {
  if (_internal_has_explain()) {
    if (GetArena() == nullptr) {
      delete what_.explain_;
    }
    clear_has_what();
  }
}
inline ::mindspore::irpb::Explain* Event::release_explain() {
  // @@protoc_insertion_point(field_release:mindspore.irpb.Event.explain)
  if (_internal_has_explain()) {
    clear_has_what();
      ::mindspore::irpb::Explain* temp = what_.explain_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    what_.explain_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::mindspore::irpb::Explain& Event::_internal_explain() const {
  return _internal_has_explain()
      ? *what_.explain_
      : *reinterpret_cast< ::mindspore::irpb::Explain*>(&::mindspore::irpb::_Explain_default_instance_);
}
inline const ::mindspore::irpb::Explain& Event::explain() const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.Event.explain)
  return _internal_explain();
}
inline ::mindspore::irpb::Explain* Event::unsafe_arena_release_explain() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mindspore.irpb.Event.explain)
  if (_internal_has_explain()) {
    clear_has_what();
    ::mindspore::irpb::Explain* temp = what_.explain_;
    what_.explain_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Event::unsafe_arena_set_allocated_explain(::mindspore::irpb::Explain* explain) {
  clear_what();
  if (explain) {
    set_has_explain();
    what_.explain_ = explain;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mindspore.irpb.Event.explain)
}
inline ::mindspore::irpb::Explain* Event::_internal_mutable_explain() {
  if (!_internal_has_explain()) {
    clear_what();
    set_has_explain();
    what_.explain_ = CreateMaybeMessage< ::mindspore::irpb::Explain >(GetArena());
  }
  return what_.explain_;
}
inline ::mindspore::irpb::Explain* Event::mutable_explain() {
  // @@protoc_insertion_point(field_mutable:mindspore.irpb.Event.explain)
  return _internal_mutable_explain();
}

inline bool Event::has_what() const {
  return what_case() != WHAT_NOT_SET;
}
inline void Event::clear_has_what() {
  _oneof_case_[0] = WHAT_NOT_SET;
}
inline Event::WhatCase Event::what_case() const {
  return Event::WhatCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// LossLandscape_Point

// optional .mindspore.irpb.TensorProto x = 1;
inline bool LossLandscape_Point::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || x_ != nullptr);
  return value;
}
inline bool LossLandscape_Point::has_x() const {
  return _internal_has_x();
}
inline const ::mindspore::irpb::TensorProto& LossLandscape_Point::_internal_x() const {
  const ::mindspore::irpb::TensorProto* p = x_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mindspore::irpb::TensorProto*>(
      &::mindspore::irpb::_TensorProto_default_instance_);
}
inline const ::mindspore::irpb::TensorProto& LossLandscape_Point::x() const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.LossLandscape.Point.x)
  return _internal_x();
}
inline void LossLandscape_Point::unsafe_arena_set_allocated_x(
    ::mindspore::irpb::TensorProto* x) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(x_);
  }
  x_ = x;
  if (x) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mindspore.irpb.LossLandscape.Point.x)
}
inline ::mindspore::irpb::TensorProto* LossLandscape_Point::release_x() {
  _has_bits_[0] &= ~0x00000001u;
  ::mindspore::irpb::TensorProto* temp = x_;
  x_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mindspore::irpb::TensorProto* LossLandscape_Point::unsafe_arena_release_x() {
  // @@protoc_insertion_point(field_release:mindspore.irpb.LossLandscape.Point.x)
  _has_bits_[0] &= ~0x00000001u;
  ::mindspore::irpb::TensorProto* temp = x_;
  x_ = nullptr;
  return temp;
}
inline ::mindspore::irpb::TensorProto* LossLandscape_Point::_internal_mutable_x() {
  _has_bits_[0] |= 0x00000001u;
  if (x_ == nullptr) {
    auto* p = CreateMaybeMessage<::mindspore::irpb::TensorProto>(GetArena());
    x_ = p;
  }
  return x_;
}
inline ::mindspore::irpb::TensorProto* LossLandscape_Point::mutable_x() {
  // @@protoc_insertion_point(field_mutable:mindspore.irpb.LossLandscape.Point.x)
  return _internal_mutable_x();
}
inline void LossLandscape_Point::set_allocated_x(::mindspore::irpb::TensorProto* x) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(x_);
  }
  if (x) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(x)->GetArena();
    if (message_arena != submessage_arena) {
      x = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, x, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  x_ = x;
  // @@protoc_insertion_point(field_set_allocated:mindspore.irpb.LossLandscape.Point.x)
}

// optional .mindspore.irpb.TensorProto y = 2;
inline bool LossLandscape_Point::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || y_ != nullptr);
  return value;
}
inline bool LossLandscape_Point::has_y() const {
  return _internal_has_y();
}
inline const ::mindspore::irpb::TensorProto& LossLandscape_Point::_internal_y() const {
  const ::mindspore::irpb::TensorProto* p = y_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mindspore::irpb::TensorProto*>(
      &::mindspore::irpb::_TensorProto_default_instance_);
}
inline const ::mindspore::irpb::TensorProto& LossLandscape_Point::y() const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.LossLandscape.Point.y)
  return _internal_y();
}
inline void LossLandscape_Point::unsafe_arena_set_allocated_y(
    ::mindspore::irpb::TensorProto* y) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(y_);
  }
  y_ = y;
  if (y) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mindspore.irpb.LossLandscape.Point.y)
}
inline ::mindspore::irpb::TensorProto* LossLandscape_Point::release_y() {
  _has_bits_[0] &= ~0x00000002u;
  ::mindspore::irpb::TensorProto* temp = y_;
  y_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mindspore::irpb::TensorProto* LossLandscape_Point::unsafe_arena_release_y() {
  // @@protoc_insertion_point(field_release:mindspore.irpb.LossLandscape.Point.y)
  _has_bits_[0] &= ~0x00000002u;
  ::mindspore::irpb::TensorProto* temp = y_;
  y_ = nullptr;
  return temp;
}
inline ::mindspore::irpb::TensorProto* LossLandscape_Point::_internal_mutable_y() {
  _has_bits_[0] |= 0x00000002u;
  if (y_ == nullptr) {
    auto* p = CreateMaybeMessage<::mindspore::irpb::TensorProto>(GetArena());
    y_ = p;
  }
  return y_;
}
inline ::mindspore::irpb::TensorProto* LossLandscape_Point::mutable_y() {
  // @@protoc_insertion_point(field_mutable:mindspore.irpb.LossLandscape.Point.y)
  return _internal_mutable_y();
}
inline void LossLandscape_Point::set_allocated_y(::mindspore::irpb::TensorProto* y) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(y_);
  }
  if (y) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(y)->GetArena();
    if (message_arena != submessage_arena) {
      y = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, y, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  y_ = y;
  // @@protoc_insertion_point(field_set_allocated:mindspore.irpb.LossLandscape.Point.y)
}

// optional .mindspore.irpb.TensorProto z = 3;
inline bool LossLandscape_Point::_internal_has_z() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || z_ != nullptr);
  return value;
}
inline bool LossLandscape_Point::has_z() const {
  return _internal_has_z();
}
inline const ::mindspore::irpb::TensorProto& LossLandscape_Point::_internal_z() const {
  const ::mindspore::irpb::TensorProto* p = z_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mindspore::irpb::TensorProto*>(
      &::mindspore::irpb::_TensorProto_default_instance_);
}
inline const ::mindspore::irpb::TensorProto& LossLandscape_Point::z() const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.LossLandscape.Point.z)
  return _internal_z();
}
inline void LossLandscape_Point::unsafe_arena_set_allocated_z(
    ::mindspore::irpb::TensorProto* z) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(z_);
  }
  z_ = z;
  if (z) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mindspore.irpb.LossLandscape.Point.z)
}
inline ::mindspore::irpb::TensorProto* LossLandscape_Point::release_z() {
  _has_bits_[0] &= ~0x00000004u;
  ::mindspore::irpb::TensorProto* temp = z_;
  z_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mindspore::irpb::TensorProto* LossLandscape_Point::unsafe_arena_release_z() {
  // @@protoc_insertion_point(field_release:mindspore.irpb.LossLandscape.Point.z)
  _has_bits_[0] &= ~0x00000004u;
  ::mindspore::irpb::TensorProto* temp = z_;
  z_ = nullptr;
  return temp;
}
inline ::mindspore::irpb::TensorProto* LossLandscape_Point::_internal_mutable_z() {
  _has_bits_[0] |= 0x00000004u;
  if (z_ == nullptr) {
    auto* p = CreateMaybeMessage<::mindspore::irpb::TensorProto>(GetArena());
    z_ = p;
  }
  return z_;
}
inline ::mindspore::irpb::TensorProto* LossLandscape_Point::mutable_z() {
  // @@protoc_insertion_point(field_mutable:mindspore.irpb.LossLandscape.Point.z)
  return _internal_mutable_z();
}
inline void LossLandscape_Point::set_allocated_z(::mindspore::irpb::TensorProto* z) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(z_);
  }
  if (z) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(z)->GetArena();
    if (message_arena != submessage_arena) {
      z = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, z, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  z_ = z;
  // @@protoc_insertion_point(field_set_allocated:mindspore.irpb.LossLandscape.Point.z)
}

// -------------------------------------------------------------------

// LossLandscape_LossPath

// repeated int32 intervals = 1;
inline int LossLandscape_LossPath::_internal_intervals_size() const {
  return intervals_.size();
}
inline int LossLandscape_LossPath::intervals_size() const {
  return _internal_intervals_size();
}
inline void LossLandscape_LossPath::clear_intervals() {
  intervals_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LossLandscape_LossPath::_internal_intervals(int index) const {
  return intervals_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LossLandscape_LossPath::intervals(int index) const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.LossLandscape.LossPath.intervals)
  return _internal_intervals(index);
}
inline void LossLandscape_LossPath::set_intervals(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  intervals_.Set(index, value);
  // @@protoc_insertion_point(field_set:mindspore.irpb.LossLandscape.LossPath.intervals)
}
inline void LossLandscape_LossPath::_internal_add_intervals(::PROTOBUF_NAMESPACE_ID::int32 value) {
  intervals_.Add(value);
}
inline void LossLandscape_LossPath::add_intervals(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_intervals(value);
  // @@protoc_insertion_point(field_add:mindspore.irpb.LossLandscape.LossPath.intervals)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
LossLandscape_LossPath::_internal_intervals() const {
  return intervals_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
LossLandscape_LossPath::intervals() const {
  // @@protoc_insertion_point(field_list:mindspore.irpb.LossLandscape.LossPath.intervals)
  return _internal_intervals();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
LossLandscape_LossPath::_internal_mutable_intervals() {
  return &intervals_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
LossLandscape_LossPath::mutable_intervals() {
  // @@protoc_insertion_point(field_mutable_list:mindspore.irpb.LossLandscape.LossPath.intervals)
  return _internal_mutable_intervals();
}

// optional .mindspore.irpb.LossLandscape.Point points = 2;
inline bool LossLandscape_LossPath::_internal_has_points() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || points_ != nullptr);
  return value;
}
inline bool LossLandscape_LossPath::has_points() const {
  return _internal_has_points();
}
inline void LossLandscape_LossPath::clear_points() {
  if (points_ != nullptr) points_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mindspore::irpb::LossLandscape_Point& LossLandscape_LossPath::_internal_points() const {
  const ::mindspore::irpb::LossLandscape_Point* p = points_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mindspore::irpb::LossLandscape_Point*>(
      &::mindspore::irpb::_LossLandscape_Point_default_instance_);
}
inline const ::mindspore::irpb::LossLandscape_Point& LossLandscape_LossPath::points() const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.LossLandscape.LossPath.points)
  return _internal_points();
}
inline void LossLandscape_LossPath::unsafe_arena_set_allocated_points(
    ::mindspore::irpb::LossLandscape_Point* points) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(points_);
  }
  points_ = points;
  if (points) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mindspore.irpb.LossLandscape.LossPath.points)
}
inline ::mindspore::irpb::LossLandscape_Point* LossLandscape_LossPath::release_points() {
  _has_bits_[0] &= ~0x00000001u;
  ::mindspore::irpb::LossLandscape_Point* temp = points_;
  points_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mindspore::irpb::LossLandscape_Point* LossLandscape_LossPath::unsafe_arena_release_points() {
  // @@protoc_insertion_point(field_release:mindspore.irpb.LossLandscape.LossPath.points)
  _has_bits_[0] &= ~0x00000001u;
  ::mindspore::irpb::LossLandscape_Point* temp = points_;
  points_ = nullptr;
  return temp;
}
inline ::mindspore::irpb::LossLandscape_Point* LossLandscape_LossPath::_internal_mutable_points() {
  _has_bits_[0] |= 0x00000001u;
  if (points_ == nullptr) {
    auto* p = CreateMaybeMessage<::mindspore::irpb::LossLandscape_Point>(GetArena());
    points_ = p;
  }
  return points_;
}
inline ::mindspore::irpb::LossLandscape_Point* LossLandscape_LossPath::mutable_points() {
  // @@protoc_insertion_point(field_mutable:mindspore.irpb.LossLandscape.LossPath.points)
  return _internal_mutable_points();
}
inline void LossLandscape_LossPath::set_allocated_points(::mindspore::irpb::LossLandscape_Point* points) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete points_;
  }
  if (points) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(points);
    if (message_arena != submessage_arena) {
      points = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, points, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  points_ = points;
  // @@protoc_insertion_point(field_set_allocated:mindspore.irpb.LossLandscape.LossPath.points)
}

// -------------------------------------------------------------------

// LossLandscape_Metadata

// optional string decomposition = 1;
inline bool LossLandscape_Metadata::_internal_has_decomposition() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LossLandscape_Metadata::has_decomposition() const {
  return _internal_has_decomposition();
}
inline void LossLandscape_Metadata::clear_decomposition() {
  decomposition_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LossLandscape_Metadata::decomposition() const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.LossLandscape.Metadata.decomposition)
  return _internal_decomposition();
}
inline void LossLandscape_Metadata::set_decomposition(const std::string& value) {
  _internal_set_decomposition(value);
  // @@protoc_insertion_point(field_set:mindspore.irpb.LossLandscape.Metadata.decomposition)
}
inline std::string* LossLandscape_Metadata::mutable_decomposition() {
  // @@protoc_insertion_point(field_mutable:mindspore.irpb.LossLandscape.Metadata.decomposition)
  return _internal_mutable_decomposition();
}
inline const std::string& LossLandscape_Metadata::_internal_decomposition() const {
  return decomposition_.Get();
}
inline void LossLandscape_Metadata::_internal_set_decomposition(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  decomposition_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LossLandscape_Metadata::set_decomposition(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  decomposition_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mindspore.irpb.LossLandscape.Metadata.decomposition)
}
inline void LossLandscape_Metadata::set_decomposition(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  decomposition_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mindspore.irpb.LossLandscape.Metadata.decomposition)
}
inline void LossLandscape_Metadata::set_decomposition(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  decomposition_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mindspore.irpb.LossLandscape.Metadata.decomposition)
}
inline std::string* LossLandscape_Metadata::_internal_mutable_decomposition() {
  _has_bits_[0] |= 0x00000001u;
  return decomposition_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LossLandscape_Metadata::release_decomposition() {
  // @@protoc_insertion_point(field_release:mindspore.irpb.LossLandscape.Metadata.decomposition)
  if (!_internal_has_decomposition()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return decomposition_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LossLandscape_Metadata::set_allocated_decomposition(std::string* decomposition) {
  if (decomposition != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  decomposition_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), decomposition,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mindspore.irpb.LossLandscape.Metadata.decomposition)
}

// optional string unit = 2;
inline bool LossLandscape_Metadata::_internal_has_unit() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LossLandscape_Metadata::has_unit() const {
  return _internal_has_unit();
}
inline void LossLandscape_Metadata::clear_unit() {
  unit_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& LossLandscape_Metadata::unit() const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.LossLandscape.Metadata.unit)
  return _internal_unit();
}
inline void LossLandscape_Metadata::set_unit(const std::string& value) {
  _internal_set_unit(value);
  // @@protoc_insertion_point(field_set:mindspore.irpb.LossLandscape.Metadata.unit)
}
inline std::string* LossLandscape_Metadata::mutable_unit() {
  // @@protoc_insertion_point(field_mutable:mindspore.irpb.LossLandscape.Metadata.unit)
  return _internal_mutable_unit();
}
inline const std::string& LossLandscape_Metadata::_internal_unit() const {
  return unit_.Get();
}
inline void LossLandscape_Metadata::_internal_set_unit(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  unit_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LossLandscape_Metadata::set_unit(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  unit_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mindspore.irpb.LossLandscape.Metadata.unit)
}
inline void LossLandscape_Metadata::set_unit(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  unit_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mindspore.irpb.LossLandscape.Metadata.unit)
}
inline void LossLandscape_Metadata::set_unit(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  unit_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mindspore.irpb.LossLandscape.Metadata.unit)
}
inline std::string* LossLandscape_Metadata::_internal_mutable_unit() {
  _has_bits_[0] |= 0x00000002u;
  return unit_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LossLandscape_Metadata::release_unit() {
  // @@protoc_insertion_point(field_release:mindspore.irpb.LossLandscape.Metadata.unit)
  if (!_internal_has_unit()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return unit_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LossLandscape_Metadata::set_allocated_unit(std::string* unit) {
  if (unit != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  unit_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), unit,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mindspore.irpb.LossLandscape.Metadata.unit)
}

// optional int32 step_per_epoch = 3;
inline bool LossLandscape_Metadata::_internal_has_step_per_epoch() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LossLandscape_Metadata::has_step_per_epoch() const {
  return _internal_has_step_per_epoch();
}
inline void LossLandscape_Metadata::clear_step_per_epoch() {
  step_per_epoch_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LossLandscape_Metadata::_internal_step_per_epoch() const {
  return step_per_epoch_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LossLandscape_Metadata::step_per_epoch() const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.LossLandscape.Metadata.step_per_epoch)
  return _internal_step_per_epoch();
}
inline void LossLandscape_Metadata::_internal_set_step_per_epoch(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  step_per_epoch_ = value;
}
inline void LossLandscape_Metadata::set_step_per_epoch(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_step_per_epoch(value);
  // @@protoc_insertion_point(field_set:mindspore.irpb.LossLandscape.Metadata.step_per_epoch)
}

// -------------------------------------------------------------------

// LossLandscape

// optional .mindspore.irpb.LossLandscape.Point landscape = 1;
inline bool LossLandscape::_internal_has_landscape() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || landscape_ != nullptr);
  return value;
}
inline bool LossLandscape::has_landscape() const {
  return _internal_has_landscape();
}
inline void LossLandscape::clear_landscape() {
  if (landscape_ != nullptr) landscape_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mindspore::irpb::LossLandscape_Point& LossLandscape::_internal_landscape() const {
  const ::mindspore::irpb::LossLandscape_Point* p = landscape_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mindspore::irpb::LossLandscape_Point*>(
      &::mindspore::irpb::_LossLandscape_Point_default_instance_);
}
inline const ::mindspore::irpb::LossLandscape_Point& LossLandscape::landscape() const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.LossLandscape.landscape)
  return _internal_landscape();
}
inline void LossLandscape::unsafe_arena_set_allocated_landscape(
    ::mindspore::irpb::LossLandscape_Point* landscape) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(landscape_);
  }
  landscape_ = landscape;
  if (landscape) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mindspore.irpb.LossLandscape.landscape)
}
inline ::mindspore::irpb::LossLandscape_Point* LossLandscape::release_landscape() {
  _has_bits_[0] &= ~0x00000001u;
  ::mindspore::irpb::LossLandscape_Point* temp = landscape_;
  landscape_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mindspore::irpb::LossLandscape_Point* LossLandscape::unsafe_arena_release_landscape() {
  // @@protoc_insertion_point(field_release:mindspore.irpb.LossLandscape.landscape)
  _has_bits_[0] &= ~0x00000001u;
  ::mindspore::irpb::LossLandscape_Point* temp = landscape_;
  landscape_ = nullptr;
  return temp;
}
inline ::mindspore::irpb::LossLandscape_Point* LossLandscape::_internal_mutable_landscape() {
  _has_bits_[0] |= 0x00000001u;
  if (landscape_ == nullptr) {
    auto* p = CreateMaybeMessage<::mindspore::irpb::LossLandscape_Point>(GetArena());
    landscape_ = p;
  }
  return landscape_;
}
inline ::mindspore::irpb::LossLandscape_Point* LossLandscape::mutable_landscape() {
  // @@protoc_insertion_point(field_mutable:mindspore.irpb.LossLandscape.landscape)
  return _internal_mutable_landscape();
}
inline void LossLandscape::set_allocated_landscape(::mindspore::irpb::LossLandscape_Point* landscape) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete landscape_;
  }
  if (landscape) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(landscape);
    if (message_arena != submessage_arena) {
      landscape = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, landscape, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  landscape_ = landscape;
  // @@protoc_insertion_point(field_set_allocated:mindspore.irpb.LossLandscape.landscape)
}

// optional .mindspore.irpb.LossLandscape.LossPath loss_path = 2;
inline bool LossLandscape::_internal_has_loss_path() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || loss_path_ != nullptr);
  return value;
}
inline bool LossLandscape::has_loss_path() const {
  return _internal_has_loss_path();
}
inline void LossLandscape::clear_loss_path() {
  if (loss_path_ != nullptr) loss_path_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::mindspore::irpb::LossLandscape_LossPath& LossLandscape::_internal_loss_path() const {
  const ::mindspore::irpb::LossLandscape_LossPath* p = loss_path_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mindspore::irpb::LossLandscape_LossPath*>(
      &::mindspore::irpb::_LossLandscape_LossPath_default_instance_);
}
inline const ::mindspore::irpb::LossLandscape_LossPath& LossLandscape::loss_path() const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.LossLandscape.loss_path)
  return _internal_loss_path();
}
inline void LossLandscape::unsafe_arena_set_allocated_loss_path(
    ::mindspore::irpb::LossLandscape_LossPath* loss_path) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(loss_path_);
  }
  loss_path_ = loss_path;
  if (loss_path) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mindspore.irpb.LossLandscape.loss_path)
}
inline ::mindspore::irpb::LossLandscape_LossPath* LossLandscape::release_loss_path() {
  _has_bits_[0] &= ~0x00000002u;
  ::mindspore::irpb::LossLandscape_LossPath* temp = loss_path_;
  loss_path_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mindspore::irpb::LossLandscape_LossPath* LossLandscape::unsafe_arena_release_loss_path() {
  // @@protoc_insertion_point(field_release:mindspore.irpb.LossLandscape.loss_path)
  _has_bits_[0] &= ~0x00000002u;
  ::mindspore::irpb::LossLandscape_LossPath* temp = loss_path_;
  loss_path_ = nullptr;
  return temp;
}
inline ::mindspore::irpb::LossLandscape_LossPath* LossLandscape::_internal_mutable_loss_path() {
  _has_bits_[0] |= 0x00000002u;
  if (loss_path_ == nullptr) {
    auto* p = CreateMaybeMessage<::mindspore::irpb::LossLandscape_LossPath>(GetArena());
    loss_path_ = p;
  }
  return loss_path_;
}
inline ::mindspore::irpb::LossLandscape_LossPath* LossLandscape::mutable_loss_path() {
  // @@protoc_insertion_point(field_mutable:mindspore.irpb.LossLandscape.loss_path)
  return _internal_mutable_loss_path();
}
inline void LossLandscape::set_allocated_loss_path(::mindspore::irpb::LossLandscape_LossPath* loss_path) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete loss_path_;
  }
  if (loss_path) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(loss_path);
    if (message_arena != submessage_arena) {
      loss_path = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, loss_path, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  loss_path_ = loss_path;
  // @@protoc_insertion_point(field_set_allocated:mindspore.irpb.LossLandscape.loss_path)
}

// optional .mindspore.irpb.LossLandscape.Metadata metadata = 3;
inline bool LossLandscape::_internal_has_metadata() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || metadata_ != nullptr);
  return value;
}
inline bool LossLandscape::has_metadata() const {
  return _internal_has_metadata();
}
inline void LossLandscape::clear_metadata() {
  if (metadata_ != nullptr) metadata_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::mindspore::irpb::LossLandscape_Metadata& LossLandscape::_internal_metadata() const {
  const ::mindspore::irpb::LossLandscape_Metadata* p = metadata_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mindspore::irpb::LossLandscape_Metadata*>(
      &::mindspore::irpb::_LossLandscape_Metadata_default_instance_);
}
inline const ::mindspore::irpb::LossLandscape_Metadata& LossLandscape::metadata() const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.LossLandscape.metadata)
  return _internal_metadata();
}
inline void LossLandscape::unsafe_arena_set_allocated_metadata(
    ::mindspore::irpb::LossLandscape_Metadata* metadata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  metadata_ = metadata;
  if (metadata) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mindspore.irpb.LossLandscape.metadata)
}
inline ::mindspore::irpb::LossLandscape_Metadata* LossLandscape::release_metadata() {
  _has_bits_[0] &= ~0x00000004u;
  ::mindspore::irpb::LossLandscape_Metadata* temp = metadata_;
  metadata_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mindspore::irpb::LossLandscape_Metadata* LossLandscape::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:mindspore.irpb.LossLandscape.metadata)
  _has_bits_[0] &= ~0x00000004u;
  ::mindspore::irpb::LossLandscape_Metadata* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::mindspore::irpb::LossLandscape_Metadata* LossLandscape::_internal_mutable_metadata() {
  _has_bits_[0] |= 0x00000004u;
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::mindspore::irpb::LossLandscape_Metadata>(GetArena());
    metadata_ = p;
  }
  return metadata_;
}
inline ::mindspore::irpb::LossLandscape_Metadata* LossLandscape::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable:mindspore.irpb.LossLandscape.metadata)
  return _internal_mutable_metadata();
}
inline void LossLandscape::set_allocated_metadata(::mindspore::irpb::LossLandscape_Metadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete metadata_;
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(metadata);
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:mindspore.irpb.LossLandscape.metadata)
}

// optional .mindspore.irpb.LossLandscape.Point convergence_point = 4;
inline bool LossLandscape::_internal_has_convergence_point() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || convergence_point_ != nullptr);
  return value;
}
inline bool LossLandscape::has_convergence_point() const {
  return _internal_has_convergence_point();
}
inline void LossLandscape::clear_convergence_point() {
  if (convergence_point_ != nullptr) convergence_point_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::mindspore::irpb::LossLandscape_Point& LossLandscape::_internal_convergence_point() const {
  const ::mindspore::irpb::LossLandscape_Point* p = convergence_point_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mindspore::irpb::LossLandscape_Point*>(
      &::mindspore::irpb::_LossLandscape_Point_default_instance_);
}
inline const ::mindspore::irpb::LossLandscape_Point& LossLandscape::convergence_point() const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.LossLandscape.convergence_point)
  return _internal_convergence_point();
}
inline void LossLandscape::unsafe_arena_set_allocated_convergence_point(
    ::mindspore::irpb::LossLandscape_Point* convergence_point) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(convergence_point_);
  }
  convergence_point_ = convergence_point;
  if (convergence_point) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mindspore.irpb.LossLandscape.convergence_point)
}
inline ::mindspore::irpb::LossLandscape_Point* LossLandscape::release_convergence_point() {
  _has_bits_[0] &= ~0x00000008u;
  ::mindspore::irpb::LossLandscape_Point* temp = convergence_point_;
  convergence_point_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mindspore::irpb::LossLandscape_Point* LossLandscape::unsafe_arena_release_convergence_point() {
  // @@protoc_insertion_point(field_release:mindspore.irpb.LossLandscape.convergence_point)
  _has_bits_[0] &= ~0x00000008u;
  ::mindspore::irpb::LossLandscape_Point* temp = convergence_point_;
  convergence_point_ = nullptr;
  return temp;
}
inline ::mindspore::irpb::LossLandscape_Point* LossLandscape::_internal_mutable_convergence_point() {
  _has_bits_[0] |= 0x00000008u;
  if (convergence_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::mindspore::irpb::LossLandscape_Point>(GetArena());
    convergence_point_ = p;
  }
  return convergence_point_;
}
inline ::mindspore::irpb::LossLandscape_Point* LossLandscape::mutable_convergence_point() {
  // @@protoc_insertion_point(field_mutable:mindspore.irpb.LossLandscape.convergence_point)
  return _internal_mutable_convergence_point();
}
inline void LossLandscape::set_allocated_convergence_point(::mindspore::irpb::LossLandscape_Point* convergence_point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete convergence_point_;
  }
  if (convergence_point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(convergence_point);
    if (message_arena != submessage_arena) {
      convergence_point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, convergence_point, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  convergence_point_ = convergence_point;
  // @@protoc_insertion_point(field_set_allocated:mindspore.irpb.LossLandscape.convergence_point)
}

// -------------------------------------------------------------------

// Summary_Image

// required int32 height = 1;
inline bool Summary_Image::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Summary_Image::has_height() const {
  return _internal_has_height();
}
inline void Summary_Image::clear_height() {
  height_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Summary_Image::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Summary_Image::height() const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.Summary.Image.height)
  return _internal_height();
}
inline void Summary_Image::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  height_ = value;
}
inline void Summary_Image::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:mindspore.irpb.Summary.Image.height)
}

// required int32 width = 2;
inline bool Summary_Image::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Summary_Image::has_width() const {
  return _internal_has_width();
}
inline void Summary_Image::clear_width() {
  width_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Summary_Image::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Summary_Image::width() const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.Summary.Image.width)
  return _internal_width();
}
inline void Summary_Image::_internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  width_ = value;
}
inline void Summary_Image::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:mindspore.irpb.Summary.Image.width)
}

// required int32 colorspace = 3;
inline bool Summary_Image::_internal_has_colorspace() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Summary_Image::has_colorspace() const {
  return _internal_has_colorspace();
}
inline void Summary_Image::clear_colorspace() {
  colorspace_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Summary_Image::_internal_colorspace() const {
  return colorspace_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Summary_Image::colorspace() const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.Summary.Image.colorspace)
  return _internal_colorspace();
}
inline void Summary_Image::_internal_set_colorspace(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  colorspace_ = value;
}
inline void Summary_Image::set_colorspace(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_colorspace(value);
  // @@protoc_insertion_point(field_set:mindspore.irpb.Summary.Image.colorspace)
}

// required bytes encoded_image = 4;
inline bool Summary_Image::_internal_has_encoded_image() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Summary_Image::has_encoded_image() const {
  return _internal_has_encoded_image();
}
inline void Summary_Image::clear_encoded_image() {
  encoded_image_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Summary_Image::encoded_image() const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.Summary.Image.encoded_image)
  return _internal_encoded_image();
}
inline void Summary_Image::set_encoded_image(const std::string& value) {
  _internal_set_encoded_image(value);
  // @@protoc_insertion_point(field_set:mindspore.irpb.Summary.Image.encoded_image)
}
inline std::string* Summary_Image::mutable_encoded_image() {
  // @@protoc_insertion_point(field_mutable:mindspore.irpb.Summary.Image.encoded_image)
  return _internal_mutable_encoded_image();
}
inline const std::string& Summary_Image::_internal_encoded_image() const {
  return encoded_image_.Get();
}
inline void Summary_Image::_internal_set_encoded_image(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  encoded_image_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Summary_Image::set_encoded_image(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  encoded_image_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mindspore.irpb.Summary.Image.encoded_image)
}
inline void Summary_Image::set_encoded_image(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  encoded_image_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mindspore.irpb.Summary.Image.encoded_image)
}
inline void Summary_Image::set_encoded_image(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  encoded_image_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mindspore.irpb.Summary.Image.encoded_image)
}
inline std::string* Summary_Image::_internal_mutable_encoded_image() {
  _has_bits_[0] |= 0x00000001u;
  return encoded_image_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Summary_Image::release_encoded_image() {
  // @@protoc_insertion_point(field_release:mindspore.irpb.Summary.Image.encoded_image)
  if (!_internal_has_encoded_image()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return encoded_image_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Summary_Image::set_allocated_encoded_image(std::string* encoded_image) {
  if (encoded_image != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  encoded_image_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), encoded_image,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mindspore.irpb.Summary.Image.encoded_image)
}

// -------------------------------------------------------------------

// Summary_Histogram_bucket

// required double left = 1;
inline bool Summary_Histogram_bucket::_internal_has_left() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Summary_Histogram_bucket::has_left() const {
  return _internal_has_left();
}
inline void Summary_Histogram_bucket::clear_left() {
  left_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Summary_Histogram_bucket::_internal_left() const {
  return left_;
}
inline double Summary_Histogram_bucket::left() const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.Summary.Histogram.bucket.left)
  return _internal_left();
}
inline void Summary_Histogram_bucket::_internal_set_left(double value) {
  _has_bits_[0] |= 0x00000001u;
  left_ = value;
}
inline void Summary_Histogram_bucket::set_left(double value) {
  _internal_set_left(value);
  // @@protoc_insertion_point(field_set:mindspore.irpb.Summary.Histogram.bucket.left)
}

// required double width = 2;
inline bool Summary_Histogram_bucket::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Summary_Histogram_bucket::has_width() const {
  return _internal_has_width();
}
inline void Summary_Histogram_bucket::clear_width() {
  width_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double Summary_Histogram_bucket::_internal_width() const {
  return width_;
}
inline double Summary_Histogram_bucket::width() const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.Summary.Histogram.bucket.width)
  return _internal_width();
}
inline void Summary_Histogram_bucket::_internal_set_width(double value) {
  _has_bits_[0] |= 0x00000002u;
  width_ = value;
}
inline void Summary_Histogram_bucket::set_width(double value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:mindspore.irpb.Summary.Histogram.bucket.width)
}

// required int64 count = 3;
inline bool Summary_Histogram_bucket::_internal_has_count() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Summary_Histogram_bucket::has_count() const {
  return _internal_has_count();
}
inline void Summary_Histogram_bucket::clear_count() {
  count_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Summary_Histogram_bucket::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Summary_Histogram_bucket::count() const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.Summary.Histogram.bucket.count)
  return _internal_count();
}
inline void Summary_Histogram_bucket::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  count_ = value;
}
inline void Summary_Histogram_bucket::set_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:mindspore.irpb.Summary.Histogram.bucket.count)
}

// -------------------------------------------------------------------

// Summary_Histogram

// repeated .mindspore.irpb.Summary.Histogram.bucket buckets = 1;
inline int Summary_Histogram::_internal_buckets_size() const {
  return buckets_.size();
}
inline int Summary_Histogram::buckets_size() const {
  return _internal_buckets_size();
}
inline void Summary_Histogram::clear_buckets() {
  buckets_.Clear();
}
inline ::mindspore::irpb::Summary_Histogram_bucket* Summary_Histogram::mutable_buckets(int index) {
  // @@protoc_insertion_point(field_mutable:mindspore.irpb.Summary.Histogram.buckets)
  return buckets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mindspore::irpb::Summary_Histogram_bucket >*
Summary_Histogram::mutable_buckets() {
  // @@protoc_insertion_point(field_mutable_list:mindspore.irpb.Summary.Histogram.buckets)
  return &buckets_;
}
inline const ::mindspore::irpb::Summary_Histogram_bucket& Summary_Histogram::_internal_buckets(int index) const {
  return buckets_.Get(index);
}
inline const ::mindspore::irpb::Summary_Histogram_bucket& Summary_Histogram::buckets(int index) const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.Summary.Histogram.buckets)
  return _internal_buckets(index);
}
inline ::mindspore::irpb::Summary_Histogram_bucket* Summary_Histogram::_internal_add_buckets() {
  return buckets_.Add();
}
inline ::mindspore::irpb::Summary_Histogram_bucket* Summary_Histogram::add_buckets() {
  // @@protoc_insertion_point(field_add:mindspore.irpb.Summary.Histogram.buckets)
  return _internal_add_buckets();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mindspore::irpb::Summary_Histogram_bucket >&
Summary_Histogram::buckets() const {
  // @@protoc_insertion_point(field_list:mindspore.irpb.Summary.Histogram.buckets)
  return buckets_;
}

// optional int64 nan_count = 2;
inline bool Summary_Histogram::_internal_has_nan_count() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Summary_Histogram::has_nan_count() const {
  return _internal_has_nan_count();
}
inline void Summary_Histogram::clear_nan_count() {
  nan_count_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Summary_Histogram::_internal_nan_count() const {
  return nan_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Summary_Histogram::nan_count() const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.Summary.Histogram.nan_count)
  return _internal_nan_count();
}
inline void Summary_Histogram::_internal_set_nan_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  nan_count_ = value;
}
inline void Summary_Histogram::set_nan_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_nan_count(value);
  // @@protoc_insertion_point(field_set:mindspore.irpb.Summary.Histogram.nan_count)
}

// optional int64 pos_inf_count = 3;
inline bool Summary_Histogram::_internal_has_pos_inf_count() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Summary_Histogram::has_pos_inf_count() const {
  return _internal_has_pos_inf_count();
}
inline void Summary_Histogram::clear_pos_inf_count() {
  pos_inf_count_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Summary_Histogram::_internal_pos_inf_count() const {
  return pos_inf_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Summary_Histogram::pos_inf_count() const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.Summary.Histogram.pos_inf_count)
  return _internal_pos_inf_count();
}
inline void Summary_Histogram::_internal_set_pos_inf_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  pos_inf_count_ = value;
}
inline void Summary_Histogram::set_pos_inf_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_pos_inf_count(value);
  // @@protoc_insertion_point(field_set:mindspore.irpb.Summary.Histogram.pos_inf_count)
}

// optional int64 neg_inf_count = 4;
inline bool Summary_Histogram::_internal_has_neg_inf_count() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Summary_Histogram::has_neg_inf_count() const {
  return _internal_has_neg_inf_count();
}
inline void Summary_Histogram::clear_neg_inf_count() {
  neg_inf_count_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Summary_Histogram::_internal_neg_inf_count() const {
  return neg_inf_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Summary_Histogram::neg_inf_count() const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.Summary.Histogram.neg_inf_count)
  return _internal_neg_inf_count();
}
inline void Summary_Histogram::_internal_set_neg_inf_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  neg_inf_count_ = value;
}
inline void Summary_Histogram::set_neg_inf_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_neg_inf_count(value);
  // @@protoc_insertion_point(field_set:mindspore.irpb.Summary.Histogram.neg_inf_count)
}

// optional double max = 5;
inline bool Summary_Histogram::_internal_has_max() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Summary_Histogram::has_max() const {
  return _internal_has_max();
}
inline void Summary_Histogram::clear_max() {
  max_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double Summary_Histogram::_internal_max() const {
  return max_;
}
inline double Summary_Histogram::max() const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.Summary.Histogram.max)
  return _internal_max();
}
inline void Summary_Histogram::_internal_set_max(double value) {
  _has_bits_[0] |= 0x00000008u;
  max_ = value;
}
inline void Summary_Histogram::set_max(double value) {
  _internal_set_max(value);
  // @@protoc_insertion_point(field_set:mindspore.irpb.Summary.Histogram.max)
}

// optional double min = 6;
inline bool Summary_Histogram::_internal_has_min() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Summary_Histogram::has_min() const {
  return _internal_has_min();
}
inline void Summary_Histogram::clear_min() {
  min_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double Summary_Histogram::_internal_min() const {
  return min_;
}
inline double Summary_Histogram::min() const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.Summary.Histogram.min)
  return _internal_min();
}
inline void Summary_Histogram::_internal_set_min(double value) {
  _has_bits_[0] |= 0x00000010u;
  min_ = value;
}
inline void Summary_Histogram::set_min(double value) {
  _internal_set_min(value);
  // @@protoc_insertion_point(field_set:mindspore.irpb.Summary.Histogram.min)
}

// optional double sum = 7;
inline bool Summary_Histogram::_internal_has_sum() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Summary_Histogram::has_sum() const {
  return _internal_has_sum();
}
inline void Summary_Histogram::clear_sum() {
  sum_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double Summary_Histogram::_internal_sum() const {
  return sum_;
}
inline double Summary_Histogram::sum() const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.Summary.Histogram.sum)
  return _internal_sum();
}
inline void Summary_Histogram::_internal_set_sum(double value) {
  _has_bits_[0] |= 0x00000020u;
  sum_ = value;
}
inline void Summary_Histogram::set_sum(double value) {
  _internal_set_sum(value);
  // @@protoc_insertion_point(field_set:mindspore.irpb.Summary.Histogram.sum)
}

// optional int64 count = 8;
inline bool Summary_Histogram::_internal_has_count() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Summary_Histogram::has_count() const {
  return _internal_has_count();
}
inline void Summary_Histogram::clear_count() {
  count_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Summary_Histogram::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Summary_Histogram::count() const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.Summary.Histogram.count)
  return _internal_count();
}
inline void Summary_Histogram::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000040u;
  count_ = value;
}
inline void Summary_Histogram::set_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:mindspore.irpb.Summary.Histogram.count)
}

// -------------------------------------------------------------------

// Summary_Value

// required string tag = 1;
inline bool Summary_Value::_internal_has_tag() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Summary_Value::has_tag() const {
  return _internal_has_tag();
}
inline void Summary_Value::clear_tag() {
  tag_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Summary_Value::tag() const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.Summary.Value.tag)
  return _internal_tag();
}
inline void Summary_Value::set_tag(const std::string& value) {
  _internal_set_tag(value);
  // @@protoc_insertion_point(field_set:mindspore.irpb.Summary.Value.tag)
}
inline std::string* Summary_Value::mutable_tag() {
  // @@protoc_insertion_point(field_mutable:mindspore.irpb.Summary.Value.tag)
  return _internal_mutable_tag();
}
inline const std::string& Summary_Value::_internal_tag() const {
  return tag_.Get();
}
inline void Summary_Value::_internal_set_tag(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Summary_Value::set_tag(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  tag_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mindspore.irpb.Summary.Value.tag)
}
inline void Summary_Value::set_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mindspore.irpb.Summary.Value.tag)
}
inline void Summary_Value::set_tag(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mindspore.irpb.Summary.Value.tag)
}
inline std::string* Summary_Value::_internal_mutable_tag() {
  _has_bits_[0] |= 0x00000001u;
  return tag_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Summary_Value::release_tag() {
  // @@protoc_insertion_point(field_release:mindspore.irpb.Summary.Value.tag)
  if (!_internal_has_tag()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return tag_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Summary_Value::set_allocated_tag(std::string* tag) {
  if (tag != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tag,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mindspore.irpb.Summary.Value.tag)
}

// float scalar_value = 3;
inline bool Summary_Value::_internal_has_scalar_value() const {
  return value_case() == kScalarValue;
}
inline bool Summary_Value::has_scalar_value() const {
  return _internal_has_scalar_value();
}
inline void Summary_Value::set_has_scalar_value() {
  _oneof_case_[0] = kScalarValue;
}
inline void Summary_Value::clear_scalar_value() {
  if (_internal_has_scalar_value()) {
    value_.scalar_value_ = 0;
    clear_has_value();
  }
}
inline float Summary_Value::_internal_scalar_value() const {
  if (_internal_has_scalar_value()) {
    return value_.scalar_value_;
  }
  return 0;
}
inline void Summary_Value::_internal_set_scalar_value(float value) {
  if (!_internal_has_scalar_value()) {
    clear_value();
    set_has_scalar_value();
  }
  value_.scalar_value_ = value;
}
inline float Summary_Value::scalar_value() const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.Summary.Value.scalar_value)
  return _internal_scalar_value();
}
inline void Summary_Value::set_scalar_value(float value) {
  _internal_set_scalar_value(value);
  // @@protoc_insertion_point(field_set:mindspore.irpb.Summary.Value.scalar_value)
}

// .mindspore.irpb.Summary.Image image = 4;
inline bool Summary_Value::_internal_has_image() const {
  return value_case() == kImage;
}
inline bool Summary_Value::has_image() const {
  return _internal_has_image();
}
inline void Summary_Value::set_has_image() {
  _oneof_case_[0] = kImage;
}
inline void Summary_Value::clear_image() {
  if (_internal_has_image()) {
    if (GetArena() == nullptr) {
      delete value_.image_;
    }
    clear_has_value();
  }
}
inline ::mindspore::irpb::Summary_Image* Summary_Value::release_image() {
  // @@protoc_insertion_point(field_release:mindspore.irpb.Summary.Value.image)
  if (_internal_has_image()) {
    clear_has_value();
      ::mindspore::irpb::Summary_Image* temp = value_.image_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.image_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::mindspore::irpb::Summary_Image& Summary_Value::_internal_image() const {
  return _internal_has_image()
      ? *value_.image_
      : *reinterpret_cast< ::mindspore::irpb::Summary_Image*>(&::mindspore::irpb::_Summary_Image_default_instance_);
}
inline const ::mindspore::irpb::Summary_Image& Summary_Value::image() const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.Summary.Value.image)
  return _internal_image();
}
inline ::mindspore::irpb::Summary_Image* Summary_Value::unsafe_arena_release_image() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mindspore.irpb.Summary.Value.image)
  if (_internal_has_image()) {
    clear_has_value();
    ::mindspore::irpb::Summary_Image* temp = value_.image_;
    value_.image_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Summary_Value::unsafe_arena_set_allocated_image(::mindspore::irpb::Summary_Image* image) {
  clear_value();
  if (image) {
    set_has_image();
    value_.image_ = image;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mindspore.irpb.Summary.Value.image)
}
inline ::mindspore::irpb::Summary_Image* Summary_Value::_internal_mutable_image() {
  if (!_internal_has_image()) {
    clear_value();
    set_has_image();
    value_.image_ = CreateMaybeMessage< ::mindspore::irpb::Summary_Image >(GetArena());
  }
  return value_.image_;
}
inline ::mindspore::irpb::Summary_Image* Summary_Value::mutable_image() {
  // @@protoc_insertion_point(field_mutable:mindspore.irpb.Summary.Value.image)
  return _internal_mutable_image();
}

// .mindspore.irpb.TensorProto tensor = 8;
inline bool Summary_Value::_internal_has_tensor() const {
  return value_case() == kTensor;
}
inline bool Summary_Value::has_tensor() const {
  return _internal_has_tensor();
}
inline void Summary_Value::set_has_tensor() {
  _oneof_case_[0] = kTensor;
}
inline ::mindspore::irpb::TensorProto* Summary_Value::release_tensor() {
  // @@protoc_insertion_point(field_release:mindspore.irpb.Summary.Value.tensor)
  if (_internal_has_tensor()) {
    clear_has_value();
      ::mindspore::irpb::TensorProto* temp = value_.tensor_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.tensor_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::mindspore::irpb::TensorProto& Summary_Value::_internal_tensor() const {
  return _internal_has_tensor()
      ? *value_.tensor_
      : *reinterpret_cast< ::mindspore::irpb::TensorProto*>(&::mindspore::irpb::_TensorProto_default_instance_);
}
inline const ::mindspore::irpb::TensorProto& Summary_Value::tensor() const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.Summary.Value.tensor)
  return _internal_tensor();
}
inline ::mindspore::irpb::TensorProto* Summary_Value::unsafe_arena_release_tensor() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mindspore.irpb.Summary.Value.tensor)
  if (_internal_has_tensor()) {
    clear_has_value();
    ::mindspore::irpb::TensorProto* temp = value_.tensor_;
    value_.tensor_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Summary_Value::unsafe_arena_set_allocated_tensor(::mindspore::irpb::TensorProto* tensor) {
  clear_value();
  if (tensor) {
    set_has_tensor();
    value_.tensor_ = tensor;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mindspore.irpb.Summary.Value.tensor)
}
inline ::mindspore::irpb::TensorProto* Summary_Value::_internal_mutable_tensor() {
  if (!_internal_has_tensor()) {
    clear_value();
    set_has_tensor();
    value_.tensor_ = CreateMaybeMessage< ::mindspore::irpb::TensorProto >(GetArena());
  }
  return value_.tensor_;
}
inline ::mindspore::irpb::TensorProto* Summary_Value::mutable_tensor() {
  // @@protoc_insertion_point(field_mutable:mindspore.irpb.Summary.Value.tensor)
  return _internal_mutable_tensor();
}

// .mindspore.irpb.Summary.Histogram histogram = 9;
inline bool Summary_Value::_internal_has_histogram() const {
  return value_case() == kHistogram;
}
inline bool Summary_Value::has_histogram() const {
  return _internal_has_histogram();
}
inline void Summary_Value::set_has_histogram() {
  _oneof_case_[0] = kHistogram;
}
inline void Summary_Value::clear_histogram() {
  if (_internal_has_histogram()) {
    if (GetArena() == nullptr) {
      delete value_.histogram_;
    }
    clear_has_value();
  }
}
inline ::mindspore::irpb::Summary_Histogram* Summary_Value::release_histogram() {
  // @@protoc_insertion_point(field_release:mindspore.irpb.Summary.Value.histogram)
  if (_internal_has_histogram()) {
    clear_has_value();
      ::mindspore::irpb::Summary_Histogram* temp = value_.histogram_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.histogram_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::mindspore::irpb::Summary_Histogram& Summary_Value::_internal_histogram() const {
  return _internal_has_histogram()
      ? *value_.histogram_
      : *reinterpret_cast< ::mindspore::irpb::Summary_Histogram*>(&::mindspore::irpb::_Summary_Histogram_default_instance_);
}
inline const ::mindspore::irpb::Summary_Histogram& Summary_Value::histogram() const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.Summary.Value.histogram)
  return _internal_histogram();
}
inline ::mindspore::irpb::Summary_Histogram* Summary_Value::unsafe_arena_release_histogram() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mindspore.irpb.Summary.Value.histogram)
  if (_internal_has_histogram()) {
    clear_has_value();
    ::mindspore::irpb::Summary_Histogram* temp = value_.histogram_;
    value_.histogram_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Summary_Value::unsafe_arena_set_allocated_histogram(::mindspore::irpb::Summary_Histogram* histogram) {
  clear_value();
  if (histogram) {
    set_has_histogram();
    value_.histogram_ = histogram;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mindspore.irpb.Summary.Value.histogram)
}
inline ::mindspore::irpb::Summary_Histogram* Summary_Value::_internal_mutable_histogram() {
  if (!_internal_has_histogram()) {
    clear_value();
    set_has_histogram();
    value_.histogram_ = CreateMaybeMessage< ::mindspore::irpb::Summary_Histogram >(GetArena());
  }
  return value_.histogram_;
}
inline ::mindspore::irpb::Summary_Histogram* Summary_Value::mutable_histogram() {
  // @@protoc_insertion_point(field_mutable:mindspore.irpb.Summary.Value.histogram)
  return _internal_mutable_histogram();
}

// .mindspore.irpb.LossLandscape loss_landscape = 10;
inline bool Summary_Value::_internal_has_loss_landscape() const {
  return value_case() == kLossLandscape;
}
inline bool Summary_Value::has_loss_landscape() const {
  return _internal_has_loss_landscape();
}
inline void Summary_Value::set_has_loss_landscape() {
  _oneof_case_[0] = kLossLandscape;
}
inline void Summary_Value::clear_loss_landscape() {
  if (_internal_has_loss_landscape()) {
    if (GetArena() == nullptr) {
      delete value_.loss_landscape_;
    }
    clear_has_value();
  }
}
inline ::mindspore::irpb::LossLandscape* Summary_Value::release_loss_landscape() {
  // @@protoc_insertion_point(field_release:mindspore.irpb.Summary.Value.loss_landscape)
  if (_internal_has_loss_landscape()) {
    clear_has_value();
      ::mindspore::irpb::LossLandscape* temp = value_.loss_landscape_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.loss_landscape_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::mindspore::irpb::LossLandscape& Summary_Value::_internal_loss_landscape() const {
  return _internal_has_loss_landscape()
      ? *value_.loss_landscape_
      : *reinterpret_cast< ::mindspore::irpb::LossLandscape*>(&::mindspore::irpb::_LossLandscape_default_instance_);
}
inline const ::mindspore::irpb::LossLandscape& Summary_Value::loss_landscape() const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.Summary.Value.loss_landscape)
  return _internal_loss_landscape();
}
inline ::mindspore::irpb::LossLandscape* Summary_Value::unsafe_arena_release_loss_landscape() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mindspore.irpb.Summary.Value.loss_landscape)
  if (_internal_has_loss_landscape()) {
    clear_has_value();
    ::mindspore::irpb::LossLandscape* temp = value_.loss_landscape_;
    value_.loss_landscape_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Summary_Value::unsafe_arena_set_allocated_loss_landscape(::mindspore::irpb::LossLandscape* loss_landscape) {
  clear_value();
  if (loss_landscape) {
    set_has_loss_landscape();
    value_.loss_landscape_ = loss_landscape;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mindspore.irpb.Summary.Value.loss_landscape)
}
inline ::mindspore::irpb::LossLandscape* Summary_Value::_internal_mutable_loss_landscape() {
  if (!_internal_has_loss_landscape()) {
    clear_value();
    set_has_loss_landscape();
    value_.loss_landscape_ = CreateMaybeMessage< ::mindspore::irpb::LossLandscape >(GetArena());
  }
  return value_.loss_landscape_;
}
inline ::mindspore::irpb::LossLandscape* Summary_Value::mutable_loss_landscape() {
  // @@protoc_insertion_point(field_mutable:mindspore.irpb.Summary.Value.loss_landscape)
  return _internal_mutable_loss_landscape();
}

inline bool Summary_Value::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void Summary_Value::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline Summary_Value::ValueCase Summary_Value::value_case() const {
  return Summary_Value::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Summary

// repeated .mindspore.irpb.Summary.Value value = 1;
inline int Summary::_internal_value_size() const {
  return value_.size();
}
inline int Summary::value_size() const {
  return _internal_value_size();
}
inline void Summary::clear_value() {
  value_.Clear();
}
inline ::mindspore::irpb::Summary_Value* Summary::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:mindspore.irpb.Summary.value)
  return value_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mindspore::irpb::Summary_Value >*
Summary::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:mindspore.irpb.Summary.value)
  return &value_;
}
inline const ::mindspore::irpb::Summary_Value& Summary::_internal_value(int index) const {
  return value_.Get(index);
}
inline const ::mindspore::irpb::Summary_Value& Summary::value(int index) const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.Summary.value)
  return _internal_value(index);
}
inline ::mindspore::irpb::Summary_Value* Summary::_internal_add_value() {
  return value_.Add();
}
inline ::mindspore::irpb::Summary_Value* Summary::add_value() {
  // @@protoc_insertion_point(field_add:mindspore.irpb.Summary.value)
  return _internal_add_value();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mindspore::irpb::Summary_Value >&
Summary::value() const {
  // @@protoc_insertion_point(field_list:mindspore.irpb.Summary.value)
  return value_;
}

// -------------------------------------------------------------------

// Explain_Inference

// repeated float ground_truth_prob = 1;
inline int Explain_Inference::_internal_ground_truth_prob_size() const {
  return ground_truth_prob_.size();
}
inline int Explain_Inference::ground_truth_prob_size() const {
  return _internal_ground_truth_prob_size();
}
inline void Explain_Inference::clear_ground_truth_prob() {
  ground_truth_prob_.Clear();
}
inline float Explain_Inference::_internal_ground_truth_prob(int index) const {
  return ground_truth_prob_.Get(index);
}
inline float Explain_Inference::ground_truth_prob(int index) const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.Explain.Inference.ground_truth_prob)
  return _internal_ground_truth_prob(index);
}
inline void Explain_Inference::set_ground_truth_prob(int index, float value) {
  ground_truth_prob_.Set(index, value);
  // @@protoc_insertion_point(field_set:mindspore.irpb.Explain.Inference.ground_truth_prob)
}
inline void Explain_Inference::_internal_add_ground_truth_prob(float value) {
  ground_truth_prob_.Add(value);
}
inline void Explain_Inference::add_ground_truth_prob(float value) {
  _internal_add_ground_truth_prob(value);
  // @@protoc_insertion_point(field_add:mindspore.irpb.Explain.Inference.ground_truth_prob)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Explain_Inference::_internal_ground_truth_prob() const {
  return ground_truth_prob_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Explain_Inference::ground_truth_prob() const {
  // @@protoc_insertion_point(field_list:mindspore.irpb.Explain.Inference.ground_truth_prob)
  return _internal_ground_truth_prob();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Explain_Inference::_internal_mutable_ground_truth_prob() {
  return &ground_truth_prob_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Explain_Inference::mutable_ground_truth_prob() {
  // @@protoc_insertion_point(field_mutable_list:mindspore.irpb.Explain.Inference.ground_truth_prob)
  return _internal_mutable_ground_truth_prob();
}

// repeated int32 predicted_label = 2;
inline int Explain_Inference::_internal_predicted_label_size() const {
  return predicted_label_.size();
}
inline int Explain_Inference::predicted_label_size() const {
  return _internal_predicted_label_size();
}
inline void Explain_Inference::clear_predicted_label() {
  predicted_label_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Explain_Inference::_internal_predicted_label(int index) const {
  return predicted_label_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Explain_Inference::predicted_label(int index) const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.Explain.Inference.predicted_label)
  return _internal_predicted_label(index);
}
inline void Explain_Inference::set_predicted_label(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  predicted_label_.Set(index, value);
  // @@protoc_insertion_point(field_set:mindspore.irpb.Explain.Inference.predicted_label)
}
inline void Explain_Inference::_internal_add_predicted_label(::PROTOBUF_NAMESPACE_ID::int32 value) {
  predicted_label_.Add(value);
}
inline void Explain_Inference::add_predicted_label(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_predicted_label(value);
  // @@protoc_insertion_point(field_add:mindspore.irpb.Explain.Inference.predicted_label)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Explain_Inference::_internal_predicted_label() const {
  return predicted_label_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Explain_Inference::predicted_label() const {
  // @@protoc_insertion_point(field_list:mindspore.irpb.Explain.Inference.predicted_label)
  return _internal_predicted_label();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Explain_Inference::_internal_mutable_predicted_label() {
  return &predicted_label_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Explain_Inference::mutable_predicted_label() {
  // @@protoc_insertion_point(field_mutable_list:mindspore.irpb.Explain.Inference.predicted_label)
  return _internal_mutable_predicted_label();
}

// repeated float predicted_prob = 3;
inline int Explain_Inference::_internal_predicted_prob_size() const {
  return predicted_prob_.size();
}
inline int Explain_Inference::predicted_prob_size() const {
  return _internal_predicted_prob_size();
}
inline void Explain_Inference::clear_predicted_prob() {
  predicted_prob_.Clear();
}
inline float Explain_Inference::_internal_predicted_prob(int index) const {
  return predicted_prob_.Get(index);
}
inline float Explain_Inference::predicted_prob(int index) const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.Explain.Inference.predicted_prob)
  return _internal_predicted_prob(index);
}
inline void Explain_Inference::set_predicted_prob(int index, float value) {
  predicted_prob_.Set(index, value);
  // @@protoc_insertion_point(field_set:mindspore.irpb.Explain.Inference.predicted_prob)
}
inline void Explain_Inference::_internal_add_predicted_prob(float value) {
  predicted_prob_.Add(value);
}
inline void Explain_Inference::add_predicted_prob(float value) {
  _internal_add_predicted_prob(value);
  // @@protoc_insertion_point(field_add:mindspore.irpb.Explain.Inference.predicted_prob)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Explain_Inference::_internal_predicted_prob() const {
  return predicted_prob_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Explain_Inference::predicted_prob() const {
  // @@protoc_insertion_point(field_list:mindspore.irpb.Explain.Inference.predicted_prob)
  return _internal_predicted_prob();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Explain_Inference::_internal_mutable_predicted_prob() {
  return &predicted_prob_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Explain_Inference::mutable_predicted_prob() {
  // @@protoc_insertion_point(field_mutable_list:mindspore.irpb.Explain.Inference.predicted_prob)
  return _internal_mutable_predicted_prob();
}

// repeated float ground_truth_prob_sd = 4;
inline int Explain_Inference::_internal_ground_truth_prob_sd_size() const {
  return ground_truth_prob_sd_.size();
}
inline int Explain_Inference::ground_truth_prob_sd_size() const {
  return _internal_ground_truth_prob_sd_size();
}
inline void Explain_Inference::clear_ground_truth_prob_sd() {
  ground_truth_prob_sd_.Clear();
}
inline float Explain_Inference::_internal_ground_truth_prob_sd(int index) const {
  return ground_truth_prob_sd_.Get(index);
}
inline float Explain_Inference::ground_truth_prob_sd(int index) const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.Explain.Inference.ground_truth_prob_sd)
  return _internal_ground_truth_prob_sd(index);
}
inline void Explain_Inference::set_ground_truth_prob_sd(int index, float value) {
  ground_truth_prob_sd_.Set(index, value);
  // @@protoc_insertion_point(field_set:mindspore.irpb.Explain.Inference.ground_truth_prob_sd)
}
inline void Explain_Inference::_internal_add_ground_truth_prob_sd(float value) {
  ground_truth_prob_sd_.Add(value);
}
inline void Explain_Inference::add_ground_truth_prob_sd(float value) {
  _internal_add_ground_truth_prob_sd(value);
  // @@protoc_insertion_point(field_add:mindspore.irpb.Explain.Inference.ground_truth_prob_sd)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Explain_Inference::_internal_ground_truth_prob_sd() const {
  return ground_truth_prob_sd_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Explain_Inference::ground_truth_prob_sd() const {
  // @@protoc_insertion_point(field_list:mindspore.irpb.Explain.Inference.ground_truth_prob_sd)
  return _internal_ground_truth_prob_sd();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Explain_Inference::_internal_mutable_ground_truth_prob_sd() {
  return &ground_truth_prob_sd_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Explain_Inference::mutable_ground_truth_prob_sd() {
  // @@protoc_insertion_point(field_mutable_list:mindspore.irpb.Explain.Inference.ground_truth_prob_sd)
  return _internal_mutable_ground_truth_prob_sd();
}

// repeated float ground_truth_prob_itl95_low = 5;
inline int Explain_Inference::_internal_ground_truth_prob_itl95_low_size() const {
  return ground_truth_prob_itl95_low_.size();
}
inline int Explain_Inference::ground_truth_prob_itl95_low_size() const {
  return _internal_ground_truth_prob_itl95_low_size();
}
inline void Explain_Inference::clear_ground_truth_prob_itl95_low() {
  ground_truth_prob_itl95_low_.Clear();
}
inline float Explain_Inference::_internal_ground_truth_prob_itl95_low(int index) const {
  return ground_truth_prob_itl95_low_.Get(index);
}
inline float Explain_Inference::ground_truth_prob_itl95_low(int index) const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.Explain.Inference.ground_truth_prob_itl95_low)
  return _internal_ground_truth_prob_itl95_low(index);
}
inline void Explain_Inference::set_ground_truth_prob_itl95_low(int index, float value) {
  ground_truth_prob_itl95_low_.Set(index, value);
  // @@protoc_insertion_point(field_set:mindspore.irpb.Explain.Inference.ground_truth_prob_itl95_low)
}
inline void Explain_Inference::_internal_add_ground_truth_prob_itl95_low(float value) {
  ground_truth_prob_itl95_low_.Add(value);
}
inline void Explain_Inference::add_ground_truth_prob_itl95_low(float value) {
  _internal_add_ground_truth_prob_itl95_low(value);
  // @@protoc_insertion_point(field_add:mindspore.irpb.Explain.Inference.ground_truth_prob_itl95_low)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Explain_Inference::_internal_ground_truth_prob_itl95_low() const {
  return ground_truth_prob_itl95_low_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Explain_Inference::ground_truth_prob_itl95_low() const {
  // @@protoc_insertion_point(field_list:mindspore.irpb.Explain.Inference.ground_truth_prob_itl95_low)
  return _internal_ground_truth_prob_itl95_low();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Explain_Inference::_internal_mutable_ground_truth_prob_itl95_low() {
  return &ground_truth_prob_itl95_low_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Explain_Inference::mutable_ground_truth_prob_itl95_low() {
  // @@protoc_insertion_point(field_mutable_list:mindspore.irpb.Explain.Inference.ground_truth_prob_itl95_low)
  return _internal_mutable_ground_truth_prob_itl95_low();
}

// repeated float ground_truth_prob_itl95_hi = 6;
inline int Explain_Inference::_internal_ground_truth_prob_itl95_hi_size() const {
  return ground_truth_prob_itl95_hi_.size();
}
inline int Explain_Inference::ground_truth_prob_itl95_hi_size() const {
  return _internal_ground_truth_prob_itl95_hi_size();
}
inline void Explain_Inference::clear_ground_truth_prob_itl95_hi() {
  ground_truth_prob_itl95_hi_.Clear();
}
inline float Explain_Inference::_internal_ground_truth_prob_itl95_hi(int index) const {
  return ground_truth_prob_itl95_hi_.Get(index);
}
inline float Explain_Inference::ground_truth_prob_itl95_hi(int index) const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.Explain.Inference.ground_truth_prob_itl95_hi)
  return _internal_ground_truth_prob_itl95_hi(index);
}
inline void Explain_Inference::set_ground_truth_prob_itl95_hi(int index, float value) {
  ground_truth_prob_itl95_hi_.Set(index, value);
  // @@protoc_insertion_point(field_set:mindspore.irpb.Explain.Inference.ground_truth_prob_itl95_hi)
}
inline void Explain_Inference::_internal_add_ground_truth_prob_itl95_hi(float value) {
  ground_truth_prob_itl95_hi_.Add(value);
}
inline void Explain_Inference::add_ground_truth_prob_itl95_hi(float value) {
  _internal_add_ground_truth_prob_itl95_hi(value);
  // @@protoc_insertion_point(field_add:mindspore.irpb.Explain.Inference.ground_truth_prob_itl95_hi)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Explain_Inference::_internal_ground_truth_prob_itl95_hi() const {
  return ground_truth_prob_itl95_hi_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Explain_Inference::ground_truth_prob_itl95_hi() const {
  // @@protoc_insertion_point(field_list:mindspore.irpb.Explain.Inference.ground_truth_prob_itl95_hi)
  return _internal_ground_truth_prob_itl95_hi();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Explain_Inference::_internal_mutable_ground_truth_prob_itl95_hi() {
  return &ground_truth_prob_itl95_hi_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Explain_Inference::mutable_ground_truth_prob_itl95_hi() {
  // @@protoc_insertion_point(field_mutable_list:mindspore.irpb.Explain.Inference.ground_truth_prob_itl95_hi)
  return _internal_mutable_ground_truth_prob_itl95_hi();
}

// repeated float predicted_prob_sd = 7;
inline int Explain_Inference::_internal_predicted_prob_sd_size() const {
  return predicted_prob_sd_.size();
}
inline int Explain_Inference::predicted_prob_sd_size() const {
  return _internal_predicted_prob_sd_size();
}
inline void Explain_Inference::clear_predicted_prob_sd() {
  predicted_prob_sd_.Clear();
}
inline float Explain_Inference::_internal_predicted_prob_sd(int index) const {
  return predicted_prob_sd_.Get(index);
}
inline float Explain_Inference::predicted_prob_sd(int index) const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.Explain.Inference.predicted_prob_sd)
  return _internal_predicted_prob_sd(index);
}
inline void Explain_Inference::set_predicted_prob_sd(int index, float value) {
  predicted_prob_sd_.Set(index, value);
  // @@protoc_insertion_point(field_set:mindspore.irpb.Explain.Inference.predicted_prob_sd)
}
inline void Explain_Inference::_internal_add_predicted_prob_sd(float value) {
  predicted_prob_sd_.Add(value);
}
inline void Explain_Inference::add_predicted_prob_sd(float value) {
  _internal_add_predicted_prob_sd(value);
  // @@protoc_insertion_point(field_add:mindspore.irpb.Explain.Inference.predicted_prob_sd)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Explain_Inference::_internal_predicted_prob_sd() const {
  return predicted_prob_sd_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Explain_Inference::predicted_prob_sd() const {
  // @@protoc_insertion_point(field_list:mindspore.irpb.Explain.Inference.predicted_prob_sd)
  return _internal_predicted_prob_sd();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Explain_Inference::_internal_mutable_predicted_prob_sd() {
  return &predicted_prob_sd_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Explain_Inference::mutable_predicted_prob_sd() {
  // @@protoc_insertion_point(field_mutable_list:mindspore.irpb.Explain.Inference.predicted_prob_sd)
  return _internal_mutable_predicted_prob_sd();
}

// repeated float predicted_prob_itl95_low = 8;
inline int Explain_Inference::_internal_predicted_prob_itl95_low_size() const {
  return predicted_prob_itl95_low_.size();
}
inline int Explain_Inference::predicted_prob_itl95_low_size() const {
  return _internal_predicted_prob_itl95_low_size();
}
inline void Explain_Inference::clear_predicted_prob_itl95_low() {
  predicted_prob_itl95_low_.Clear();
}
inline float Explain_Inference::_internal_predicted_prob_itl95_low(int index) const {
  return predicted_prob_itl95_low_.Get(index);
}
inline float Explain_Inference::predicted_prob_itl95_low(int index) const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.Explain.Inference.predicted_prob_itl95_low)
  return _internal_predicted_prob_itl95_low(index);
}
inline void Explain_Inference::set_predicted_prob_itl95_low(int index, float value) {
  predicted_prob_itl95_low_.Set(index, value);
  // @@protoc_insertion_point(field_set:mindspore.irpb.Explain.Inference.predicted_prob_itl95_low)
}
inline void Explain_Inference::_internal_add_predicted_prob_itl95_low(float value) {
  predicted_prob_itl95_low_.Add(value);
}
inline void Explain_Inference::add_predicted_prob_itl95_low(float value) {
  _internal_add_predicted_prob_itl95_low(value);
  // @@protoc_insertion_point(field_add:mindspore.irpb.Explain.Inference.predicted_prob_itl95_low)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Explain_Inference::_internal_predicted_prob_itl95_low() const {
  return predicted_prob_itl95_low_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Explain_Inference::predicted_prob_itl95_low() const {
  // @@protoc_insertion_point(field_list:mindspore.irpb.Explain.Inference.predicted_prob_itl95_low)
  return _internal_predicted_prob_itl95_low();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Explain_Inference::_internal_mutable_predicted_prob_itl95_low() {
  return &predicted_prob_itl95_low_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Explain_Inference::mutable_predicted_prob_itl95_low() {
  // @@protoc_insertion_point(field_mutable_list:mindspore.irpb.Explain.Inference.predicted_prob_itl95_low)
  return _internal_mutable_predicted_prob_itl95_low();
}

// repeated float predicted_prob_itl95_hi = 9;
inline int Explain_Inference::_internal_predicted_prob_itl95_hi_size() const {
  return predicted_prob_itl95_hi_.size();
}
inline int Explain_Inference::predicted_prob_itl95_hi_size() const {
  return _internal_predicted_prob_itl95_hi_size();
}
inline void Explain_Inference::clear_predicted_prob_itl95_hi() {
  predicted_prob_itl95_hi_.Clear();
}
inline float Explain_Inference::_internal_predicted_prob_itl95_hi(int index) const {
  return predicted_prob_itl95_hi_.Get(index);
}
inline float Explain_Inference::predicted_prob_itl95_hi(int index) const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.Explain.Inference.predicted_prob_itl95_hi)
  return _internal_predicted_prob_itl95_hi(index);
}
inline void Explain_Inference::set_predicted_prob_itl95_hi(int index, float value) {
  predicted_prob_itl95_hi_.Set(index, value);
  // @@protoc_insertion_point(field_set:mindspore.irpb.Explain.Inference.predicted_prob_itl95_hi)
}
inline void Explain_Inference::_internal_add_predicted_prob_itl95_hi(float value) {
  predicted_prob_itl95_hi_.Add(value);
}
inline void Explain_Inference::add_predicted_prob_itl95_hi(float value) {
  _internal_add_predicted_prob_itl95_hi(value);
  // @@protoc_insertion_point(field_add:mindspore.irpb.Explain.Inference.predicted_prob_itl95_hi)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Explain_Inference::_internal_predicted_prob_itl95_hi() const {
  return predicted_prob_itl95_hi_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Explain_Inference::predicted_prob_itl95_hi() const {
  // @@protoc_insertion_point(field_list:mindspore.irpb.Explain.Inference.predicted_prob_itl95_hi)
  return _internal_predicted_prob_itl95_hi();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Explain_Inference::_internal_mutable_predicted_prob_itl95_hi() {
  return &predicted_prob_itl95_hi_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Explain_Inference::mutable_predicted_prob_itl95_hi() {
  // @@protoc_insertion_point(field_mutable_list:mindspore.irpb.Explain.Inference.predicted_prob_itl95_hi)
  return _internal_mutable_predicted_prob_itl95_hi();
}

// -------------------------------------------------------------------

// Explain_Explanation

// optional string explain_method = 1;
inline bool Explain_Explanation::_internal_has_explain_method() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Explain_Explanation::has_explain_method() const {
  return _internal_has_explain_method();
}
inline void Explain_Explanation::clear_explain_method() {
  explain_method_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Explain_Explanation::explain_method() const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.Explain.Explanation.explain_method)
  return _internal_explain_method();
}
inline void Explain_Explanation::set_explain_method(const std::string& value) {
  _internal_set_explain_method(value);
  // @@protoc_insertion_point(field_set:mindspore.irpb.Explain.Explanation.explain_method)
}
inline std::string* Explain_Explanation::mutable_explain_method() {
  // @@protoc_insertion_point(field_mutable:mindspore.irpb.Explain.Explanation.explain_method)
  return _internal_mutable_explain_method();
}
inline const std::string& Explain_Explanation::_internal_explain_method() const {
  return explain_method_.Get();
}
inline void Explain_Explanation::_internal_set_explain_method(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  explain_method_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Explain_Explanation::set_explain_method(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  explain_method_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mindspore.irpb.Explain.Explanation.explain_method)
}
inline void Explain_Explanation::set_explain_method(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  explain_method_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mindspore.irpb.Explain.Explanation.explain_method)
}
inline void Explain_Explanation::set_explain_method(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  explain_method_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mindspore.irpb.Explain.Explanation.explain_method)
}
inline std::string* Explain_Explanation::_internal_mutable_explain_method() {
  _has_bits_[0] |= 0x00000001u;
  return explain_method_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Explain_Explanation::release_explain_method() {
  // @@protoc_insertion_point(field_release:mindspore.irpb.Explain.Explanation.explain_method)
  if (!_internal_has_explain_method()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return explain_method_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Explain_Explanation::set_allocated_explain_method(std::string* explain_method) {
  if (explain_method != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  explain_method_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), explain_method,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mindspore.irpb.Explain.Explanation.explain_method)
}

// optional int32 label = 2;
inline bool Explain_Explanation::_internal_has_label() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Explain_Explanation::has_label() const {
  return _internal_has_label();
}
inline void Explain_Explanation::clear_label() {
  label_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Explain_Explanation::_internal_label() const {
  return label_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Explain_Explanation::label() const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.Explain.Explanation.label)
  return _internal_label();
}
inline void Explain_Explanation::_internal_set_label(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  label_ = value;
}
inline void Explain_Explanation::set_label(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:mindspore.irpb.Explain.Explanation.label)
}

// optional string heatmap_path = 3;
inline bool Explain_Explanation::_internal_has_heatmap_path() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Explain_Explanation::has_heatmap_path() const {
  return _internal_has_heatmap_path();
}
inline void Explain_Explanation::clear_heatmap_path() {
  heatmap_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Explain_Explanation::heatmap_path() const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.Explain.Explanation.heatmap_path)
  return _internal_heatmap_path();
}
inline void Explain_Explanation::set_heatmap_path(const std::string& value) {
  _internal_set_heatmap_path(value);
  // @@protoc_insertion_point(field_set:mindspore.irpb.Explain.Explanation.heatmap_path)
}
inline std::string* Explain_Explanation::mutable_heatmap_path() {
  // @@protoc_insertion_point(field_mutable:mindspore.irpb.Explain.Explanation.heatmap_path)
  return _internal_mutable_heatmap_path();
}
inline const std::string& Explain_Explanation::_internal_heatmap_path() const {
  return heatmap_path_.Get();
}
inline void Explain_Explanation::_internal_set_heatmap_path(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  heatmap_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Explain_Explanation::set_heatmap_path(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  heatmap_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mindspore.irpb.Explain.Explanation.heatmap_path)
}
inline void Explain_Explanation::set_heatmap_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  heatmap_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mindspore.irpb.Explain.Explanation.heatmap_path)
}
inline void Explain_Explanation::set_heatmap_path(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  heatmap_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mindspore.irpb.Explain.Explanation.heatmap_path)
}
inline std::string* Explain_Explanation::_internal_mutable_heatmap_path() {
  _has_bits_[0] |= 0x00000002u;
  return heatmap_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Explain_Explanation::release_heatmap_path() {
  // @@protoc_insertion_point(field_release:mindspore.irpb.Explain.Explanation.heatmap_path)
  if (!_internal_has_heatmap_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return heatmap_path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Explain_Explanation::set_allocated_heatmap_path(std::string* heatmap_path) {
  if (heatmap_path != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  heatmap_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), heatmap_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mindspore.irpb.Explain.Explanation.heatmap_path)
}

// -------------------------------------------------------------------

// Explain_Benchmark

// optional string benchmark_method = 1;
inline bool Explain_Benchmark::_internal_has_benchmark_method() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Explain_Benchmark::has_benchmark_method() const {
  return _internal_has_benchmark_method();
}
inline void Explain_Benchmark::clear_benchmark_method() {
  benchmark_method_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Explain_Benchmark::benchmark_method() const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.Explain.Benchmark.benchmark_method)
  return _internal_benchmark_method();
}
inline void Explain_Benchmark::set_benchmark_method(const std::string& value) {
  _internal_set_benchmark_method(value);
  // @@protoc_insertion_point(field_set:mindspore.irpb.Explain.Benchmark.benchmark_method)
}
inline std::string* Explain_Benchmark::mutable_benchmark_method() {
  // @@protoc_insertion_point(field_mutable:mindspore.irpb.Explain.Benchmark.benchmark_method)
  return _internal_mutable_benchmark_method();
}
inline const std::string& Explain_Benchmark::_internal_benchmark_method() const {
  return benchmark_method_.Get();
}
inline void Explain_Benchmark::_internal_set_benchmark_method(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  benchmark_method_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Explain_Benchmark::set_benchmark_method(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  benchmark_method_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mindspore.irpb.Explain.Benchmark.benchmark_method)
}
inline void Explain_Benchmark::set_benchmark_method(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  benchmark_method_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mindspore.irpb.Explain.Benchmark.benchmark_method)
}
inline void Explain_Benchmark::set_benchmark_method(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  benchmark_method_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mindspore.irpb.Explain.Benchmark.benchmark_method)
}
inline std::string* Explain_Benchmark::_internal_mutable_benchmark_method() {
  _has_bits_[0] |= 0x00000001u;
  return benchmark_method_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Explain_Benchmark::release_benchmark_method() {
  // @@protoc_insertion_point(field_release:mindspore.irpb.Explain.Benchmark.benchmark_method)
  if (!_internal_has_benchmark_method()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return benchmark_method_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Explain_Benchmark::set_allocated_benchmark_method(std::string* benchmark_method) {
  if (benchmark_method != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  benchmark_method_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), benchmark_method,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mindspore.irpb.Explain.Benchmark.benchmark_method)
}

// optional string explain_method = 2;
inline bool Explain_Benchmark::_internal_has_explain_method() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Explain_Benchmark::has_explain_method() const {
  return _internal_has_explain_method();
}
inline void Explain_Benchmark::clear_explain_method() {
  explain_method_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Explain_Benchmark::explain_method() const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.Explain.Benchmark.explain_method)
  return _internal_explain_method();
}
inline void Explain_Benchmark::set_explain_method(const std::string& value) {
  _internal_set_explain_method(value);
  // @@protoc_insertion_point(field_set:mindspore.irpb.Explain.Benchmark.explain_method)
}
inline std::string* Explain_Benchmark::mutable_explain_method() {
  // @@protoc_insertion_point(field_mutable:mindspore.irpb.Explain.Benchmark.explain_method)
  return _internal_mutable_explain_method();
}
inline const std::string& Explain_Benchmark::_internal_explain_method() const {
  return explain_method_.Get();
}
inline void Explain_Benchmark::_internal_set_explain_method(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  explain_method_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Explain_Benchmark::set_explain_method(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  explain_method_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mindspore.irpb.Explain.Benchmark.explain_method)
}
inline void Explain_Benchmark::set_explain_method(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  explain_method_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mindspore.irpb.Explain.Benchmark.explain_method)
}
inline void Explain_Benchmark::set_explain_method(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  explain_method_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mindspore.irpb.Explain.Benchmark.explain_method)
}
inline std::string* Explain_Benchmark::_internal_mutable_explain_method() {
  _has_bits_[0] |= 0x00000002u;
  return explain_method_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Explain_Benchmark::release_explain_method() {
  // @@protoc_insertion_point(field_release:mindspore.irpb.Explain.Benchmark.explain_method)
  if (!_internal_has_explain_method()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return explain_method_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Explain_Benchmark::set_allocated_explain_method(std::string* explain_method) {
  if (explain_method != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  explain_method_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), explain_method,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mindspore.irpb.Explain.Benchmark.explain_method)
}

// optional float total_score = 3;
inline bool Explain_Benchmark::_internal_has_total_score() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Explain_Benchmark::has_total_score() const {
  return _internal_has_total_score();
}
inline void Explain_Benchmark::clear_total_score() {
  total_score_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float Explain_Benchmark::_internal_total_score() const {
  return total_score_;
}
inline float Explain_Benchmark::total_score() const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.Explain.Benchmark.total_score)
  return _internal_total_score();
}
inline void Explain_Benchmark::_internal_set_total_score(float value) {
  _has_bits_[0] |= 0x00000004u;
  total_score_ = value;
}
inline void Explain_Benchmark::set_total_score(float value) {
  _internal_set_total_score(value);
  // @@protoc_insertion_point(field_set:mindspore.irpb.Explain.Benchmark.total_score)
}

// repeated float label_score = 4;
inline int Explain_Benchmark::_internal_label_score_size() const {
  return label_score_.size();
}
inline int Explain_Benchmark::label_score_size() const {
  return _internal_label_score_size();
}
inline void Explain_Benchmark::clear_label_score() {
  label_score_.Clear();
}
inline float Explain_Benchmark::_internal_label_score(int index) const {
  return label_score_.Get(index);
}
inline float Explain_Benchmark::label_score(int index) const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.Explain.Benchmark.label_score)
  return _internal_label_score(index);
}
inline void Explain_Benchmark::set_label_score(int index, float value) {
  label_score_.Set(index, value);
  // @@protoc_insertion_point(field_set:mindspore.irpb.Explain.Benchmark.label_score)
}
inline void Explain_Benchmark::_internal_add_label_score(float value) {
  label_score_.Add(value);
}
inline void Explain_Benchmark::add_label_score(float value) {
  _internal_add_label_score(value);
  // @@protoc_insertion_point(field_add:mindspore.irpb.Explain.Benchmark.label_score)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Explain_Benchmark::_internal_label_score() const {
  return label_score_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Explain_Benchmark::label_score() const {
  // @@protoc_insertion_point(field_list:mindspore.irpb.Explain.Benchmark.label_score)
  return _internal_label_score();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Explain_Benchmark::_internal_mutable_label_score() {
  return &label_score_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Explain_Benchmark::mutable_label_score() {
  // @@protoc_insertion_point(field_mutable_list:mindspore.irpb.Explain.Benchmark.label_score)
  return _internal_mutable_label_score();
}

// -------------------------------------------------------------------

// Explain_Metadata

// repeated string label = 1;
inline int Explain_Metadata::_internal_label_size() const {
  return label_.size();
}
inline int Explain_Metadata::label_size() const {
  return _internal_label_size();
}
inline void Explain_Metadata::clear_label() {
  label_.Clear();
}
inline std::string* Explain_Metadata::add_label() {
  // @@protoc_insertion_point(field_add_mutable:mindspore.irpb.Explain.Metadata.label)
  return _internal_add_label();
}
inline const std::string& Explain_Metadata::_internal_label(int index) const {
  return label_.Get(index);
}
inline const std::string& Explain_Metadata::label(int index) const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.Explain.Metadata.label)
  return _internal_label(index);
}
inline std::string* Explain_Metadata::mutable_label(int index) {
  // @@protoc_insertion_point(field_mutable:mindspore.irpb.Explain.Metadata.label)
  return label_.Mutable(index);
}
inline void Explain_Metadata::set_label(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:mindspore.irpb.Explain.Metadata.label)
  label_.Mutable(index)->assign(value);
}
inline void Explain_Metadata::set_label(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:mindspore.irpb.Explain.Metadata.label)
  label_.Mutable(index)->assign(std::move(value));
}
inline void Explain_Metadata::set_label(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  label_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mindspore.irpb.Explain.Metadata.label)
}
inline void Explain_Metadata::set_label(int index, const char* value, size_t size) {
  label_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mindspore.irpb.Explain.Metadata.label)
}
inline std::string* Explain_Metadata::_internal_add_label() {
  return label_.Add();
}
inline void Explain_Metadata::add_label(const std::string& value) {
  label_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mindspore.irpb.Explain.Metadata.label)
}
inline void Explain_Metadata::add_label(std::string&& value) {
  label_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mindspore.irpb.Explain.Metadata.label)
}
inline void Explain_Metadata::add_label(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  label_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mindspore.irpb.Explain.Metadata.label)
}
inline void Explain_Metadata::add_label(const char* value, size_t size) {
  label_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mindspore.irpb.Explain.Metadata.label)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Explain_Metadata::label() const {
  // @@protoc_insertion_point(field_list:mindspore.irpb.Explain.Metadata.label)
  return label_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Explain_Metadata::mutable_label() {
  // @@protoc_insertion_point(field_mutable_list:mindspore.irpb.Explain.Metadata.label)
  return &label_;
}

// repeated string explain_method = 2;
inline int Explain_Metadata::_internal_explain_method_size() const {
  return explain_method_.size();
}
inline int Explain_Metadata::explain_method_size() const {
  return _internal_explain_method_size();
}
inline void Explain_Metadata::clear_explain_method() {
  explain_method_.Clear();
}
inline std::string* Explain_Metadata::add_explain_method() {
  // @@protoc_insertion_point(field_add_mutable:mindspore.irpb.Explain.Metadata.explain_method)
  return _internal_add_explain_method();
}
inline const std::string& Explain_Metadata::_internal_explain_method(int index) const {
  return explain_method_.Get(index);
}
inline const std::string& Explain_Metadata::explain_method(int index) const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.Explain.Metadata.explain_method)
  return _internal_explain_method(index);
}
inline std::string* Explain_Metadata::mutable_explain_method(int index) {
  // @@protoc_insertion_point(field_mutable:mindspore.irpb.Explain.Metadata.explain_method)
  return explain_method_.Mutable(index);
}
inline void Explain_Metadata::set_explain_method(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:mindspore.irpb.Explain.Metadata.explain_method)
  explain_method_.Mutable(index)->assign(value);
}
inline void Explain_Metadata::set_explain_method(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:mindspore.irpb.Explain.Metadata.explain_method)
  explain_method_.Mutable(index)->assign(std::move(value));
}
inline void Explain_Metadata::set_explain_method(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  explain_method_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mindspore.irpb.Explain.Metadata.explain_method)
}
inline void Explain_Metadata::set_explain_method(int index, const char* value, size_t size) {
  explain_method_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mindspore.irpb.Explain.Metadata.explain_method)
}
inline std::string* Explain_Metadata::_internal_add_explain_method() {
  return explain_method_.Add();
}
inline void Explain_Metadata::add_explain_method(const std::string& value) {
  explain_method_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mindspore.irpb.Explain.Metadata.explain_method)
}
inline void Explain_Metadata::add_explain_method(std::string&& value) {
  explain_method_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mindspore.irpb.Explain.Metadata.explain_method)
}
inline void Explain_Metadata::add_explain_method(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  explain_method_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mindspore.irpb.Explain.Metadata.explain_method)
}
inline void Explain_Metadata::add_explain_method(const char* value, size_t size) {
  explain_method_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mindspore.irpb.Explain.Metadata.explain_method)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Explain_Metadata::explain_method() const {
  // @@protoc_insertion_point(field_list:mindspore.irpb.Explain.Metadata.explain_method)
  return explain_method_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Explain_Metadata::mutable_explain_method() {
  // @@protoc_insertion_point(field_mutable_list:mindspore.irpb.Explain.Metadata.explain_method)
  return &explain_method_;
}

// repeated string benchmark_method = 3;
inline int Explain_Metadata::_internal_benchmark_method_size() const {
  return benchmark_method_.size();
}
inline int Explain_Metadata::benchmark_method_size() const {
  return _internal_benchmark_method_size();
}
inline void Explain_Metadata::clear_benchmark_method() {
  benchmark_method_.Clear();
}
inline std::string* Explain_Metadata::add_benchmark_method() {
  // @@protoc_insertion_point(field_add_mutable:mindspore.irpb.Explain.Metadata.benchmark_method)
  return _internal_add_benchmark_method();
}
inline const std::string& Explain_Metadata::_internal_benchmark_method(int index) const {
  return benchmark_method_.Get(index);
}
inline const std::string& Explain_Metadata::benchmark_method(int index) const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.Explain.Metadata.benchmark_method)
  return _internal_benchmark_method(index);
}
inline std::string* Explain_Metadata::mutable_benchmark_method(int index) {
  // @@protoc_insertion_point(field_mutable:mindspore.irpb.Explain.Metadata.benchmark_method)
  return benchmark_method_.Mutable(index);
}
inline void Explain_Metadata::set_benchmark_method(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:mindspore.irpb.Explain.Metadata.benchmark_method)
  benchmark_method_.Mutable(index)->assign(value);
}
inline void Explain_Metadata::set_benchmark_method(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:mindspore.irpb.Explain.Metadata.benchmark_method)
  benchmark_method_.Mutable(index)->assign(std::move(value));
}
inline void Explain_Metadata::set_benchmark_method(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  benchmark_method_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mindspore.irpb.Explain.Metadata.benchmark_method)
}
inline void Explain_Metadata::set_benchmark_method(int index, const char* value, size_t size) {
  benchmark_method_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mindspore.irpb.Explain.Metadata.benchmark_method)
}
inline std::string* Explain_Metadata::_internal_add_benchmark_method() {
  return benchmark_method_.Add();
}
inline void Explain_Metadata::add_benchmark_method(const std::string& value) {
  benchmark_method_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mindspore.irpb.Explain.Metadata.benchmark_method)
}
inline void Explain_Metadata::add_benchmark_method(std::string&& value) {
  benchmark_method_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mindspore.irpb.Explain.Metadata.benchmark_method)
}
inline void Explain_Metadata::add_benchmark_method(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  benchmark_method_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mindspore.irpb.Explain.Metadata.benchmark_method)
}
inline void Explain_Metadata::add_benchmark_method(const char* value, size_t size) {
  benchmark_method_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mindspore.irpb.Explain.Metadata.benchmark_method)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Explain_Metadata::benchmark_method() const {
  // @@protoc_insertion_point(field_list:mindspore.irpb.Explain.Metadata.benchmark_method)
  return benchmark_method_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Explain_Metadata::mutable_benchmark_method() {
  // @@protoc_insertion_point(field_mutable_list:mindspore.irpb.Explain.Metadata.benchmark_method)
  return &benchmark_method_;
}

// -------------------------------------------------------------------

// Explain_HocLayer

// optional float prob = 1;
inline bool Explain_HocLayer::_internal_has_prob() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Explain_HocLayer::has_prob() const {
  return _internal_has_prob();
}
inline void Explain_HocLayer::clear_prob() {
  prob_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float Explain_HocLayer::_internal_prob() const {
  return prob_;
}
inline float Explain_HocLayer::prob() const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.Explain.HocLayer.prob)
  return _internal_prob();
}
inline void Explain_HocLayer::_internal_set_prob(float value) {
  _has_bits_[0] |= 0x00000001u;
  prob_ = value;
}
inline void Explain_HocLayer::set_prob(float value) {
  _internal_set_prob(value);
  // @@protoc_insertion_point(field_set:mindspore.irpb.Explain.HocLayer.prob)
}

// repeated int32 box = 2;
inline int Explain_HocLayer::_internal_box_size() const {
  return box_.size();
}
inline int Explain_HocLayer::box_size() const {
  return _internal_box_size();
}
inline void Explain_HocLayer::clear_box() {
  box_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Explain_HocLayer::_internal_box(int index) const {
  return box_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Explain_HocLayer::box(int index) const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.Explain.HocLayer.box)
  return _internal_box(index);
}
inline void Explain_HocLayer::set_box(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  box_.Set(index, value);
  // @@protoc_insertion_point(field_set:mindspore.irpb.Explain.HocLayer.box)
}
inline void Explain_HocLayer::_internal_add_box(::PROTOBUF_NAMESPACE_ID::int32 value) {
  box_.Add(value);
}
inline void Explain_HocLayer::add_box(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_box(value);
  // @@protoc_insertion_point(field_add:mindspore.irpb.Explain.HocLayer.box)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Explain_HocLayer::_internal_box() const {
  return box_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Explain_HocLayer::box() const {
  // @@protoc_insertion_point(field_list:mindspore.irpb.Explain.HocLayer.box)
  return _internal_box();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Explain_HocLayer::_internal_mutable_box() {
  return &box_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Explain_HocLayer::mutable_box() {
  // @@protoc_insertion_point(field_mutable_list:mindspore.irpb.Explain.HocLayer.box)
  return _internal_mutable_box();
}

// -------------------------------------------------------------------

// Explain_Hoc

// optional int32 label = 1;
inline bool Explain_Hoc::_internal_has_label() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Explain_Hoc::has_label() const {
  return _internal_has_label();
}
inline void Explain_Hoc::clear_label() {
  label_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Explain_Hoc::_internal_label() const {
  return label_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Explain_Hoc::label() const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.Explain.Hoc.label)
  return _internal_label();
}
inline void Explain_Hoc::_internal_set_label(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  label_ = value;
}
inline void Explain_Hoc::set_label(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:mindspore.irpb.Explain.Hoc.label)
}

// optional string mask = 2;
inline bool Explain_Hoc::_internal_has_mask() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Explain_Hoc::has_mask() const {
  return _internal_has_mask();
}
inline void Explain_Hoc::clear_mask() {
  mask_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Explain_Hoc::mask() const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.Explain.Hoc.mask)
  return _internal_mask();
}
inline void Explain_Hoc::set_mask(const std::string& value) {
  _internal_set_mask(value);
  // @@protoc_insertion_point(field_set:mindspore.irpb.Explain.Hoc.mask)
}
inline std::string* Explain_Hoc::mutable_mask() {
  // @@protoc_insertion_point(field_mutable:mindspore.irpb.Explain.Hoc.mask)
  return _internal_mutable_mask();
}
inline const std::string& Explain_Hoc::_internal_mask() const {
  return mask_.Get();
}
inline void Explain_Hoc::_internal_set_mask(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  mask_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Explain_Hoc::set_mask(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  mask_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mindspore.irpb.Explain.Hoc.mask)
}
inline void Explain_Hoc::set_mask(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  mask_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mindspore.irpb.Explain.Hoc.mask)
}
inline void Explain_Hoc::set_mask(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  mask_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mindspore.irpb.Explain.Hoc.mask)
}
inline std::string* Explain_Hoc::_internal_mutable_mask() {
  _has_bits_[0] |= 0x00000001u;
  return mask_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Explain_Hoc::release_mask() {
  // @@protoc_insertion_point(field_release:mindspore.irpb.Explain.Hoc.mask)
  if (!_internal_has_mask()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return mask_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Explain_Hoc::set_allocated_mask(std::string* mask) {
  if (mask != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  mask_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mask,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mindspore.irpb.Explain.Hoc.mask)
}

// repeated .mindspore.irpb.Explain.HocLayer layer = 3;
inline int Explain_Hoc::_internal_layer_size() const {
  return layer_.size();
}
inline int Explain_Hoc::layer_size() const {
  return _internal_layer_size();
}
inline void Explain_Hoc::clear_layer() {
  layer_.Clear();
}
inline ::mindspore::irpb::Explain_HocLayer* Explain_Hoc::mutable_layer(int index) {
  // @@protoc_insertion_point(field_mutable:mindspore.irpb.Explain.Hoc.layer)
  return layer_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mindspore::irpb::Explain_HocLayer >*
Explain_Hoc::mutable_layer() {
  // @@protoc_insertion_point(field_mutable_list:mindspore.irpb.Explain.Hoc.layer)
  return &layer_;
}
inline const ::mindspore::irpb::Explain_HocLayer& Explain_Hoc::_internal_layer(int index) const {
  return layer_.Get(index);
}
inline const ::mindspore::irpb::Explain_HocLayer& Explain_Hoc::layer(int index) const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.Explain.Hoc.layer)
  return _internal_layer(index);
}
inline ::mindspore::irpb::Explain_HocLayer* Explain_Hoc::_internal_add_layer() {
  return layer_.Add();
}
inline ::mindspore::irpb::Explain_HocLayer* Explain_Hoc::add_layer() {
  // @@protoc_insertion_point(field_add:mindspore.irpb.Explain.Hoc.layer)
  return _internal_add_layer();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mindspore::irpb::Explain_HocLayer >&
Explain_Hoc::layer() const {
  // @@protoc_insertion_point(field_list:mindspore.irpb.Explain.Hoc.layer)
  return layer_;
}

// -------------------------------------------------------------------

// Explain

// optional int32 sample_id = 1;
inline bool Explain::_internal_has_sample_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Explain::has_sample_id() const {
  return _internal_has_sample_id();
}
inline void Explain::clear_sample_id() {
  sample_id_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Explain::_internal_sample_id() const {
  return sample_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Explain::sample_id() const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.Explain.sample_id)
  return _internal_sample_id();
}
inline void Explain::_internal_set_sample_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  sample_id_ = value;
}
inline void Explain::set_sample_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sample_id(value);
  // @@protoc_insertion_point(field_set:mindspore.irpb.Explain.sample_id)
}

// optional string image_path = 2;
inline bool Explain::_internal_has_image_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Explain::has_image_path() const {
  return _internal_has_image_path();
}
inline void Explain::clear_image_path() {
  image_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Explain::image_path() const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.Explain.image_path)
  return _internal_image_path();
}
inline void Explain::set_image_path(const std::string& value) {
  _internal_set_image_path(value);
  // @@protoc_insertion_point(field_set:mindspore.irpb.Explain.image_path)
}
inline std::string* Explain::mutable_image_path() {
  // @@protoc_insertion_point(field_mutable:mindspore.irpb.Explain.image_path)
  return _internal_mutable_image_path();
}
inline const std::string& Explain::_internal_image_path() const {
  return image_path_.Get();
}
inline void Explain::_internal_set_image_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  image_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Explain::set_image_path(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  image_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mindspore.irpb.Explain.image_path)
}
inline void Explain::set_image_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  image_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mindspore.irpb.Explain.image_path)
}
inline void Explain::set_image_path(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  image_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mindspore.irpb.Explain.image_path)
}
inline std::string* Explain::_internal_mutable_image_path() {
  _has_bits_[0] |= 0x00000001u;
  return image_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Explain::release_image_path() {
  // @@protoc_insertion_point(field_release:mindspore.irpb.Explain.image_path)
  if (!_internal_has_image_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return image_path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Explain::set_allocated_image_path(std::string* image_path) {
  if (image_path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  image_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mindspore.irpb.Explain.image_path)
}

// repeated int32 ground_truth_label = 3;
inline int Explain::_internal_ground_truth_label_size() const {
  return ground_truth_label_.size();
}
inline int Explain::ground_truth_label_size() const {
  return _internal_ground_truth_label_size();
}
inline void Explain::clear_ground_truth_label() {
  ground_truth_label_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Explain::_internal_ground_truth_label(int index) const {
  return ground_truth_label_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Explain::ground_truth_label(int index) const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.Explain.ground_truth_label)
  return _internal_ground_truth_label(index);
}
inline void Explain::set_ground_truth_label(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  ground_truth_label_.Set(index, value);
  // @@protoc_insertion_point(field_set:mindspore.irpb.Explain.ground_truth_label)
}
inline void Explain::_internal_add_ground_truth_label(::PROTOBUF_NAMESPACE_ID::int32 value) {
  ground_truth_label_.Add(value);
}
inline void Explain::add_ground_truth_label(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_ground_truth_label(value);
  // @@protoc_insertion_point(field_add:mindspore.irpb.Explain.ground_truth_label)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Explain::_internal_ground_truth_label() const {
  return ground_truth_label_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Explain::ground_truth_label() const {
  // @@protoc_insertion_point(field_list:mindspore.irpb.Explain.ground_truth_label)
  return _internal_ground_truth_label();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Explain::_internal_mutable_ground_truth_label() {
  return &ground_truth_label_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Explain::mutable_ground_truth_label() {
  // @@protoc_insertion_point(field_mutable_list:mindspore.irpb.Explain.ground_truth_label)
  return _internal_mutable_ground_truth_label();
}

// optional .mindspore.irpb.Explain.Inference inference = 4;
inline bool Explain::_internal_has_inference() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || inference_ != nullptr);
  return value;
}
inline bool Explain::has_inference() const {
  return _internal_has_inference();
}
inline void Explain::clear_inference() {
  if (inference_ != nullptr) inference_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::mindspore::irpb::Explain_Inference& Explain::_internal_inference() const {
  const ::mindspore::irpb::Explain_Inference* p = inference_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mindspore::irpb::Explain_Inference*>(
      &::mindspore::irpb::_Explain_Inference_default_instance_);
}
inline const ::mindspore::irpb::Explain_Inference& Explain::inference() const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.Explain.inference)
  return _internal_inference();
}
inline void Explain::unsafe_arena_set_allocated_inference(
    ::mindspore::irpb::Explain_Inference* inference) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inference_);
  }
  inference_ = inference;
  if (inference) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mindspore.irpb.Explain.inference)
}
inline ::mindspore::irpb::Explain_Inference* Explain::release_inference() {
  _has_bits_[0] &= ~0x00000004u;
  ::mindspore::irpb::Explain_Inference* temp = inference_;
  inference_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mindspore::irpb::Explain_Inference* Explain::unsafe_arena_release_inference() {
  // @@protoc_insertion_point(field_release:mindspore.irpb.Explain.inference)
  _has_bits_[0] &= ~0x00000004u;
  ::mindspore::irpb::Explain_Inference* temp = inference_;
  inference_ = nullptr;
  return temp;
}
inline ::mindspore::irpb::Explain_Inference* Explain::_internal_mutable_inference() {
  _has_bits_[0] |= 0x00000004u;
  if (inference_ == nullptr) {
    auto* p = CreateMaybeMessage<::mindspore::irpb::Explain_Inference>(GetArena());
    inference_ = p;
  }
  return inference_;
}
inline ::mindspore::irpb::Explain_Inference* Explain::mutable_inference() {
  // @@protoc_insertion_point(field_mutable:mindspore.irpb.Explain.inference)
  return _internal_mutable_inference();
}
inline void Explain::set_allocated_inference(::mindspore::irpb::Explain_Inference* inference) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete inference_;
  }
  if (inference) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(inference);
    if (message_arena != submessage_arena) {
      inference = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inference, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  inference_ = inference;
  // @@protoc_insertion_point(field_set_allocated:mindspore.irpb.Explain.inference)
}

// repeated .mindspore.irpb.Explain.Explanation explanation = 5;
inline int Explain::_internal_explanation_size() const {
  return explanation_.size();
}
inline int Explain::explanation_size() const {
  return _internal_explanation_size();
}
inline void Explain::clear_explanation() {
  explanation_.Clear();
}
inline ::mindspore::irpb::Explain_Explanation* Explain::mutable_explanation(int index) {
  // @@protoc_insertion_point(field_mutable:mindspore.irpb.Explain.explanation)
  return explanation_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mindspore::irpb::Explain_Explanation >*
Explain::mutable_explanation() {
  // @@protoc_insertion_point(field_mutable_list:mindspore.irpb.Explain.explanation)
  return &explanation_;
}
inline const ::mindspore::irpb::Explain_Explanation& Explain::_internal_explanation(int index) const {
  return explanation_.Get(index);
}
inline const ::mindspore::irpb::Explain_Explanation& Explain::explanation(int index) const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.Explain.explanation)
  return _internal_explanation(index);
}
inline ::mindspore::irpb::Explain_Explanation* Explain::_internal_add_explanation() {
  return explanation_.Add();
}
inline ::mindspore::irpb::Explain_Explanation* Explain::add_explanation() {
  // @@protoc_insertion_point(field_add:mindspore.irpb.Explain.explanation)
  return _internal_add_explanation();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mindspore::irpb::Explain_Explanation >&
Explain::explanation() const {
  // @@protoc_insertion_point(field_list:mindspore.irpb.Explain.explanation)
  return explanation_;
}

// repeated .mindspore.irpb.Explain.Benchmark benchmark = 6;
inline int Explain::_internal_benchmark_size() const {
  return benchmark_.size();
}
inline int Explain::benchmark_size() const {
  return _internal_benchmark_size();
}
inline void Explain::clear_benchmark() {
  benchmark_.Clear();
}
inline ::mindspore::irpb::Explain_Benchmark* Explain::mutable_benchmark(int index) {
  // @@protoc_insertion_point(field_mutable:mindspore.irpb.Explain.benchmark)
  return benchmark_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mindspore::irpb::Explain_Benchmark >*
Explain::mutable_benchmark() {
  // @@protoc_insertion_point(field_mutable_list:mindspore.irpb.Explain.benchmark)
  return &benchmark_;
}
inline const ::mindspore::irpb::Explain_Benchmark& Explain::_internal_benchmark(int index) const {
  return benchmark_.Get(index);
}
inline const ::mindspore::irpb::Explain_Benchmark& Explain::benchmark(int index) const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.Explain.benchmark)
  return _internal_benchmark(index);
}
inline ::mindspore::irpb::Explain_Benchmark* Explain::_internal_add_benchmark() {
  return benchmark_.Add();
}
inline ::mindspore::irpb::Explain_Benchmark* Explain::add_benchmark() {
  // @@protoc_insertion_point(field_add:mindspore.irpb.Explain.benchmark)
  return _internal_add_benchmark();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mindspore::irpb::Explain_Benchmark >&
Explain::benchmark() const {
  // @@protoc_insertion_point(field_list:mindspore.irpb.Explain.benchmark)
  return benchmark_;
}

// optional .mindspore.irpb.Explain.Metadata metadata = 7;
inline bool Explain::_internal_has_metadata() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || metadata_ != nullptr);
  return value;
}
inline bool Explain::has_metadata() const {
  return _internal_has_metadata();
}
inline void Explain::clear_metadata() {
  if (metadata_ != nullptr) metadata_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::mindspore::irpb::Explain_Metadata& Explain::_internal_metadata() const {
  const ::mindspore::irpb::Explain_Metadata* p = metadata_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mindspore::irpb::Explain_Metadata*>(
      &::mindspore::irpb::_Explain_Metadata_default_instance_);
}
inline const ::mindspore::irpb::Explain_Metadata& Explain::metadata() const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.Explain.metadata)
  return _internal_metadata();
}
inline void Explain::unsafe_arena_set_allocated_metadata(
    ::mindspore::irpb::Explain_Metadata* metadata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  metadata_ = metadata;
  if (metadata) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mindspore.irpb.Explain.metadata)
}
inline ::mindspore::irpb::Explain_Metadata* Explain::release_metadata() {
  _has_bits_[0] &= ~0x00000008u;
  ::mindspore::irpb::Explain_Metadata* temp = metadata_;
  metadata_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mindspore::irpb::Explain_Metadata* Explain::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:mindspore.irpb.Explain.metadata)
  _has_bits_[0] &= ~0x00000008u;
  ::mindspore::irpb::Explain_Metadata* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::mindspore::irpb::Explain_Metadata* Explain::_internal_mutable_metadata() {
  _has_bits_[0] |= 0x00000008u;
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::mindspore::irpb::Explain_Metadata>(GetArena());
    metadata_ = p;
  }
  return metadata_;
}
inline ::mindspore::irpb::Explain_Metadata* Explain::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable:mindspore.irpb.Explain.metadata)
  return _internal_mutable_metadata();
}
inline void Explain::set_allocated_metadata(::mindspore::irpb::Explain_Metadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete metadata_;
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(metadata);
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:mindspore.irpb.Explain.metadata)
}

// optional string status = 8;
inline bool Explain::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Explain::has_status() const {
  return _internal_has_status();
}
inline void Explain::clear_status() {
  status_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Explain::status() const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.Explain.status)
  return _internal_status();
}
inline void Explain::set_status(const std::string& value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:mindspore.irpb.Explain.status)
}
inline std::string* Explain::mutable_status() {
  // @@protoc_insertion_point(field_mutable:mindspore.irpb.Explain.status)
  return _internal_mutable_status();
}
inline const std::string& Explain::_internal_status() const {
  return status_.Get();
}
inline void Explain::_internal_set_status(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Explain::set_status(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  status_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mindspore.irpb.Explain.status)
}
inline void Explain::set_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:mindspore.irpb.Explain.status)
}
inline void Explain::set_status(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mindspore.irpb.Explain.status)
}
inline std::string* Explain::_internal_mutable_status() {
  _has_bits_[0] |= 0x00000002u;
  return status_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Explain::release_status() {
  // @@protoc_insertion_point(field_release:mindspore.irpb.Explain.status)
  if (!_internal_has_status()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return status_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Explain::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mindspore.irpb.Explain.status)
}

// repeated .mindspore.irpb.Explain.Hoc hoc = 9;
inline int Explain::_internal_hoc_size() const {
  return hoc_.size();
}
inline int Explain::hoc_size() const {
  return _internal_hoc_size();
}
inline void Explain::clear_hoc() {
  hoc_.Clear();
}
inline ::mindspore::irpb::Explain_Hoc* Explain::mutable_hoc(int index) {
  // @@protoc_insertion_point(field_mutable:mindspore.irpb.Explain.hoc)
  return hoc_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mindspore::irpb::Explain_Hoc >*
Explain::mutable_hoc() {
  // @@protoc_insertion_point(field_mutable_list:mindspore.irpb.Explain.hoc)
  return &hoc_;
}
inline const ::mindspore::irpb::Explain_Hoc& Explain::_internal_hoc(int index) const {
  return hoc_.Get(index);
}
inline const ::mindspore::irpb::Explain_Hoc& Explain::hoc(int index) const {
  // @@protoc_insertion_point(field_get:mindspore.irpb.Explain.hoc)
  return _internal_hoc(index);
}
inline ::mindspore::irpb::Explain_Hoc* Explain::_internal_add_hoc() {
  return hoc_.Add();
}
inline ::mindspore::irpb::Explain_Hoc* Explain::add_hoc() {
  // @@protoc_insertion_point(field_add:mindspore.irpb.Explain.hoc)
  return _internal_add_hoc();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mindspore::irpb::Explain_Hoc >&
Explain::hoc() const {
  // @@protoc_insertion_point(field_list:mindspore.irpb.Explain.hoc)
  return hoc_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace irpb
}  // namespace mindspore

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mindspore_5fsummary_2eproto
