// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: summary.proto

#include "summary.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_histogram_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HistogramProto_histogram_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_summary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Summary_Audio_summary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_summary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Summary_Image_summary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_summary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_Summary_Value_summary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_summary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SummaryMetadata_summary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_summary_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SummaryMetadata_PluginData_summary_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TensorProto_tensor_2eproto;
namespace tensorboard {
class SummaryDescriptionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SummaryDescription> _instance;
} _SummaryDescription_default_instance_;
class SummaryMetadata_PluginDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SummaryMetadata_PluginData> _instance;
} _SummaryMetadata_PluginData_default_instance_;
class SummaryMetadataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SummaryMetadata> _instance;
} _SummaryMetadata_default_instance_;
class Summary_ImageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Summary_Image> _instance;
} _Summary_Image_default_instance_;
class Summary_AudioDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Summary_Audio> _instance;
} _Summary_Audio_default_instance_;
class Summary_ValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Summary_Value> _instance;
  float simple_value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr obsolete_old_style_histogram_;
  const ::tensorboard::Summary_Image* image_;
  const ::tensorboard::HistogramProto* histo_;
  const ::tensorboard::Summary_Audio* audio_;
  const ::tensorboard::TensorProto* tensor_;
} _Summary_Value_default_instance_;
class SummaryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Summary> _instance;
} _Summary_default_instance_;
}  // namespace tensorboard
static void InitDefaultsscc_info_Summary_summary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorboard::_Summary_default_instance_;
    new (ptr) ::tensorboard::Summary();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorboard::Summary::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Summary_summary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Summary_summary_2eproto}, {
      &scc_info_Summary_Value_summary_2eproto.base,}};

static void InitDefaultsscc_info_Summary_Audio_summary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorboard::_Summary_Audio_default_instance_;
    new (ptr) ::tensorboard::Summary_Audio();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorboard::Summary_Audio::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Summary_Audio_summary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Summary_Audio_summary_2eproto}, {}};

static void InitDefaultsscc_info_Summary_Image_summary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorboard::_Summary_Image_default_instance_;
    new (ptr) ::tensorboard::Summary_Image();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorboard::Summary_Image::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Summary_Image_summary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Summary_Image_summary_2eproto}, {}};

static void InitDefaultsscc_info_Summary_Value_summary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorboard::_Summary_Value_default_instance_;
    new (ptr) ::tensorboard::Summary_Value();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorboard::Summary_Value::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_Summary_Value_summary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_Summary_Value_summary_2eproto}, {
      &scc_info_SummaryMetadata_summary_2eproto.base,
      &scc_info_Summary_Image_summary_2eproto.base,
      &scc_info_HistogramProto_histogram_2eproto.base,
      &scc_info_Summary_Audio_summary_2eproto.base,
      &scc_info_TensorProto_tensor_2eproto.base,}};

static void InitDefaultsscc_info_SummaryDescription_summary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorboard::_SummaryDescription_default_instance_;
    new (ptr) ::tensorboard::SummaryDescription();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorboard::SummaryDescription::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SummaryDescription_summary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SummaryDescription_summary_2eproto}, {}};

static void InitDefaultsscc_info_SummaryMetadata_summary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorboard::_SummaryMetadata_default_instance_;
    new (ptr) ::tensorboard::SummaryMetadata();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorboard::SummaryMetadata::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SummaryMetadata_summary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SummaryMetadata_summary_2eproto}, {
      &scc_info_SummaryMetadata_PluginData_summary_2eproto.base,}};

static void InitDefaultsscc_info_SummaryMetadata_PluginData_summary_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tensorboard::_SummaryMetadata_PluginData_default_instance_;
    new (ptr) ::tensorboard::SummaryMetadata_PluginData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tensorboard::SummaryMetadata_PluginData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SummaryMetadata_PluginData_summary_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SummaryMetadata_PluginData_summary_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_summary_2eproto[7];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_summary_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_summary_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_summary_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorboard::SummaryDescription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorboard::SummaryDescription, type_hint_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorboard::SummaryMetadata_PluginData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorboard::SummaryMetadata_PluginData, plugin_name_),
  PROTOBUF_FIELD_OFFSET(::tensorboard::SummaryMetadata_PluginData, content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorboard::SummaryMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorboard::SummaryMetadata, plugin_data_),
  PROTOBUF_FIELD_OFFSET(::tensorboard::SummaryMetadata, display_name_),
  PROTOBUF_FIELD_OFFSET(::tensorboard::SummaryMetadata, summary_description_),
  PROTOBUF_FIELD_OFFSET(::tensorboard::SummaryMetadata, data_class_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorboard::Summary_Image, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorboard::Summary_Image, height_),
  PROTOBUF_FIELD_OFFSET(::tensorboard::Summary_Image, width_),
  PROTOBUF_FIELD_OFFSET(::tensorboard::Summary_Image, colorspace_),
  PROTOBUF_FIELD_OFFSET(::tensorboard::Summary_Image, encoded_image_string_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorboard::Summary_Audio, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorboard::Summary_Audio, sample_rate_),
  PROTOBUF_FIELD_OFFSET(::tensorboard::Summary_Audio, num_channels_),
  PROTOBUF_FIELD_OFFSET(::tensorboard::Summary_Audio, length_frames_),
  PROTOBUF_FIELD_OFFSET(::tensorboard::Summary_Audio, encoded_audio_string_),
  PROTOBUF_FIELD_OFFSET(::tensorboard::Summary_Audio, content_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorboard::Summary_Value, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::tensorboard::Summary_Value, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorboard::Summary_Value, node_name_),
  PROTOBUF_FIELD_OFFSET(::tensorboard::Summary_Value, tag_),
  PROTOBUF_FIELD_OFFSET(::tensorboard::Summary_Value, metadata_),
  offsetof(::tensorboard::Summary_ValueDefaultTypeInternal, simple_value_),
  offsetof(::tensorboard::Summary_ValueDefaultTypeInternal, obsolete_old_style_histogram_),
  offsetof(::tensorboard::Summary_ValueDefaultTypeInternal, image_),
  offsetof(::tensorboard::Summary_ValueDefaultTypeInternal, histo_),
  offsetof(::tensorboard::Summary_ValueDefaultTypeInternal, audio_),
  offsetof(::tensorboard::Summary_ValueDefaultTypeInternal, tensor_),
  PROTOBUF_FIELD_OFFSET(::tensorboard::Summary_Value, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorboard::Summary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tensorboard::Summary, value_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::tensorboard::SummaryDescription)},
  { 6, -1, sizeof(::tensorboard::SummaryMetadata_PluginData)},
  { 13, -1, sizeof(::tensorboard::SummaryMetadata)},
  { 22, -1, sizeof(::tensorboard::Summary_Image)},
  { 31, -1, sizeof(::tensorboard::Summary_Audio)},
  { 41, -1, sizeof(::tensorboard::Summary_Value)},
  { 56, -1, sizeof(::tensorboard::Summary)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorboard::_SummaryDescription_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorboard::_SummaryMetadata_PluginData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorboard::_SummaryMetadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorboard::_Summary_Image_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorboard::_Summary_Audio_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorboard::_Summary_Value_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorboard::_Summary_default_instance_),
};

const char descriptor_table_protodef_summary_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rsummary.proto\022\013tensorboard\032\017histogram."
  "proto\032\014tensor.proto\"\'\n\022SummaryDescriptio"
  "n\022\021\n\ttype_hint\030\001 \001(\t\"\342\001\n\017SummaryMetadata"
  "\022<\n\013plugin_data\030\001 \001(\0132\'.tensorboard.Summ"
  "aryMetadata.PluginData\022\024\n\014display_name\030\002"
  " \001(\t\022\033\n\023summary_description\030\003 \001(\t\022*\n\ndat"
  "a_class\030\004 \001(\0162\026.tensorboard.DataClass\0322\n"
  "\nPluginData\022\023\n\013plugin_name\030\001 \001(\t\022\017\n\007cont"
  "ent\030\002 \001(\014\"\344\004\n\007Summary\022)\n\005value\030\001 \003(\0132\032.t"
  "ensorboard.Summary.Value\032X\n\005Image\022\016\n\006hei"
  "ght\030\001 \001(\005\022\r\n\005width\030\002 \001(\005\022\022\n\ncolorspace\030\003"
  " \001(\005\022\034\n\024encoded_image_string\030\004 \001(\014\032}\n\005Au"
  "dio\022\023\n\013sample_rate\030\001 \001(\002\022\024\n\014num_channels"
  "\030\002 \001(\003\022\025\n\rlength_frames\030\003 \001(\003\022\034\n\024encoded"
  "_audio_string\030\004 \001(\014\022\024\n\014content_type\030\005 \001("
  "\t\032\324\002\n\005Value\022\021\n\tnode_name\030\007 \001(\t\022\013\n\003tag\030\001 "
  "\001(\t\022.\n\010metadata\030\t \001(\0132\034.tensorboard.Summ"
  "aryMetadata\022\026\n\014simple_value\030\002 \001(\002H\000\022&\n\034o"
  "bsolete_old_style_histogram\030\003 \001(\014H\000\022+\n\005i"
  "mage\030\004 \001(\0132\032.tensorboard.Summary.ImageH\000"
  "\022,\n\005histo\030\005 \001(\0132\033.tensorboard.HistogramP"
  "rotoH\000\022+\n\005audio\030\006 \001(\0132\032.tensorboard.Summ"
  "ary.AudioH\000\022*\n\006tensor\030\010 \001(\0132\030.tensorboar"
  "d.TensorProtoH\000B\007\n\005value*o\n\tDataClass\022\026\n"
  "\022DATA_CLASS_UNKNOWN\020\000\022\025\n\021DATA_CLASS_SCAL"
  "AR\020\001\022\025\n\021DATA_CLASS_TENSOR\020\002\022\034\n\030DATA_CLAS"
  "S_BLOB_SEQUENCE\020\003B~\n\030org.tensorflow.fram"
  "eworkB\rSummaryProtosP\001ZNgithub.com/tenso"
  "rflow/tensorflow/tensorflow/go/core/fram"
  "ework/summary_go_proto\370\001\001P\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_summary_2eproto_deps[2] = {
  &::descriptor_table_histogram_2eproto,
  &::descriptor_table_tensor_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_summary_2eproto_sccs[7] = {
  &scc_info_Summary_summary_2eproto.base,
  &scc_info_Summary_Audio_summary_2eproto.base,
  &scc_info_Summary_Image_summary_2eproto.base,
  &scc_info_Summary_Value_summary_2eproto.base,
  &scc_info_SummaryDescription_summary_2eproto.base,
  &scc_info_SummaryMetadata_summary_2eproto.base,
  &scc_info_SummaryMetadata_PluginData_summary_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_summary_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_summary_2eproto = {
  false, false, descriptor_table_protodef_summary_2eproto, "summary.proto", 1195,
  &descriptor_table_summary_2eproto_once, descriptor_table_summary_2eproto_sccs, descriptor_table_summary_2eproto_deps, 7, 2,
  schemas, file_default_instances, TableStruct_summary_2eproto::offsets,
  file_level_metadata_summary_2eproto, 7, file_level_enum_descriptors_summary_2eproto, file_level_service_descriptors_summary_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_summary_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_summary_2eproto)), true);
namespace tensorboard {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataClass_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_summary_2eproto);
  return file_level_enum_descriptors_summary_2eproto[0];
}
bool DataClass_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void SummaryDescription::InitAsDefaultInstance() {
}
class SummaryDescription::_Internal {
 public:
};

SummaryDescription::SummaryDescription(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorboard.SummaryDescription)
}
SummaryDescription::SummaryDescription(const SummaryDescription& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_hint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type_hint().empty()) {
    type_hint_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_type_hint(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:tensorboard.SummaryDescription)
}

void SummaryDescription::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SummaryDescription_summary_2eproto.base);
  type_hint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SummaryDescription::~SummaryDescription() {
  // @@protoc_insertion_point(destructor:tensorboard.SummaryDescription)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SummaryDescription::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  type_hint_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SummaryDescription::ArenaDtor(void* object) {
  SummaryDescription* _this = reinterpret_cast< SummaryDescription* >(object);
  (void)_this;
}
void SummaryDescription::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SummaryDescription::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SummaryDescription& SummaryDescription::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SummaryDescription_summary_2eproto.base);
  return *internal_default_instance();
}


void SummaryDescription::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorboard.SummaryDescription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_hint_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SummaryDescription::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string type_hint = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_type_hint();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorboard.SummaryDescription.type_hint"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SummaryDescription::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorboard.SummaryDescription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string type_hint = 1;
  if (this->type_hint().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type_hint().data(), static_cast<int>(this->_internal_type_hint().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorboard.SummaryDescription.type_hint");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type_hint(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorboard.SummaryDescription)
  return target;
}

size_t SummaryDescription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorboard.SummaryDescription)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string type_hint = 1;
  if (this->type_hint().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type_hint());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SummaryDescription::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorboard.SummaryDescription)
  GOOGLE_DCHECK_NE(&from, this);
  const SummaryDescription* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SummaryDescription>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorboard.SummaryDescription)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorboard.SummaryDescription)
    MergeFrom(*source);
  }
}

void SummaryDescription::MergeFrom(const SummaryDescription& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorboard.SummaryDescription)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type_hint().size() > 0) {
    _internal_set_type_hint(from._internal_type_hint());
  }
}

void SummaryDescription::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorboard.SummaryDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SummaryDescription::CopyFrom(const SummaryDescription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorboard.SummaryDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SummaryDescription::IsInitialized() const {
  return true;
}

void SummaryDescription::InternalSwap(SummaryDescription* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  type_hint_.Swap(&other->type_hint_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata SummaryDescription::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SummaryMetadata_PluginData::InitAsDefaultInstance() {
}
class SummaryMetadata_PluginData::_Internal {
 public:
};

SummaryMetadata_PluginData::SummaryMetadata_PluginData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorboard.SummaryMetadata.PluginData)
}
SummaryMetadata_PluginData::SummaryMetadata_PluginData(const SummaryMetadata_PluginData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  plugin_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_plugin_name().empty()) {
    plugin_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_plugin_name(),
      GetArena());
  }
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_content().empty()) {
    content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_content(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:tensorboard.SummaryMetadata.PluginData)
}

void SummaryMetadata_PluginData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SummaryMetadata_PluginData_summary_2eproto.base);
  plugin_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SummaryMetadata_PluginData::~SummaryMetadata_PluginData() {
  // @@protoc_insertion_point(destructor:tensorboard.SummaryMetadata.PluginData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SummaryMetadata_PluginData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  plugin_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SummaryMetadata_PluginData::ArenaDtor(void* object) {
  SummaryMetadata_PluginData* _this = reinterpret_cast< SummaryMetadata_PluginData* >(object);
  (void)_this;
}
void SummaryMetadata_PluginData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SummaryMetadata_PluginData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SummaryMetadata_PluginData& SummaryMetadata_PluginData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SummaryMetadata_PluginData_summary_2eproto.base);
  return *internal_default_instance();
}


void SummaryMetadata_PluginData::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorboard.SummaryMetadata.PluginData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  plugin_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  content_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SummaryMetadata_PluginData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string plugin_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_plugin_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorboard.SummaryMetadata.PluginData.plugin_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes content = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SummaryMetadata_PluginData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorboard.SummaryMetadata.PluginData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string plugin_name = 1;
  if (this->plugin_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_plugin_name().data(), static_cast<int>(this->_internal_plugin_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorboard.SummaryMetadata.PluginData.plugin_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_plugin_name(), target);
  }

  // bytes content = 2;
  if (this->content().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorboard.SummaryMetadata.PluginData)
  return target;
}

size_t SummaryMetadata_PluginData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorboard.SummaryMetadata.PluginData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string plugin_name = 1;
  if (this->plugin_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_plugin_name());
  }

  // bytes content = 2;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_content());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SummaryMetadata_PluginData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorboard.SummaryMetadata.PluginData)
  GOOGLE_DCHECK_NE(&from, this);
  const SummaryMetadata_PluginData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SummaryMetadata_PluginData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorboard.SummaryMetadata.PluginData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorboard.SummaryMetadata.PluginData)
    MergeFrom(*source);
  }
}

void SummaryMetadata_PluginData::MergeFrom(const SummaryMetadata_PluginData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorboard.SummaryMetadata.PluginData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.plugin_name().size() > 0) {
    _internal_set_plugin_name(from._internal_plugin_name());
  }
  if (from.content().size() > 0) {
    _internal_set_content(from._internal_content());
  }
}

void SummaryMetadata_PluginData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorboard.SummaryMetadata.PluginData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SummaryMetadata_PluginData::CopyFrom(const SummaryMetadata_PluginData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorboard.SummaryMetadata.PluginData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SummaryMetadata_PluginData::IsInitialized() const {
  return true;
}

void SummaryMetadata_PluginData::InternalSwap(SummaryMetadata_PluginData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  plugin_name_.Swap(&other->plugin_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  content_.Swap(&other->content_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata SummaryMetadata_PluginData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SummaryMetadata::InitAsDefaultInstance() {
  ::tensorboard::_SummaryMetadata_default_instance_._instance.get_mutable()->plugin_data_ = const_cast< ::tensorboard::SummaryMetadata_PluginData*>(
      ::tensorboard::SummaryMetadata_PluginData::internal_default_instance());
}
class SummaryMetadata::_Internal {
 public:
  static const ::tensorboard::SummaryMetadata_PluginData& plugin_data(const SummaryMetadata* msg);
};

const ::tensorboard::SummaryMetadata_PluginData&
SummaryMetadata::_Internal::plugin_data(const SummaryMetadata* msg) {
  return *msg->plugin_data_;
}
SummaryMetadata::SummaryMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorboard.SummaryMetadata)
}
SummaryMetadata::SummaryMetadata(const SummaryMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  display_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_display_name().empty()) {
    display_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_display_name(),
      GetArena());
  }
  summary_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_summary_description().empty()) {
    summary_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_summary_description(),
      GetArena());
  }
  if (from._internal_has_plugin_data()) {
    plugin_data_ = new ::tensorboard::SummaryMetadata_PluginData(*from.plugin_data_);
  } else {
    plugin_data_ = nullptr;
  }
  data_class_ = from.data_class_;
  // @@protoc_insertion_point(copy_constructor:tensorboard.SummaryMetadata)
}

void SummaryMetadata::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SummaryMetadata_summary_2eproto.base);
  display_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  summary_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&plugin_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_class_) -
      reinterpret_cast<char*>(&plugin_data_)) + sizeof(data_class_));
}

SummaryMetadata::~SummaryMetadata() {
  // @@protoc_insertion_point(destructor:tensorboard.SummaryMetadata)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SummaryMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  display_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  summary_description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete plugin_data_;
}

void SummaryMetadata::ArenaDtor(void* object) {
  SummaryMetadata* _this = reinterpret_cast< SummaryMetadata* >(object);
  (void)_this;
}
void SummaryMetadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SummaryMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SummaryMetadata& SummaryMetadata::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SummaryMetadata_summary_2eproto.base);
  return *internal_default_instance();
}


void SummaryMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorboard.SummaryMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  display_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  summary_description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && plugin_data_ != nullptr) {
    delete plugin_data_;
  }
  plugin_data_ = nullptr;
  data_class_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SummaryMetadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .tensorboard.SummaryMetadata.PluginData plugin_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_plugin_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string display_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_display_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorboard.SummaryMetadata.display_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string summary_description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_summary_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorboard.SummaryMetadata.summary_description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorboard.DataClass data_class = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_data_class(static_cast<::tensorboard::DataClass>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SummaryMetadata::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorboard.SummaryMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorboard.SummaryMetadata.PluginData plugin_data = 1;
  if (this->has_plugin_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::plugin_data(this), target, stream);
  }

  // string display_name = 2;
  if (this->display_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_display_name().data(), static_cast<int>(this->_internal_display_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorboard.SummaryMetadata.display_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_display_name(), target);
  }

  // string summary_description = 3;
  if (this->summary_description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_summary_description().data(), static_cast<int>(this->_internal_summary_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorboard.SummaryMetadata.summary_description");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_summary_description(), target);
  }

  // .tensorboard.DataClass data_class = 4;
  if (this->data_class() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_data_class(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorboard.SummaryMetadata)
  return target;
}

size_t SummaryMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorboard.SummaryMetadata)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string display_name = 2;
  if (this->display_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_display_name());
  }

  // string summary_description = 3;
  if (this->summary_description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_summary_description());
  }

  // .tensorboard.SummaryMetadata.PluginData plugin_data = 1;
  if (this->has_plugin_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *plugin_data_);
  }

  // .tensorboard.DataClass data_class = 4;
  if (this->data_class() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_data_class());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SummaryMetadata::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorboard.SummaryMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const SummaryMetadata* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SummaryMetadata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorboard.SummaryMetadata)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorboard.SummaryMetadata)
    MergeFrom(*source);
  }
}

void SummaryMetadata::MergeFrom(const SummaryMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorboard.SummaryMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.display_name().size() > 0) {
    _internal_set_display_name(from._internal_display_name());
  }
  if (from.summary_description().size() > 0) {
    _internal_set_summary_description(from._internal_summary_description());
  }
  if (from.has_plugin_data()) {
    _internal_mutable_plugin_data()->::tensorboard::SummaryMetadata_PluginData::MergeFrom(from._internal_plugin_data());
  }
  if (from.data_class() != 0) {
    _internal_set_data_class(from._internal_data_class());
  }
}

void SummaryMetadata::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorboard.SummaryMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SummaryMetadata::CopyFrom(const SummaryMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorboard.SummaryMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SummaryMetadata::IsInitialized() const {
  return true;
}

void SummaryMetadata::InternalSwap(SummaryMetadata* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  display_name_.Swap(&other->display_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  summary_description_.Swap(&other->summary_description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SummaryMetadata, data_class_)
      + sizeof(SummaryMetadata::data_class_)
      - PROTOBUF_FIELD_OFFSET(SummaryMetadata, plugin_data_)>(
          reinterpret_cast<char*>(&plugin_data_),
          reinterpret_cast<char*>(&other->plugin_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SummaryMetadata::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Summary_Image::InitAsDefaultInstance() {
}
class Summary_Image::_Internal {
 public:
};

Summary_Image::Summary_Image(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorboard.Summary.Image)
}
Summary_Image::Summary_Image(const Summary_Image& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  encoded_image_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_encoded_image_string().empty()) {
    encoded_image_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_encoded_image_string(),
      GetArena());
  }
  ::memcpy(&height_, &from.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&colorspace_) -
    reinterpret_cast<char*>(&height_)) + sizeof(colorspace_));
  // @@protoc_insertion_point(copy_constructor:tensorboard.Summary.Image)
}

void Summary_Image::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Summary_Image_summary_2eproto.base);
  encoded_image_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&colorspace_) -
      reinterpret_cast<char*>(&height_)) + sizeof(colorspace_));
}

Summary_Image::~Summary_Image() {
  // @@protoc_insertion_point(destructor:tensorboard.Summary.Image)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Summary_Image::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  encoded_image_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Summary_Image::ArenaDtor(void* object) {
  Summary_Image* _this = reinterpret_cast< Summary_Image* >(object);
  (void)_this;
}
void Summary_Image::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Summary_Image::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Summary_Image& Summary_Image::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Summary_Image_summary_2eproto.base);
  return *internal_default_instance();
}


void Summary_Image::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorboard.Summary.Image)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  encoded_image_string_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&colorspace_) -
      reinterpret_cast<char*>(&height_)) + sizeof(colorspace_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Summary_Image::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 height = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 colorspace = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          colorspace_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes encoded_image_string = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_encoded_image_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Summary_Image::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorboard.Summary.Image)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 height = 1;
  if (this->height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_height(), target);
  }

  // int32 width = 2;
  if (this->width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_width(), target);
  }

  // int32 colorspace = 3;
  if (this->colorspace() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_colorspace(), target);
  }

  // bytes encoded_image_string = 4;
  if (this->encoded_image_string().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_encoded_image_string(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorboard.Summary.Image)
  return target;
}

size_t Summary_Image::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorboard.Summary.Image)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes encoded_image_string = 4;
  if (this->encoded_image_string().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_encoded_image_string());
  }

  // int32 height = 1;
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_height());
  }

  // int32 width = 2;
  if (this->width() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_width());
  }

  // int32 colorspace = 3;
  if (this->colorspace() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_colorspace());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Summary_Image::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorboard.Summary.Image)
  GOOGLE_DCHECK_NE(&from, this);
  const Summary_Image* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Summary_Image>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorboard.Summary.Image)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorboard.Summary.Image)
    MergeFrom(*source);
  }
}

void Summary_Image::MergeFrom(const Summary_Image& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorboard.Summary.Image)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.encoded_image_string().size() > 0) {
    _internal_set_encoded_image_string(from._internal_encoded_image_string());
  }
  if (from.height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from.width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from.colorspace() != 0) {
    _internal_set_colorspace(from._internal_colorspace());
  }
}

void Summary_Image::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorboard.Summary.Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Summary_Image::CopyFrom(const Summary_Image& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorboard.Summary.Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Summary_Image::IsInitialized() const {
  return true;
}

void Summary_Image::InternalSwap(Summary_Image* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  encoded_image_string_.Swap(&other->encoded_image_string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Summary_Image, colorspace_)
      + sizeof(Summary_Image::colorspace_)
      - PROTOBUF_FIELD_OFFSET(Summary_Image, height_)>(
          reinterpret_cast<char*>(&height_),
          reinterpret_cast<char*>(&other->height_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Summary_Image::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Summary_Audio::InitAsDefaultInstance() {
}
class Summary_Audio::_Internal {
 public:
};

Summary_Audio::Summary_Audio(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorboard.Summary.Audio)
}
Summary_Audio::Summary_Audio(const Summary_Audio& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  encoded_audio_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_encoded_audio_string().empty()) {
    encoded_audio_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_encoded_audio_string(),
      GetArena());
  }
  content_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_content_type().empty()) {
    content_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_content_type(),
      GetArena());
  }
  ::memcpy(&num_channels_, &from.num_channels_,
    static_cast<size_t>(reinterpret_cast<char*>(&sample_rate_) -
    reinterpret_cast<char*>(&num_channels_)) + sizeof(sample_rate_));
  // @@protoc_insertion_point(copy_constructor:tensorboard.Summary.Audio)
}

void Summary_Audio::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Summary_Audio_summary_2eproto.base);
  encoded_audio_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&num_channels_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sample_rate_) -
      reinterpret_cast<char*>(&num_channels_)) + sizeof(sample_rate_));
}

Summary_Audio::~Summary_Audio() {
  // @@protoc_insertion_point(destructor:tensorboard.Summary.Audio)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Summary_Audio::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  encoded_audio_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Summary_Audio::ArenaDtor(void* object) {
  Summary_Audio* _this = reinterpret_cast< Summary_Audio* >(object);
  (void)_this;
}
void Summary_Audio::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Summary_Audio::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Summary_Audio& Summary_Audio::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Summary_Audio_summary_2eproto.base);
  return *internal_default_instance();
}


void Summary_Audio::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorboard.Summary.Audio)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  encoded_audio_string_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  content_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&num_channels_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sample_rate_) -
      reinterpret_cast<char*>(&num_channels_)) + sizeof(sample_rate_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Summary_Audio::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float sample_rate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          sample_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int64 num_channels = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          num_channels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 length_frames = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          length_frames_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes encoded_audio_string = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_encoded_audio_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string content_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_content_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorboard.Summary.Audio.content_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Summary_Audio::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorboard.Summary.Audio)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float sample_rate = 1;
  if (!(this->sample_rate() <= 0 && this->sample_rate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_sample_rate(), target);
  }

  // int64 num_channels = 2;
  if (this->num_channels() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_num_channels(), target);
  }

  // int64 length_frames = 3;
  if (this->length_frames() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_length_frames(), target);
  }

  // bytes encoded_audio_string = 4;
  if (this->encoded_audio_string().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_encoded_audio_string(), target);
  }

  // string content_type = 5;
  if (this->content_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content_type().data(), static_cast<int>(this->_internal_content_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorboard.Summary.Audio.content_type");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_content_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorboard.Summary.Audio)
  return target;
}

size_t Summary_Audio::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorboard.Summary.Audio)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes encoded_audio_string = 4;
  if (this->encoded_audio_string().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_encoded_audio_string());
  }

  // string content_type = 5;
  if (this->content_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content_type());
  }

  // int64 num_channels = 2;
  if (this->num_channels() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_num_channels());
  }

  // int64 length_frames = 3;
  if (this->length_frames() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_length_frames());
  }

  // float sample_rate = 1;
  if (!(this->sample_rate() <= 0 && this->sample_rate() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Summary_Audio::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorboard.Summary.Audio)
  GOOGLE_DCHECK_NE(&from, this);
  const Summary_Audio* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Summary_Audio>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorboard.Summary.Audio)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorboard.Summary.Audio)
    MergeFrom(*source);
  }
}

void Summary_Audio::MergeFrom(const Summary_Audio& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorboard.Summary.Audio)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.encoded_audio_string().size() > 0) {
    _internal_set_encoded_audio_string(from._internal_encoded_audio_string());
  }
  if (from.content_type().size() > 0) {
    _internal_set_content_type(from._internal_content_type());
  }
  if (from.num_channels() != 0) {
    _internal_set_num_channels(from._internal_num_channels());
  }
  if (from.length_frames() != 0) {
    _internal_set_length_frames(from._internal_length_frames());
  }
  if (!(from.sample_rate() <= 0 && from.sample_rate() >= 0)) {
    _internal_set_sample_rate(from._internal_sample_rate());
  }
}

void Summary_Audio::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorboard.Summary.Audio)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Summary_Audio::CopyFrom(const Summary_Audio& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorboard.Summary.Audio)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Summary_Audio::IsInitialized() const {
  return true;
}

void Summary_Audio::InternalSwap(Summary_Audio* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  encoded_audio_string_.Swap(&other->encoded_audio_string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  content_type_.Swap(&other->content_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Summary_Audio, sample_rate_)
      + sizeof(Summary_Audio::sample_rate_)
      - PROTOBUF_FIELD_OFFSET(Summary_Audio, num_channels_)>(
          reinterpret_cast<char*>(&num_channels_),
          reinterpret_cast<char*>(&other->num_channels_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Summary_Audio::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Summary_Value::InitAsDefaultInstance() {
  ::tensorboard::_Summary_Value_default_instance_._instance.get_mutable()->metadata_ = const_cast< ::tensorboard::SummaryMetadata*>(
      ::tensorboard::SummaryMetadata::internal_default_instance());
  ::tensorboard::_Summary_Value_default_instance_.simple_value_ = 0;
  ::tensorboard::_Summary_Value_default_instance_.obsolete_old_style_histogram_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::tensorboard::_Summary_Value_default_instance_.image_ = const_cast< ::tensorboard::Summary_Image*>(
      ::tensorboard::Summary_Image::internal_default_instance());
  ::tensorboard::_Summary_Value_default_instance_.histo_ = const_cast< ::tensorboard::HistogramProto*>(
      ::tensorboard::HistogramProto::internal_default_instance());
  ::tensorboard::_Summary_Value_default_instance_.audio_ = const_cast< ::tensorboard::Summary_Audio*>(
      ::tensorboard::Summary_Audio::internal_default_instance());
  ::tensorboard::_Summary_Value_default_instance_.tensor_ = const_cast< ::tensorboard::TensorProto*>(
      ::tensorboard::TensorProto::internal_default_instance());
}
class Summary_Value::_Internal {
 public:
  static const ::tensorboard::SummaryMetadata& metadata(const Summary_Value* msg);
  static const ::tensorboard::Summary_Image& image(const Summary_Value* msg);
  static const ::tensorboard::HistogramProto& histo(const Summary_Value* msg);
  static const ::tensorboard::Summary_Audio& audio(const Summary_Value* msg);
  static const ::tensorboard::TensorProto& tensor(const Summary_Value* msg);
};

const ::tensorboard::SummaryMetadata&
Summary_Value::_Internal::metadata(const Summary_Value* msg) {
  return *msg->metadata_;
}
const ::tensorboard::Summary_Image&
Summary_Value::_Internal::image(const Summary_Value* msg) {
  return *msg->value_.image_;
}
const ::tensorboard::HistogramProto&
Summary_Value::_Internal::histo(const Summary_Value* msg) {
  return *msg->value_.histo_;
}
const ::tensorboard::Summary_Audio&
Summary_Value::_Internal::audio(const Summary_Value* msg) {
  return *msg->value_.audio_;
}
const ::tensorboard::TensorProto&
Summary_Value::_Internal::tensor(const Summary_Value* msg) {
  return *msg->value_.tensor_;
}
void Summary_Value::set_allocated_image(::tensorboard::Summary_Image* image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_value();
  if (image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(image);
    if (message_arena != submessage_arena) {
      image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image, submessage_arena);
    }
    set_has_image();
    value_.image_ = image;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorboard.Summary.Value.image)
}
void Summary_Value::set_allocated_histo(::tensorboard::HistogramProto* histo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_value();
  if (histo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(histo)->GetArena();
    if (message_arena != submessage_arena) {
      histo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, histo, submessage_arena);
    }
    set_has_histo();
    value_.histo_ = histo;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorboard.Summary.Value.histo)
}
void Summary_Value::clear_histo() {
  if (_internal_has_histo()) {
    if (GetArena() == nullptr) {
      delete value_.histo_;
    }
    clear_has_value();
  }
}
void Summary_Value::set_allocated_audio(::tensorboard::Summary_Audio* audio) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_value();
  if (audio) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(audio);
    if (message_arena != submessage_arena) {
      audio = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, audio, submessage_arena);
    }
    set_has_audio();
    value_.audio_ = audio;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorboard.Summary.Value.audio)
}
void Summary_Value::set_allocated_tensor(::tensorboard::TensorProto* tensor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_value();
  if (tensor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tensor)->GetArena();
    if (message_arena != submessage_arena) {
      tensor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tensor, submessage_arena);
    }
    set_has_tensor();
    value_.tensor_ = tensor;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorboard.Summary.Value.tensor)
}
void Summary_Value::clear_tensor() {
  if (_internal_has_tensor()) {
    if (GetArena() == nullptr) {
      delete value_.tensor_;
    }
    clear_has_value();
  }
}
Summary_Value::Summary_Value(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorboard.Summary.Value)
}
Summary_Value::Summary_Value(const Summary_Value& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tag().empty()) {
    tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_tag(),
      GetArena());
  }
  node_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_node_name().empty()) {
    node_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_node_name(),
      GetArena());
  }
  if (from._internal_has_metadata()) {
    metadata_ = new ::tensorboard::SummaryMetadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  clear_has_value();
  switch (from.value_case()) {
    case kSimpleValue: {
      _internal_set_simple_value(from._internal_simple_value());
      break;
    }
    case kObsoleteOldStyleHistogram: {
      _internal_set_obsolete_old_style_histogram(from._internal_obsolete_old_style_histogram());
      break;
    }
    case kImage: {
      _internal_mutable_image()->::tensorboard::Summary_Image::MergeFrom(from._internal_image());
      break;
    }
    case kHisto: {
      _internal_mutable_histo()->::tensorboard::HistogramProto::MergeFrom(from._internal_histo());
      break;
    }
    case kAudio: {
      _internal_mutable_audio()->::tensorboard::Summary_Audio::MergeFrom(from._internal_audio());
      break;
    }
    case kTensor: {
      _internal_mutable_tensor()->::tensorboard::TensorProto::MergeFrom(from._internal_tensor());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tensorboard.Summary.Value)
}

void Summary_Value::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Summary_Value_summary_2eproto.base);
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  node_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  metadata_ = nullptr;
  clear_has_value();
}

Summary_Value::~Summary_Value() {
  // @@protoc_insertion_point(destructor:tensorboard.Summary.Value)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Summary_Value::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  node_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete metadata_;
  if (has_value()) {
    clear_value();
  }
}

void Summary_Value::ArenaDtor(void* object) {
  Summary_Value* _this = reinterpret_cast< Summary_Value* >(object);
  (void)_this;
}
void Summary_Value::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Summary_Value::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Summary_Value& Summary_Value::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Summary_Value_summary_2eproto.base);
  return *internal_default_instance();
}


void Summary_Value::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:tensorboard.Summary.Value)
  switch (value_case()) {
    case kSimpleValue: {
      // No need to clear
      break;
    }
    case kObsoleteOldStyleHistogram: {
      value_.obsolete_old_style_histogram_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
      break;
    }
    case kImage: {
      if (GetArena() == nullptr) {
        delete value_.image_;
      }
      break;
    }
    case kHisto: {
      if (GetArena() == nullptr) {
        delete value_.histo_;
      }
      break;
    }
    case kAudio: {
      if (GetArena() == nullptr) {
        delete value_.audio_;
      }
      break;
    }
    case kTensor: {
      if (GetArena() == nullptr) {
        delete value_.tensor_;
      }
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void Summary_Value::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorboard.Summary.Value)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tag_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  node_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  clear_value();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Summary_Value::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string tag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_tag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorboard.Summary.Value.tag"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float simple_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _internal_set_simple_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bytes obsolete_old_style_histogram = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_obsolete_old_style_histogram();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorboard.Summary.Image image = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_image(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorboard.HistogramProto histo = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_histo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorboard.Summary.Audio audio = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_audio(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string node_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_node_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorboard.Summary.Value.node_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorboard.TensorProto tensor = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_tensor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tensorboard.SummaryMetadata metadata = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Summary_Value::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorboard.Summary.Value)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tag = 1;
  if (this->tag().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tag().data(), static_cast<int>(this->_internal_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorboard.Summary.Value.tag");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tag(), target);
  }

  // float simple_value = 2;
  if (_internal_has_simple_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_simple_value(), target);
  }

  // bytes obsolete_old_style_histogram = 3;
  if (_internal_has_obsolete_old_style_histogram()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_obsolete_old_style_histogram(), target);
  }

  // .tensorboard.Summary.Image image = 4;
  if (_internal_has_image()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::image(this), target, stream);
  }

  // .tensorboard.HistogramProto histo = 5;
  if (_internal_has_histo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::histo(this), target, stream);
  }

  // .tensorboard.Summary.Audio audio = 6;
  if (_internal_has_audio()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::audio(this), target, stream);
  }

  // string node_name = 7;
  if (this->node_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_node_name().data(), static_cast<int>(this->_internal_node_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorboard.Summary.Value.node_name");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_node_name(), target);
  }

  // .tensorboard.TensorProto tensor = 8;
  if (_internal_has_tensor()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::tensor(this), target, stream);
  }

  // .tensorboard.SummaryMetadata metadata = 9;
  if (this->has_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::metadata(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorboard.Summary.Value)
  return target;
}

size_t Summary_Value::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorboard.Summary.Value)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tag = 1;
  if (this->tag().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tag());
  }

  // string node_name = 7;
  if (this->node_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_node_name());
  }

  // .tensorboard.SummaryMetadata metadata = 9;
  if (this->has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  switch (value_case()) {
    // float simple_value = 2;
    case kSimpleValue: {
      total_size += 1 + 4;
      break;
    }
    // bytes obsolete_old_style_histogram = 3;
    case kObsoleteOldStyleHistogram: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_obsolete_old_style_histogram());
      break;
    }
    // .tensorboard.Summary.Image image = 4;
    case kImage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.image_);
      break;
    }
    // .tensorboard.HistogramProto histo = 5;
    case kHisto: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.histo_);
      break;
    }
    // .tensorboard.Summary.Audio audio = 6;
    case kAudio: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.audio_);
      break;
    }
    // .tensorboard.TensorProto tensor = 8;
    case kTensor: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.tensor_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Summary_Value::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorboard.Summary.Value)
  GOOGLE_DCHECK_NE(&from, this);
  const Summary_Value* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Summary_Value>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorboard.Summary.Value)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorboard.Summary.Value)
    MergeFrom(*source);
  }
}

void Summary_Value::MergeFrom(const Summary_Value& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorboard.Summary.Value)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tag().size() > 0) {
    _internal_set_tag(from._internal_tag());
  }
  if (from.node_name().size() > 0) {
    _internal_set_node_name(from._internal_node_name());
  }
  if (from.has_metadata()) {
    _internal_mutable_metadata()->::tensorboard::SummaryMetadata::MergeFrom(from._internal_metadata());
  }
  switch (from.value_case()) {
    case kSimpleValue: {
      _internal_set_simple_value(from._internal_simple_value());
      break;
    }
    case kObsoleteOldStyleHistogram: {
      _internal_set_obsolete_old_style_histogram(from._internal_obsolete_old_style_histogram());
      break;
    }
    case kImage: {
      _internal_mutable_image()->::tensorboard::Summary_Image::MergeFrom(from._internal_image());
      break;
    }
    case kHisto: {
      _internal_mutable_histo()->::tensorboard::HistogramProto::MergeFrom(from._internal_histo());
      break;
    }
    case kAudio: {
      _internal_mutable_audio()->::tensorboard::Summary_Audio::MergeFrom(from._internal_audio());
      break;
    }
    case kTensor: {
      _internal_mutable_tensor()->::tensorboard::TensorProto::MergeFrom(from._internal_tensor());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void Summary_Value::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorboard.Summary.Value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Summary_Value::CopyFrom(const Summary_Value& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorboard.Summary.Value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Summary_Value::IsInitialized() const {
  return true;
}

void Summary_Value::InternalSwap(Summary_Value* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tag_.Swap(&other->tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  node_name_.Swap(&other->node_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(metadata_, other->metadata_);
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Summary_Value::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Summary::InitAsDefaultInstance() {
}
class Summary::_Internal {
 public:
};

Summary::Summary(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  value_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorboard.Summary)
}
Summary::Summary(const Summary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      value_(from.value_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorboard.Summary)
}

void Summary::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Summary_summary_2eproto.base);
}

Summary::~Summary() {
  // @@protoc_insertion_point(destructor:tensorboard.Summary)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Summary::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Summary::ArenaDtor(void* object) {
  Summary* _this = reinterpret_cast< Summary* >(object);
  (void)_this;
}
void Summary::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Summary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Summary& Summary::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Summary_summary_2eproto.base);
  return *internal_default_instance();
}


void Summary::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorboard.Summary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Summary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .tensorboard.Summary.Value value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_value(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Summary::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorboard.Summary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorboard.Summary.Value value = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_value_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_value(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorboard.Summary)
  return target;
}

size_t Summary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorboard.Summary)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorboard.Summary.Value value = 1;
  total_size += 1UL * this->_internal_value_size();
  for (const auto& msg : this->value_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Summary::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorboard.Summary)
  GOOGLE_DCHECK_NE(&from, this);
  const Summary* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Summary>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorboard.Summary)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorboard.Summary)
    MergeFrom(*source);
  }
}

void Summary::MergeFrom(const Summary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorboard.Summary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
}

void Summary::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorboard.Summary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Summary::CopyFrom(const Summary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorboard.Summary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Summary::IsInitialized() const {
  return true;
}

void Summary::InternalSwap(Summary* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  value_.InternalSwap(&other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Summary::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace tensorboard
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tensorboard::SummaryDescription* Arena::CreateMaybeMessage< ::tensorboard::SummaryDescription >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorboard::SummaryDescription >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorboard::SummaryMetadata_PluginData* Arena::CreateMaybeMessage< ::tensorboard::SummaryMetadata_PluginData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorboard::SummaryMetadata_PluginData >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorboard::SummaryMetadata* Arena::CreateMaybeMessage< ::tensorboard::SummaryMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorboard::SummaryMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorboard::Summary_Image* Arena::CreateMaybeMessage< ::tensorboard::Summary_Image >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorboard::Summary_Image >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorboard::Summary_Audio* Arena::CreateMaybeMessage< ::tensorboard::Summary_Audio >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorboard::Summary_Audio >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorboard::Summary_Value* Arena::CreateMaybeMessage< ::tensorboard::Summary_Value >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorboard::Summary_Value >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorboard::Summary* Arena::CreateMaybeMessage< ::tensorboard::Summary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorboard::Summary >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
